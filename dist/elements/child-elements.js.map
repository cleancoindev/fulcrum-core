{"version":3,"sources":["../../src/elements/child-elements.js"],"names":[],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;;AAGA,IAAI,iBAAiB,IAArB;;IAEqB,a;;;;;;;;;0BASnB,mB,gCAAoB,Q,EAAU;AAC5B,SAAK,SAAL,GAAiB,EAAjB;;AAEA,yBAAsB,QAAtB,kHAAgC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,UAArB,OAAqB;;;;AAG9B,uBAAiB,kBAAkB,QAAQ,mBAAR,EAA6B,OAAhE;AACA,WAAK,SAAL,CAAe,IAAf,CAAoB,eAAe,MAAf,CAAsB,IAAtB,EAA4B,OAA5B,CAApB;;AAED;AACF,G;;0BAsBD,c,2BAAe,I,EAAM;AACnB,QAAM,SAAS,EAAf;;AAEA,0BAAsB,KAAK,WAA3B,yHAAwC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,UAA7B,OAA6B;;AACtC,UAAI,QAAQ,IAAR,KAAiB,IAArB,EAA2B;AACzB,eAAO,IAAP,CAAY,OAAZ;AACD;AACF;;AAED,WAAO,MAAP;AACD,G;;0BAED,gB,6BAAiB,Q,EAAU;AACzB,QAAI,OAAO,EAAX;;AAEA,0BAAsB,QAAtB,yHAAgC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,UAArB,OAAqB;;AAC9B,WAAK,IAAL,CAAU,OAAV;;AAEA,UAAI,QAAQ,QAAZ,EAAsB;AACpB,eAAO,KAAK,MAAL,CAAY,KAAK,gBAAL,CAAsB,QAAQ,QAA9B,CAAZ,CAAP;AACD;AACF;;AAED,WAAO,IAAP;AACD,G;;0BAED,2B,wCAA4B,Q,EAAU,I,EAAM;AAC1C,QAAM,OAAO,EAAb;;AAEA,0BAAsB,QAAtB,yHAAgC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,UAArB,OAAqB;;AAC9B,WAAK,QAAQ,IAAR,CAAL,IAAsB,OAAtB;;AAEA,UAAI,QAAQ,QAAZ,EAAsB;AACpB,YAAM,WAAW,KAAK,2BAAL,CAAiC,QAAQ,QAAzC,EAAmD,IAAnD,CAAjB;;AAEA,8BAAkB,OAAO,IAAP,CAAY,QAAZ,CAAlB,yHAAyC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,cAA9B,GAA8B;;AACvC,eAAK,GAAL,IAAY,SAAS,GAAT,CAAZ;AACD;AACF;AACF;;AAED,WAAO,IAAP;AACD,G;;;;wBAlFc;AACb,UAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,aAAK,mBAAL,CAAyB,KAAK,aAA9B;AACD;;AAED,aAAO,KAAK,SAAZ;AACD;;;wBAciB;AAChB,aAAO,KAAK,gBAAL,CAAsB,KAAK,QAA3B,CAAP;AACD;;;wBAEmB;AAClB,UAAI,KAAK,cAAL,IAAuB,IAA3B,EAAiC;AAC/B,aAAK,cAAL,GAAsB,KAAK,2BAAL,CAAiC,KAAK,QAAtC,EAAgD,KAAhD,CAAtB;AACD;;AAED,aAAO,KAAK,cAAZ;AACD;;;wBAEwB;AACvB,UAAI,KAAK,mBAAL,IAA4B,IAAhC,EAAsC;AACpC,aAAK,mBAAL,GAA2B,KAAK,2BAAL,CAAiC,KAAK,QAAtC,EAAgD,UAAhD,CAA3B;AACD;;AAED,aAAO,KAAK,mBAAZ;AACD;;;;;;kBAvCkB,a","file":"child-elements.js","sourcesContent":["import Mixin from 'mixmatch';\n// import ElementFactory from './element-factory';\n\nlet ElementFactory = null;\n\nexport default class ChildElements extends Mixin {\n  get elements() {\n    if (!this._elements) {\n      this.createChildElements(this._elementsJSON);\n    }\n\n    return this._elements;\n  }\n\n  createChildElements(elements) {\n    this._elements = [];\n\n    for (const element of elements) {\n      /* eslint-disable global-require */\n      // hack for circular dependency, not ideal\n      ElementFactory = ElementFactory || require('./element-factory').default;\n      this._elements.push(ElementFactory.create(this, element));\n      /* eslint-enable global-require */\n    }\n  }\n\n  get allElements() {\n    return this._flattenElements(this.elements);\n  }\n\n  get elementsByKey() {\n    if (this._elementsByKey == null) {\n      this._elementsByKey = this._flattenElementsByAttribute(this.elements, 'key');\n    }\n\n    return this._elementsByKey;\n  }\n\n  get elementsByDataName() {\n    if (this._elementsByDataName == null) {\n      this._elementsByDataName = this._flattenElementsByAttribute(this.elements, 'dataName');\n    }\n\n    return this._elementsByDataName;\n  }\n\n  elementsOfType(type) {\n    const result = [];\n\n    for (const element of this.allElements) {\n      if (element.type === type) {\n        result.push(element);\n      }\n    }\n\n    return result;\n  }\n\n  _flattenElements(elements) {\n    let flat = [];\n\n    for (const element of elements) {\n      flat.push(element);\n\n      if (element.elements) {\n        flat = flat.concat(this._flattenElements(element.elements));\n      }\n    }\n\n    return flat;\n  }\n\n  _flattenElementsByAttribute(elements, attr) {\n    const flat = {};\n\n    for (const element of elements) {\n      flat[element[attr]] = element;\n\n      if (element.elements) {\n        const children = this._flattenElementsByAttribute(element.elements, attr);\n\n        for (const key of Object.keys(children)) {\n          flat[key] = children[key];\n        }\n      }\n    }\n\n    return flat;\n  }\n}\n"]}