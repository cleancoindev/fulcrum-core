{"version":3,"sources":["../../src/elements/child-elements.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAEA,IAAI,cAAc,GAAG,IAAI,CAAC;;IAEL,aAAa;YAAb,aAAa;;WAAb,aAAa;0BAAb,aAAa;;kEAAb,aAAa;;;eAAb,aAAa;;wCACZ,QAAQ,EAAE;AAC5B,UAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;;;;;;;AAEnB,6BAAoB,QAAQ,8HAAE;cAArB,OAAO;;;AAEd,wBAAc,GAAG,cAAc,IAAI,OAAO,CAAC,mBAAmB,CAAC,CAAC,OAAO,CAAC;AACxE,cAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;SAC1D;;;;;;;;;;;;;;;KACF;;;qCAsBgB,QAAQ,EAAE;AACzB,UAAI,IAAI,GAAG,EAAE,CAAC;;;;;;;AAEd,8BAAoB,QAAQ,mIAAE;cAArB,OAAO;;AACd,cAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;;AAEnB,cAAI,OAAO,CAAC,QAAQ,EAAE;AACpB,gBAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;WAC7D;SACF;;;;;;;;;;;;;;;;AAED,aAAO,IAAI,CAAC;KACb;;;gDAE2B,QAAQ,EAAE,IAAI,EAAE;AAC1C,UAAM,IAAI,GAAG,EAAE,CAAC;;;;;;;AAEhB,8BAAoB,QAAQ,mIAAE;cAArB,OAAO;;AACd,cAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,OAAO,CAAC;;AAE9B,cAAI,OAAO,CAAC,QAAQ,EAAE;AACpB,gBAAM,QAAQ,GAAG,IAAI,CAAC,2BAA2B,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;;;;;;;AAE1E,oCAAgB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,mIAAE;oBAA9B,GAAG;;AACV,oBAAI,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;eAC3B;;;;;;;;;;;;;;;WACF;SACF;;;;;;;;;;;;;;;;AAED,aAAO,IAAI,CAAC;KACb;;;wBAlDiB;AAChB,aAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KAC7C;;;wBAEmB;AAClB,UAAI,IAAI,CAAC,cAAc,IAAI,IAAI,EAAE;AAC/B,YAAI,CAAC,cAAc,GAAG,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;OAC9E;;AAED,aAAO,IAAI,CAAC,cAAc,CAAC;KAC5B;;;wBAEwB;AACvB,UAAI,IAAI,CAAC,mBAAmB,IAAI,IAAI,EAAE;AACpC,YAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;OACxF;;AAED,aAAO,IAAI,CAAC,mBAAmB,CAAC;KACjC;;;SA7BkB,aAAa;;;kBAAb,aAAa","file":"child-elements.js","sourcesContent":["import Mixin from '../utils/mixin';\n\nlet ElementFactory = null;\n\nexport default class ChildElements extends Mixin {\n  createChildElements(elements) {\n    this.elements = [];\n\n    for (let element of elements) {\n      // hack for circular dependency, not ideal\n      ElementFactory = ElementFactory || require('./element-factory').default;\n      this.elements.push(ElementFactory.create(this, element));\n    }\n  }\n\n  get allElements() {\n    return this._flattenElements(this.elements);\n  }\n\n  get elementsByKey() {\n    if (this._elementsByKey == null) {\n      this._elementsByKey = this._flattenElementsByAttribute(this.elements, 'key');\n    }\n\n    return this._elementsByKey;\n  }\n\n  get elementsByDataName() {\n    if (this._elementsByDataName == null) {\n      this._elementsByDataName = this._flattenElementsByAttribute(this.elements, 'dataName');\n    }\n\n    return this._elementsByDataName;\n  }\n\n  _flattenElements(elements) {\n    let flat = [];\n\n    for (let element of elements) {\n      flat.push(element);\n\n      if (element.elements) {\n        flat = flat.concat(this._flattenElements(element.elements));\n      }\n    }\n\n    return flat;\n  }\n\n  _flattenElementsByAttribute(elements, attr) {\n    const flat = {};\n\n    for (let element of elements) {\n      flat[element[attr]] = element;\n\n      if (element.elements) {\n        const children = this._flattenElementsByAttribute(element.elements, attr);\n\n        for (let key of Object.keys(children)) {\n          flat[key] = children[key];\n        }\n      }\n    }\n\n    return flat;\n  }\n}\n"]}