{"version":3,"sources":["../../src/elements/child-elements.js"],"names":["ChildElements","createChildElements","elements","_elements","element","el","create","push","elementsOfType","type","result","allElements","flattenElements","recurseRepeatables","_flattenElements","flat","recurse","isRepeatable","concat","_flattenElementsByAttribute","attr","children","Object","keys","key","_elementsJSON","_elementsByKey","_elementsByDataName"],"mappings":"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","file":"child-elements.js","sourcesContent":["import Mixin from 'mixmatch';\nimport ElementFactory from './element-factory';\n\nexport default class ChildElements extends Mixin {\n  get elements() {\n    if (!this._elements) {\n      this.createChildElements(this._elementsJSON);\n    }\n\n    return this._elements;\n  }\n\n  createChildElements(elements) {\n    this._elements = [];\n\n    if (elements) {\n      for (const element of elements) {\n        const el = ElementFactory.create(this, element);\n\n        if (el) {\n          this._elements.push(el);\n        }\n      }\n    }\n  }\n\n  get allElements() {\n    return this._flattenElements(this.elements);\n  }\n\n  get elementsByKey() {\n    if (this._elementsByKey == null) {\n      this._elementsByKey = this._flattenElementsByAttribute(this.elements, 'key');\n    }\n\n    return this._elementsByKey;\n  }\n\n  get elementsByDataName() {\n    if (this._elementsByDataName == null) {\n      this._elementsByDataName = this._flattenElementsByAttribute(this.elements, 'dataName');\n    }\n\n    return this._elementsByDataName;\n  }\n\n  elementsOfType(type) {\n    const result = [];\n\n    for (const element of this.allElements) {\n      if (element.type === type) {\n        result.push(element);\n      }\n    }\n\n    return result;\n  }\n\n  flattenElements(recurseRepeatables = true) {\n    return this._flattenElements(this.elements, recurseRepeatables);\n  }\n\n  _flattenElements(elements, recurseRepeatables = true) {\n    let flat = [];\n\n    for (const element of elements) {\n      flat.push(element);\n\n      let recurse = true;\n\n      if (!recurseRepeatables && element.isRepeatable) {\n        recurse = false;\n      }\n\n      if (recurse && element.elements) {\n        flat = flat.concat(this._flattenElements(element.elements, recurseRepeatables));\n      }\n    }\n\n    return flat;\n  }\n\n  _flattenElementsByAttribute(elements, attr) {\n    const flat = {};\n\n    for (const element of elements) {\n      flat[element[attr]] = element;\n\n      if (element.elements) {\n        const children = this._flattenElementsByAttribute(element.elements, attr);\n\n        for (const key of Object.keys(children)) {\n          flat[key] = children[key];\n        }\n      }\n    }\n\n    return flat;\n  }\n}\n"]}