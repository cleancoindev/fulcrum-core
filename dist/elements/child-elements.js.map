{"version":3,"sources":["../../src/elements/child-elements.js"],"names":[],"mappings":";;;;;;;;;;;;AAEA,IAAI,cAAc,GAAG,IAAI,CAAC;;AAEX,MAAM,aAAa,4BAAe;AAC/C,qBAAmB,CAAC,QAAQ,EAAE;AAC5B,QAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;;AAEnB,SAAK,IAAI,OAAO,IAAI,QAAQ,EAAE;;AAE5B,oBAAc,GAAG,cAAc,IAAI,OAAO,CAAC,mBAAmB,CAAC,CAAC,OAAO,CAAC;AACxE,UAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;KAC1D;GACF;;AAED,MAAI,WAAW,GAAG;AAChB,WAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;GAC7C;;AAED,MAAI,aAAa,GAAG;AAClB,QAAI,IAAI,CAAC,cAAc,IAAI,IAAI,EAAE;AAC/B,UAAI,CAAC,cAAc,GAAG,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;KAC9E;;AAED,WAAO,IAAI,CAAC,cAAc,CAAC;GAC5B;;AAED,MAAI,kBAAkB,GAAG;AACvB,QAAI,IAAI,CAAC,mBAAmB,IAAI,IAAI,EAAE;AACpC,UAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;KACxF;;AAED,WAAO,IAAI,CAAC,mBAAmB,CAAC;GACjC;;AAED,gBAAc,CAAC,IAAI,EAAE;AACnB,UAAM,MAAM,GAAG,EAAE,CAAC;;AAElB,SAAK,MAAM,OAAO,IAAI,IAAI,CAAC,WAAW,EAAE;AACtC,UAAI,OAAO,CAAC,IAAI,KAAK,IAAI,EAAE;AACzB,cAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;OACtB;KACF;;AAED,WAAO,MAAM,CAAC;GACf;;AAED,kBAAgB,CAAC,QAAQ,EAAE;AACzB,QAAI,IAAI,GAAG,EAAE,CAAC;;AAEd,SAAK,IAAI,OAAO,IAAI,QAAQ,EAAE;AAC5B,UAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;;AAEnB,UAAI,OAAO,CAAC,QAAQ,EAAE;AACpB,YAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;OAC7D;KACF;;AAED,WAAO,IAAI,CAAC;GACb;;AAED,6BAA2B,CAAC,QAAQ,EAAE,IAAI,EAAE;AAC1C,UAAM,IAAI,GAAG,EAAE,CAAC;;AAEhB,SAAK,IAAI,OAAO,IAAI,QAAQ,EAAE;AAC5B,UAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,OAAO,CAAC;;AAE9B,UAAI,OAAO,CAAC,QAAQ,EAAE;AACpB,cAAM,QAAQ,GAAG,IAAI,CAAC,2BAA2B,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;;AAE1E,aAAK,IAAI,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;AACrC,cAAI,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;SAC3B;OACF;KACF;;AAED,WAAO,IAAI,CAAC;GACb;CACF;kBA1EoB,aAAa","file":"child-elements.js","sourcesContent":["import Mixin from 'mixmatch';\n\nlet ElementFactory = null;\n\nexport default class ChildElements extends Mixin {\n  createChildElements(elements) {\n    this.elements = [];\n\n    for (let element of elements) {\n      // hack for circular dependency, not ideal\n      ElementFactory = ElementFactory || require('./element-factory').default;\n      this.elements.push(ElementFactory.create(this, element));\n    }\n  }\n\n  get allElements() {\n    return this._flattenElements(this.elements);\n  }\n\n  get elementsByKey() {\n    if (this._elementsByKey == null) {\n      this._elementsByKey = this._flattenElementsByAttribute(this.elements, 'key');\n    }\n\n    return this._elementsByKey;\n  }\n\n  get elementsByDataName() {\n    if (this._elementsByDataName == null) {\n      this._elementsByDataName = this._flattenElementsByAttribute(this.elements, 'dataName');\n    }\n\n    return this._elementsByDataName;\n  }\n\n  elementsOfType(type) {\n    const result = [];\n\n    for (const element of this.allElements) {\n      if (element.type === type) {\n        result.push(element);\n      }\n    }\n\n    return result;\n  }\n\n  _flattenElements(elements) {\n    let flat = [];\n\n    for (let element of elements) {\n      flat.push(element);\n\n      if (element.elements) {\n        flat = flat.concat(this._flattenElements(element.elements));\n      }\n    }\n\n    return flat;\n  }\n\n  _flattenElementsByAttribute(elements, attr) {\n    const flat = {};\n\n    for (let element of elements) {\n      flat[element[attr]] = element;\n\n      if (element.elements) {\n        const children = this._flattenElementsByAttribute(element.elements, attr);\n\n        for (let key of Object.keys(children)) {\n          flat[key] = children[key];\n        }\n      }\n    }\n\n    return flat;\n  }\n}\n"]}