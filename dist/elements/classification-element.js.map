{"version":3,"sources":["../../src/elements/classification-element.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;;;;;;;;;;;;;IAEqB,qB;;;AACnB,iCAAY,MAAZ,EAAoB,UAApB,EAAgC;AAAA;;AAAA,iDAC9B,oBAAM,MAAN,EAAc,UAAd,CAD8B;;AAG9B,UAAK,UAAL,GAAkB,CAAC,CAAC,WAAW,WAA/B;;AAEA,UAAK,aAAL,GAAqB,IAArB;;AAEA,UAAK,4BAAL,GAAoC,IAApC;;AAEA,UAAK,oBAAL,GAA4B,WAAW,qBAAvC;AAT8B;AAU/B;;kCAED,I,iBAAK,U,EAAY,Q,EAAU;AAAA;;AACzB,eAAW,oBAAX,CAAgC,KAAK,oBAArC,EAA2D,UAAC,GAAD,EAAM,iBAAN,EAA4B;;;;AAIrF,UAAI,GAAJ,EAAS;AACP,eAAO,SAAS,GAAT,CAAP;AACD;;AAED,aAAK,iBAAL,GAAyB,iBAAzB;;AAEA,aAAO,UAAP;AACD,KAXD;AAYD,G;;kCAsCD,c,6BAAiB;AACf,uBAAM,cAAN;;AAEA,SAAK,aAAL,GAAqB,IAArB;AACA,SAAK,4BAAL,GAAoC,IAApC;AACD,G;;;;wBAzCyB;AACxB,aAAO,KAAK,4BAAL,GAAoC,KAAK,4BAAzC,GAAwE,KAAK,uBAApF;AACD;;;wBAEkB;AACjB,aAAO,KAAK,aAAZ;AACD,K;sBAEgB,Y,EAAc;AAC7B,WAAK,aAAL,GAAqB,YAArB;AACD;;;sBAE+B,8B,EAAgC;AAC9D,UAAI,CAAC,8BAAD,IAAmC,+BAA+B,MAA/B,GAAwC,CAA/E,EAAkF;AAChF,aAAK,4BAAL,GAAoC,IAApC;AACA;AACD;;AAED,UAAM,sBAAsB,EAA5B;;AAEA,2BAAuC,8BAAvC,kHAAuE;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,YAA5D,wBAA4D;;AACrE,YAAM,iBAAiB,6BAAmB,IAAnB,EAAyB,wBAAzB,CAAvB;;AAEA,4BAAoB,IAApB,CAAyB,cAAzB;AACD;;AAED,WAAK,4BAAL,GAAoC,mBAApC;AACD;;;wBAEoB;AACnB,aAAO,OAAO,MAAP,CAAc,mBAAM,cAApB,EAAoC;AACzC,sBAAc,KAAK,aADsB;AAEzC,qCAA6B,KAAK;AAFO,OAApC,CAAP;AAID;;;wBAS6B;AAC5B,UAAI,CAAC,KAAK,iBAAV,EAA6B;AAC3B,eAAO,EAAP;AACD;;AAED,UAAM,QAAQ,KAAK,iBAAL,CAAuB,KAArC;;AAEA,UAAI,CAAC,KAAK,oBAAV,EAAgC;AAC9B,eAAO,KAAP;AACD;;AAED,UAAM,gBAAgB,EAAtB;;AAEA,UAAI,KAAJ,EAAW;AACT,8BAAmB,KAAnB,yHAA0B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,cAAf,IAAe;;AACxB,gCAAqB,KAAK,oBAA1B,yHAAgD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,gBAArC,MAAqC;;AAC9C,gBAAI,KAAK,KAAL,CAAW,WAAX,GAAyB,OAAzB,CAAiC,OAAO,WAAP,EAAjC,MAA2D,CAAC,CAAhE,EAAmE;AACjE,4BAAc,IAAd,CAAmB,IAAnB;AACD;AACF;AACF;AACF;;AAED,aAAO,aAAP;AACD;;;;;;kBA/FkB,qB","file":"classification-element.js","sourcesContent":["import Element from './element';\nimport Classification from './classification';\n\nexport default class ClassificationElement extends Element {\n  constructor(parent, attributes) {\n    super(parent, attributes);\n\n    this.allowOther = !!attributes.allow_other;\n\n    this._choiceFilter = null;\n\n    this._overrideClassificationItems = null;\n\n    this._classificationSetID = attributes.classification_set_id;\n  }\n\n  load(dataSource, callback) {\n    dataSource.getClassificationSet(this._classificationSetID, (err, classificationSet) => {\n      // TODO(zhm) Some forms have orphaned classification sets (life sucks)\n      // Maybe we should add a parameter to the load() method to throw\n      // errors.\n      if (err) {\n        return callback(err);\n      }\n\n      this.classificationSet = classificationSet;\n\n      return callback();\n    });\n  }\n\n  get classificationItems() {\n    return this._overrideClassificationItems ? this._overrideClassificationItems : this.filteredClassifications;\n  }\n\n  get choiceFilter() {\n    return this._choiceFilter;\n  }\n\n  set choiceFilter(choiceFilter) {\n    this._choiceFilter = choiceFilter;\n  }\n\n  set overrideClassificationItems(overrideClassificationSetItems) {\n    if (!overrideClassificationSetItems || overrideClassificationSetItems.length < 1) {\n      this._overrideClassificationItems = null;\n      return;\n    }\n\n    const classificationItems = [];\n\n    for (const classificationAttributes of overrideClassificationSetItems) {\n      const classification = new Classification(null, classificationAttributes);\n\n      classificationItems.push(classification);\n    }\n\n    this._overrideClassificationItems = classificationItems;\n  }\n\n  get overrideValues() {\n    return Object.assign(super.overrideValues, {\n      choiceFilter: this._choiceFilter,\n      overrideClassificationItems: this._overrideClassificationItems\n    });\n  }\n\n  resetOverrides() {\n    super.resetOverrides();\n\n    this._choiceFilter = null;\n    this._overrideClassificationItems = null;\n  }\n\n  get filteredClassifications() {\n    if (!this.classificationSet) {\n      return [];\n    }\n\n    const items = this.classificationSet.items;\n\n    if (!this.classificationFilter) {\n      return items;\n    }\n\n    const filteredItems = [];\n\n    if (items) {\n      for (const item of items) {\n        for (const filter of this.classificationFilter) {\n          if (item.value.toLowerCase().indexOf(filter.toLowerCase()) !== -1) {\n            filteredItems.push(item);\n          }\n        }\n      }\n    }\n\n    return filteredItems;\n  }\n}\n"]}