{"version":3,"sources":["../../src/elements/classification.js"],"names":["Classification","parent","attributes","label","value","_items","child_classifications","child","push","toJSON","values","exploded","item","slice","classifications","iterator","reverse"],"mappings":";;;;;;;;IAAqBA,c;AACnB,0BAAYC,MAAZ,EAAoBC,UAApB,EAAgC;AAAA;;AAC9B,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKE,KAAL,GAAaD,WAAWC,KAAxB;AACA,SAAKC,KAAL,GAAaF,WAAWE,KAAX,IAAoBF,WAAWC,KAA5C;AACA,SAAKE,MAAL,GAAc,EAAd;;AAEA,QAAIH,WAAWI,qBAAf,EAAsC;AACpC,2BAAoBJ,WAAWI,qBAA/B,kHAAsD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,YAA3CC,KAA2C;;AACpD,aAAKF,MAAL,CAAYG,IAAZ,CAAiB,IAAIR,cAAJ,CAAmB,IAAnB,EAAyBO,KAAzB,CAAjB;AACD;AACF;AACF;;2BA0BDE,M,qBAAS;AACP,QAAMC,SAAS,EAAf;;AAEA,0BAAmB,KAAKC,QAAxB,yHAAkC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,UAAvBC,IAAuB;;AAChC,UAAIA,KAAKR,KAAT,EAAgB;AACdM,eAAOF,IAAP,CAAYI,KAAKR,KAAjB;AACD;AACF;;AAED,WAAOM,MAAP;AACD,G;;;;wBAlCW;AACV,aAAO,KAAKL,MAAL,CAAYQ,KAAZ,EAAP;AACD;;;wBAEc;AACb;AACA,UAAMC,kBAAkB,EAAxB;;AAEA;AACA,UAAIC,WAAW,IAAf;AACA;;AAEA,aAAOA,YAAYA,SAASd,MAA5B,EAAoC;AAClCa,wBAAgBN,IAAhB,CAAqBO,QAArB;AACAA,mBAAWA,SAASd,MAApB;AACD;;AAED,UAAIc,QAAJ,EAAc;AACZD,wBAAgBN,IAAhB,CAAqBO,QAArB;AACD;;AAED,aAAOD,gBAAgBE,OAAhB,EAAP;AACD;;;;;;kBApCkBhB,c","file":"classification.js","sourcesContent":["export default class Classification {\n  constructor(parent, attributes) {\n    this.parent = parent;\n    this.label = attributes.label;\n    this.value = attributes.value || attributes.label;\n    this._items = [];\n\n    if (attributes.child_classifications) {\n      for (const child of attributes.child_classifications) {\n        this._items.push(new Classification(this, child));\n      }\n    }\n  }\n\n  get items() {\n    return this._items.slice();\n  }\n\n  get exploded() {\n    // return an array of all classifications including all parent items\n    const classifications = [];\n\n    /* eslint-disable consistent-this */\n    let iterator = this;\n    /* eslint-enable consistent-this */\n\n    while (iterator && iterator.parent) {\n      classifications.push(iterator);\n      iterator = iterator.parent;\n    }\n\n    if (iterator) {\n      classifications.push(iterator);\n    }\n\n    return classifications.reverse();\n  }\n\n  toJSON() {\n    const values = [];\n\n    for (const item of this.exploded) {\n      if (item.value) {\n        values.push(item.value);\n      }\n    }\n\n    return values;\n  }\n}\n"]}