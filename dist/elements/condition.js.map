{"version":3,"sources":["../../src/elements/condition.js"],"names":[],"mappings":"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","file":"condition.js","sourcesContent":["import TextUtils from '../utils/text-utils';\n\nexport default class Condition {\n  constructor(element, attributes) {\n    this.element = element;\n    this.fieldKey = attributes.field_key;\n    this.operator = attributes.operator;\n    this.value = attributes.value;\n  }\n\n  static isEqual(formValue, stringValue) {\n    if (formValue == null) {\n      return TextUtils.isEmpty(stringValue);\n    }\n    return formValue.isEqual(stringValue);\n  }\n\n  static isEmpty(formValue) {\n    return formValue == null || formValue.isEmpty;\n  }\n\n  static contains(formValue, stringValue) {\n    if (formValue == null) {\n      return TextUtils.isEmpty(stringValue);\n    }\n    return formValue.contains(stringValue);\n  }\n\n  static startsWith(formValue, stringValue) {\n    if (formValue == null) {\n      return TextUtils.isEmpty(stringValue);\n    }\n    return formValue.startsWith(stringValue);\n  }\n\n  static isLessThan(formValue, stringValue) {\n    if (formValue == null) {\n      return TextUtils.isEmpty(stringValue);\n    }\n    return formValue.isLessThan(stringValue);\n  }\n\n  static isGreaterThan(formValue, stringValue) {\n    if (formValue == null) {\n      return TextUtils.isEmpty(stringValue);\n    }\n    return formValue.isGreaterThan(stringValue);\n  }\n\n  static shouldElementBeVisible(element, record, values, cache) {\n    if (cache != null && cache[element.key] != null) {\n      return cache[element.key];\n    }\n\n    cache = cache || {};\n\n    let shouldBeVisible = Condition.shouldElementBeVisibleRecursive(element, record, values, cache);\n\n    if (element.isSectionElement) {\n      let hasVisibleChildren = false;\n\n      for (let childElement of element.elements) {\n        const visible = Condition.shouldElementBeVisibleRecursive(childElement, record, values, cache);\n\n        if (visible) {\n          hasVisibleChildren = true;\n          break;\n        }\n      }\n\n      shouldBeVisible = shouldBeVisible && hasVisibleChildren;\n    }\n\n    return shouldBeVisible;\n  }\n\n  static shouldElementBeVisibleRecursive(element, record, values, cache) {\n    if (cache != null && cache[element.key] != null) {\n      return cache[element.key];\n    }\n\n    // break circular conditions by assigning an early `true` value so if this\n    // method is re-entered again for the same element before the recursion\n    // ends, it early exits instead of blowing the stack\n    cache[element.key] = true;\n\n    if (element.isHidden || element.hasHiddenParent) {\n      cache[element.key] = false;\n      return false;\n    }\n\n    let shouldBeVisible = false;\n\n    if (!element.hasVisibilityConditions) {\n      shouldBeVisible = true;\n    }\n\n    if (element.visibleConditionsType === 'any') {\n      for (let condition of element.visibleConditions) {\n        const isSatisfied = condition.isSatisfied(record, values, cache);\n\n        if (isSatisfied) {\n          shouldBeVisible = true;\n          break;\n        }\n      }\n    } else if (element.visibleConditionsType === 'all') {\n      shouldBeVisible = true;\n\n      for (let condition of element.visibleConditions) {\n        const isSatisfied = condition.isSatisfied(record, values, cache);\n\n        if (!isSatisfied) {\n          shouldBeVisible = false;\n        }\n      }\n    }\n\n    // Make sure all parent elements are also visible according to these same rules.\n    // If a section is hidden because of a rule, all child elements are implicitly hidden\n    // and should return NO from this method. This makes it very easy to determine value relevance\n    // by looking at only the field values without having to worry about Section elements and\n    // dependencies. See clearInvisibleValuesWithConditionValues for usage of this method that\n    // relies on this behavior.\n\n    let parentsVisible = true;\n\n    let iterator = element.parent;\n\n    while (iterator != null) {\n      const parentVisible = Condition.shouldElementBeVisibleRecursive(iterator, record, values, cache);\n\n      if (!parentVisible) {\n        parentsVisible = false;\n        break;\n      }\n\n      iterator = iterator.parent;\n    }\n\n    const result = parentsVisible && shouldBeVisible;\n\n    cache[element.key] = result;\n\n    return result;\n  }\n\n  static shouldElementBeRequired(element, record, values) {\n    if (!element.hasRequiredConditions) {\n      return element.isRequired;\n    }\n\n    const cache = {};\n\n    let shouldBeRequired = false;\n\n    if (element.requiredConditionsType === 'any') {\n      for (let condition of element.requiredConditions) {\n        const isSatisfied = condition.isSatisfied(record, values, cache);\n\n        if (isSatisfied) {\n          shouldBeRequired = true;\n          break;\n        }\n      }\n    } else if (element.requiredConditionsType === 'all') {\n      shouldBeRequired = true;\n\n      for (let condition of element.requiredConditions) {\n        const isSatisfied = condition.isSatisfied(record, values, cache);\n\n        if (!isSatisfied) {\n          shouldBeRequired = false;\n          break;\n        }\n      }\n    }\n\n    return shouldBeRequired;\n  }\n\n  static valueForCondition(condition, values, record) {\n    if (condition.fieldKey === '@status') {\n      return record.statusValue;\n    }\n    return values.get(condition.fieldKey);\n  }\n\n  static elementForCondition(condition, record) {\n    if (condition.fieldKey === '@status') {\n      return record.statusValue.element;\n    }\n    return record.form.elementsByKey[condition.fieldKey];\n  }\n\n  isSatisfied(record, values, cache) {\n    const referencedElement = Condition.elementForCondition(this, record);\n\n    let isReferencedFieldSatisfied = true;\n\n    if (referencedElement != null) {\n      // If the referenced element or one its parents is explicitly marked as hidden, it's a special\n      // case and the referenced element should always be considered satisfied so that it's possible\n      // to put conditions on explicitly hidden values.\n\n      const skipElement = referencedElement.isHidden || referencedElement.hasHiddenParent;\n\n      if (!skipElement) {\n        isReferencedFieldSatisfied = Condition.shouldElementBeVisibleRecursive(referencedElement, record, values, cache);\n      }\n    }\n\n    return this._isSatisfied(record, values, isReferencedFieldSatisfied);\n  }\n\n  _isSatisfied(record, values, isReferencedFieldSatisfied) {\n    let formValue = null;\n\n    // if all of this field's conditions aren't also satisfied, treat the value as nil (empty). This has the same\n    // effect as 'clearing' invisible values by treating them as blank when their conditions aren't met, regardless\n    // of the actual preserved value in the field. If a field is invisible, its value is always nil with respect\n    // to condition logic.\n\n    if (isReferencedFieldSatisfied) {\n      formValue = Condition.valueForCondition(this, values, record);\n    }\n\n    switch (this.operator) {\n      case 'equal_to':\n        return Condition.isEqual(formValue, this.value);\n\n      case 'not_equal_to':\n        return !Condition.isEqual(formValue, this.value);\n\n      case 'is_empty':\n        return Condition.isEmpty(formValue);\n\n      case 'is_not_empty':\n        return !Condition.isEmpty(formValue);\n\n      case 'contains':\n        return Condition.contains(formValue, this.value);\n\n      case 'starts_with':\n        return Condition.startsWith(formValue, this.value);\n\n      case 'greater_than':\n        return Condition.isGreaterThan(formValue, this.value);\n\n      case 'less_than':\n        return Condition.isLessThan(formValue, this.value);\n\n      default:\n        break;\n    }\n\n    return true;\n  }\n}\n"]}