{"version":3,"sources":["../../src/elements/container-element.js"],"names":["ContainerElement","parent","attributes","createChildElements","elements","resetOverrides","element","initialize","ChildElements","includeInto","Element"],"mappings":";;;;AAAA;;;;AACA;;;;;;;;;;;;;;IAEqBA,gB;;;AACnB,4BAAYC,MAAZ,EAAoBC,UAApB,EAAgC;AAAA;;AAAA,iDAC9B,oBAAMD,MAAN,EAAcC,UAAd,CAD8B;;AAG9B,UAAKC,mBAAL,CAAyBD,WAAWE,QAApC;AAH8B;AAI/B;;6BAEDC,c,6BAAiB;AACf,uBAAMA,cAAN;;AAEA,yBAAsB,KAAKD,QAA3B,kHAAqC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,UAA1BE,OAA0B;;AACnCA,cAAQD,cAAR;AACD;AACF,G;;mBAEME,U,yBAAa;AAClB;AACA;AACA;AACA;AACAC,4BAAcC,WAAd,CAA0BT,gBAA1B;AACD,G;;;EArB2CU,iB;;kBAAzBV,gB","file":"container-element.js","sourcesContent":["import Element from './element';\nimport ChildElements from './child-elements';\n\nexport default class ContainerElement extends Element {\n  constructor(parent, attributes) {\n    super(parent, attributes);\n\n    this.createChildElements(attributes.elements);\n  }\n\n  resetOverrides() {\n    super.resetOverrides();\n\n    for (const element of this.elements) {\n      element.resetOverrides();\n    }\n  }\n\n  static initialize() {\n    // this is a bit of a hack to get around circular dependencies. This gets\n    // called once from within the factory to setup the class. Putting this\n    // at global scope introduces circular dependency errors because ChildElements\n    // ends up loading the factory.\n    ChildElements.includeInto(ContainerElement);\n  }\n}\n"]}