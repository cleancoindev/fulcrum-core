{"version":3,"sources":["../../src/elements/display-options.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;IAIqB,cAAc;AACjC,WADmB,cAAc,CACrB,UAAU,EAAE;0BADL,cAAc;;AAE/B,QAAI,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC;AAC9B,QAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC;GACrC;;eAJkB,cAAc;;2BAsB1B,KAAK,EAAE;AACZ,UAAI,CAAC,oBAAU,SAAS,CAAC,KAAK,CAAC,EAAE;AAC/B,eAAO,KAAK,CAAC;OACd;;AAED,cAAQ,IAAI;AACV,aAAK,IAAI,CAAC,QAAQ;AAChB,iBAAO,sBAAY,gCAAgC,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;;AAAA,AAEnE,aAAK,IAAI,CAAC,MAAM;AACd,cAAM,IAAI,GAAG,oBAAU,SAAS,CAAC,KAAK,CAAC,CAAC;;AAExC,cAAI,IAAI,IAAI,IAAI,EAAE;AAChB,mBAAO,oBAAU,mBAAmB,CAAC,IAAI,CAAC,CAAC;WAC5C;;AAED,gBAAM;;AAAA,AAER,aAAK,IAAI,CAAC,UAAU;AAClB,iBAAO,sBAAY,cAAc,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;;AAAA,AAE1D;AACE,gBAAM;AAAA,OACT;;AAED,aAAO,KAAK,CAAC;KACd;;;wBA1CgB;AACf,aAAO,IAAI,CAAC,KAAK,KAAK,UAAU,CAAC;KAClC;;;wBAEc;AACb,aAAO,IAAI,CAAC,KAAK,KAAK,QAAQ,CAAC;KAChC;;;wBAEY;AACX,aAAO,IAAI,CAAC,KAAK,KAAK,MAAM,CAAC;KAC9B;;;wBAEY;AACX,aAAO,IAAI,CAAC,KAAK,KAAK,MAAM,CAAC;KAC9B;;;SApBkB,cAAc;;;kBAAd,cAAc","file":"display-options.js","sourcesContent":["import TextUtils from '../utils/text-utils';\nimport NumberUtils from '../utils/number-utils';\nimport DateUtils from '../utils/date-utils';\n\nexport default class DisplayOptions {\n  constructor(attributes) {\n    this.style = attributes.style;\n    this.currency = attributes.currency;\n  }\n\n  get isCurrency() {\n    return this.style === 'currency';\n  }\n\n  get isNumber() {\n    return this.style === 'number';\n  }\n\n  get isDate() {\n    return this.style === 'date';\n  }\n\n  get isText() {\n    return this.style === 'text';\n  }\n\n  format(value) {\n    if (!TextUtils.isPresent(value)) {\n      return value;\n    }\n\n    switch (true) {\n      case this.isNumber:\n        return NumberUtils.localizedStringFromMachineString(value, true);\n\n      case this.isDate:\n        const date = DateUtils.parseDate(value);\n\n        if (date != null) {\n          return DateUtils.formatLocalizedDate(date);\n        }\n\n        break;\n\n      case this.isCurrency:\n        return NumberUtils.formatCurrency(value, this.currency);\n\n      default:\n        break;\n    }\n\n    return value;\n  }\n}\n"]}