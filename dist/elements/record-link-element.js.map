{"version":3,"sources":["../../src/elements/record-link-element.js"],"names":[],"mappings":";;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;;;IAEqB,iB;;;AACnB,6BAAY,MAAZ,EAAoB,UAApB,EAAgC;AAAA;;AAAA,iDAC9B,oBAAM,MAAN,EAAc,UAAd,CAD8B;;AAG9B,UAAK,OAAL,GAAe,WAAW,OAA1B;;AAEA,UAAK,aAAL,GAAqB,CAAC,CAAC,WAAW,sBAAlC;AACA,UAAK,aAAL,GAAqB,CAAC,CAAC,WAAW,sBAAlC;AACA,UAAK,aAAL,GAAqB,CAAC,CAAC,WAAW,sBAAlC;AACA,UAAK,aAAL,GAAqB,CAAC,CAAC,WAAW,sBAAlC;;;AAGA,UAAK,oBAAL,GAA4B,WAAW,sBAAvC;;AAEA,UAAK,gBAAL,GAAwB,EAAxB;;AAEA,QAAI,WAAW,iBAAf,EAAkC;AAChC,2BAAwB,WAAW,iBAAnC,kHAAsD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,YAA3C,SAA2C;;AACpD,cAAK,gBAAL,CAAsB,IAAtB,CAA2B,kCAAwB,SAAxB,CAA3B;AACD;AACF;;AAED,UAAK,cAAL,GAAsB,EAAtB;;AAEA,QAAI,WAAW,eAAf,EAAgC;AAC9B,4BAAkB,WAAW,eAA7B,yHAA8C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,YAAnC,GAAmC;;AAC5C,cAAK,cAAL,CAAoB,IAApB,CAAyB,gCAAsB,GAAtB,CAAzB;AACD;AACF;AA3B6B;AA4B/B;;8BAED,I,iBAAK,U,EAAY,Q,EAAU;AAAA;;AACzB,eAAW,OAAX,CAAmB,KAAK,OAAxB,EAAiC,UAAC,GAAD,EAAM,IAAN,EAAe;AAC9C,UAAI,GAAJ,EAAS;AACP,iBAAS,GAAT;AACA;AACD;;;AAGD,aAAK,IAAL,GAAY,IAAZ;AACA,aAAK,IAAL,CAAU,IAAV,CAAe,UAAf,EAA2B,QAA3B;AACD,KATD;AAUD,G;;;;;kBA1CkB,iB","file":"record-link-element.js","sourcesContent":["import Element from './element';\nimport RecordLinkCondition from './record-link-condition';\nimport RecordLinkDefault from './record-link-default';\n\nexport default class RecordLinkElement extends Element {\n  constructor(parent, attributes) {\n    super(parent, attributes);\n\n    this._formID = attributes.form_id;\n\n    this.allowMultiple = !!attributes.allow_multiple_records;\n    this.allowExisting = !!attributes.allow_existing_records;\n    this.allowCreating = !!attributes.allow_creating_records;\n    this.allowUpdating = !!attributes.allow_updating_records;\n\n    // TODO(zhm) model these\n    this.recordConditionsType = attributes.record_conditions_type;\n\n    this.recordConditions = [];\n\n    if (attributes.record_conditions) {\n      for (const condition of attributes.record_conditions) {\n        this.recordConditions.push(new RecordLinkCondition(condition));\n      }\n    }\n\n    this.recordDefaults = [];\n\n    if (attributes.record_defaults) {\n      for (const def of attributes.record_defaults) {\n        this.recordDefaults.push(new RecordLinkDefault(def));\n      }\n    }\n  }\n\n  load(dataSource, callback) {\n    dataSource.getForm(this._formID, (err, form) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      // recursively load the linked forms\n      this.form = form;\n      this.form.load(dataSource, callback);\n    });\n  }\n}\n\n"]}