{"version":3,"sources":["../../src/elements/status-element.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;;;;;;;;;;;;;AAEA,IAAM,yBAAyB;AAC7B,SAAO,QADsB;AAE7B,OAAK,SAFwB;AAG7B,aAAW,QAHkB;AAI7B,WAAS,KAJoB;AAK7B,aAAW,KALkB;AAM7B,WAAS;AANoB,CAA/B;;IASqB,a;;;AACnB,yBAAY,MAAZ,EAAoB,UAApB,EAAgC;AAAA;;AAC9B,eAAW,IAAX,GAAkB,aAAlB;;AAEA,QAAM,QAAQ,OAAO,MAAP,CAAc,EAAd,EAAkB,sBAAlB,EAA0C,UAA1C,CAAd;;AAH8B,iDAK9B,2BAAM,MAAN,EAAc,KAAd,CAL8B;;AAO9B,UAAK,aAAL,GAAqB,IAArB;;AAEA,UAAK,QAAL,GAAgB,EAAhB;;AAEA,yBAAqB,MAAM,OAA3B,kHAAoC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,UAAzB,MAAyB;;AAClC,YAAK,QAAL,CAAc,IAAd,CAAmB,2BAAiB,MAAjB,CAAnB;AACD;;AAED,UAAK,QAAL,GAAgB,CAAC,CAAC,MAAM,OAAxB;AACA,UAAK,SAAL,GAAiB,CAAC,CAAC,MAAM,SAAzB;AAhB8B;AAiB/B;;0BAsBD,c,2BAAe,K,EAAO;AACpB,0BAAqB,KAAK,OAA1B,yHAAmC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,UAAxB,MAAwB;;AACjC,UAAI,OAAO,KAAP,KAAiB,KAArB,EAA4B;AAC1B,eAAO,MAAP;AACD;AACF;;AAED,WAAO,IAAP;AACD,G;;0BA4BD,c,6BAAiB;AACf,8BAAM,cAAN;;AAEA,SAAK,aAAL,GAAqB,IAArB;AACD,G;;;;wBA5Da;AACZ,aAAO,KAAK,eAAZ;AACD;;;wBAEe;AACd,aAAO,KAAK,QAAZ;AACD;;;wBAEgB;AACf,aAAO,KAAK,SAAZ;AACD;;;wBAEkB;AACjB,aAAO,KAAK,aAAZ;AACD,K;sBAEgB,Y,EAAc;AAC7B,WAAK,aAAL,GAAqB,YAArB;AACD;;;wBAYqB;AACpB,UAAM,QAAQ,KAAK,QAAnB;;AAEA,UAAI,CAAC,KAAK,YAAV,EAAwB;AACtB,eAAO,KAAP;AACD;;AAED,UAAM,gBAAgB,EAAtB;;AAEA,4BAAmB,KAAnB,yHAA0B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,YAAf,IAAe;;AACxB,8BAAqB,KAAK,YAA1B,yHAAwC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,cAA7B,MAA6B;;AACtC,cAAI,KAAK,KAAL,CAAW,WAAX,GAAyB,OAAzB,CAAiC,OAAO,WAAP,EAAjC,MAA2D,CAAC,CAAhE,EAAmE;AACjE,0BAAc,IAAd,CAAmB,IAAnB;AACD;AACF;AACF;;AAED,aAAO,aAAP;AACD;;;wBAEoB;AACnB,aAAO,OAAO,MAAP,CAAc,0BAAM,cAApB,EAAoC;AACzC,sBAAc,KAAK;AADsB,OAApC,CAAP;AAGD;;;;;;kBA1EkB,a","file":"status-element.js","sourcesContent":["import TextualElement from './textual-element';\nimport StatusChoice from './status-choice';\n\nconst DEFAULT_STATUS_ELEMENT = {\n  label: 'Status',\n  key: '@status',\n  data_name: 'status',\n  enabled: false,\n  read_only: false,\n  choices: []\n};\n\nexport default class StatusElement extends TextualElement {\n  constructor(parent, attributes) {\n    attributes.type = 'StatusField';\n\n    const attrs = Object.assign({}, DEFAULT_STATUS_ELEMENT, attributes);\n\n    super(parent, attrs);\n\n    this._statusFilter = null;\n\n    this._choices = [];\n\n    for (const choice of attrs.choices) {\n      this._choices.push(new StatusChoice(choice));\n    }\n\n    this._enabled = !!attrs.enabled;\n    this._readOnly = !!attrs.read_only;\n  }\n\n  get choices() {\n    return this.filteredChoices;\n  }\n\n  get isEnabled() {\n    return this._enabled;\n  }\n\n  get isReadOnly() {\n    return this._readOnly;\n  }\n\n  get statusFilter() {\n    return this._statusFilter;\n  }\n\n  set statusFilter(statusFilter) {\n    this._statusFilter = statusFilter;\n  }\n\n  statusForValue(value) {\n    for (const choice of this.choices) {\n      if (choice.value === value) {\n        return choice;\n      }\n    }\n\n    return null;\n  }\n\n  get filteredChoices() {\n    const items = this._choices;\n\n    if (!this.statusFilter) {\n      return items;\n    }\n\n    const filteredItems = [];\n\n    for (const item of items) {\n      for (const filter of this.statusFilter) {\n        if (item.value.toLowerCase().indexOf(filter.toLowerCase()) !== -1) {\n          filteredItems.push(item);\n        }\n      }\n    }\n\n    return filteredItems;\n  }\n\n  get overrideValues() {\n    return Object.assign(super.overrideValues, {\n      statusFilter: this._statusFilter\n    });\n  }\n\n  resetOverrides() {\n    super.resetOverrides();\n\n    this._statusFilter = null;\n  }\n}\n"]}