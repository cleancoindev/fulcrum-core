{"version":3,"sources":["../../src/media/track-player.js"],"names":[],"mappings":"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","file":"track-player.js","sourcesContent":["export default class TrackPlayer {\n  constructor(track) {\n    this.track = track;\n\n    if (this.track.firstSegment) {\n      this.firstTimestamp = this.track.firstSegment.firstPoint.time;\n      this.lastTimestamp = this.track.lastSegment.lastPoint.time;\n      this.duration = this.lastTimestamp - this.firstTimeStamp;\n    }\n  }\n\n  findPreviousTrackPointIndexes(time) {\n    let segmentIndex = 0;\n    let pointIndex = 0;\n\n    let timestamp = null;\n\n    const milliseconds = time;\n\n    for (const segment of this.track.segments) {\n      for (const point of segment.points) {\n        timestamp = point.time;\n\n        if (timestamp > milliseconds) {\n          return [ segmentIndex, Math.max(0, pointIndex - 1) ];\n        }\n\n        ++pointIndex;\n      }\n\n      ++segmentIndex;\n    }\n\n    // if the video time is beyond the end of the track, return the last index\n    if (milliseconds >= this.lastTimestamp) {\n      return [ this.track.segments.length - 1, this.track.lastSegment.points.length - 1 ];\n    }\n\n    return [ 0, 0 ];\n  }\n\n  findPreviousTrackPoint(time) {\n    const [ segmentIndex, pointIndex ] = this.findPreviousTrackPointIndexes(time);\n    return this.track.segments[segmentIndex].points[pointIndex];\n  }\n\n  findNextTrackPoint(time) {\n    const [ segmentIndex, pointIndex ] = this.findPreviousTrackPointIndexes(time);\n\n    if (pointIndex + 1 < this.track.segments[segmentIndex].points.length) {\n      return this.track.segments[segmentIndex].points[pointIndex + 1];\n    }\n\n    return this.track.segments[segmentIndex].points[pointIndex];\n  }\n\n  point(trackTime) {\n    if (this.track == null || this.track.segments.length === 0) {\n      return null;\n    }\n\n    const time = (trackTime * 1000.0) + this.firstTimestamp;\n\n    const lastPoint = this.findPreviousTrackPoint(time);\n    const nextPoint = this.findNextTrackPoint(time);\n\n    const lastTimestamp = lastPoint.time;\n    const nextTimestamp = nextPoint.time;\n\n    const lastLatitude = lastPoint.latitude;\n    const lastLongitude = lastPoint.longitude;\n\n    const nextLatitude = nextPoint.latitude;\n    const nextLongitude = nextPoint.longitude;\n\n    const isLastPointInvalid = lastLatitude == null || lastLongitude == null;\n    const isNextPointInvalid = nextLatitude == null || nextLongitude == null;\n\n    if (isLastPointInvalid || isNextPointInvalid) {\n      return null;\n    }\n\n    const range = nextTimestamp - lastTimestamp;\n    const percentage = range === 0 ? 0 : (time - lastTimestamp) / range;\n\n    const lastLocation = [ lastPoint.latitude, lastPoint.longitude ];\n    const nextLocation = [ nextPoint.latitude, nextPoint.longitude ];\n\n    const lon = ((nextLocation[1] - lastLocation[1]) * percentage) + lastLocation[1];\n    const lat = ((nextLocation[0] - lastLocation[0]) * percentage) + lastLocation[0];\n\n    const location = [ lat, lon ];\n\n    let headingDiff = nextPoint.viewport - lastPoint.viewport;\n    let courseDiff = nextPoint.course - lastPoint.course;\n\n    const accuracyDiff = nextPoint.horizontalAccuracy - lastPoint.horizontalAccuracy;\n\n    const lastAltitude = lastPoint.altitude;\n    const nextAltitude = nextPoint.altitude;\n\n    const lastSpeed = lastPoint.speed;\n    const nextSpeed = nextPoint.speed;\n\n    let altitudeDiff = null;\n\n    if (lastAltitude != null && nextAltitude != null) {\n      altitudeDiff = nextAltitude - lastAltitude;\n    }\n\n    let speedDiff = null;\n\n    if (lastSpeed != null && nextSpeed != null && lastSpeed > -1 && nextSpeed > -1) {\n      speedDiff = nextSpeed - lastSpeed;\n    }\n\n    /*\n\n    When the diff between the 2 points is greater than 180, we need\n    to reverse the direction of the tweening so it produces the fastest\n    transition between the 2 angles. By negating the different angles we\n    produce a much simpler value.\n\n    Example 1:\n      going from 30 to 350 should produce a -40 degree counterclockwise\n      result, not a 320 clockwise animation\n\n    Example 2:\n      going from 350 to 30 should produce a 40 degree clockwise\n      result, not a 320 counterclockwise animation\n\n    */\n\n    if (Math.abs(headingDiff) > 180) {\n      if (nextPoint.viewport > lastPoint.viewport) {\n        headingDiff = -lastPoint.viewport - (360 - nextPoint.viewport);\n      } else {\n        headingDiff = -(-(360 - lastPoint.viewport) - nextPoint.viewport);\n      }\n    }\n\n    if (Math.abs(courseDiff) > 180) {\n      if (nextPoint.course > lastPoint.course) {\n        courseDiff = -lastPoint.course - (360 - nextPoint.course);\n      } else {\n        courseDiff = -(-(360 - lastPoint.course) - nextPoint.course);\n      }\n    }\n\n    const heading = (headingDiff * percentage) + lastPoint.viewport;\n    const course = (courseDiff * percentage) + lastPoint.course;\n    const accuracy = (accuracyDiff * percentage) + lastPoint.horizontalAccuracy;\n\n    let altitude = null;\n    let speed = null;\n\n    if (altitudeDiff != null) {\n      altitude = (altitudeDiff * percentage) + lastPoint.altitude;\n    }\n\n    if (speedDiff != null) {\n      speed = (speedDiff * percentage) + lastPoint.speed;\n    }\n\n    return {\n      time: time,\n      location: location,\n      course: course,\n      viewport: heading,\n      speed: speed,\n      altitude: altitude,\n      accuracy: accuracy,\n      prev: lastPoint,\n      next: nextPoint\n    };\n  }\n}\n"]}