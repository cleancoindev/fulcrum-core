{"version":3,"sources":["../../src/media/track.js"],"names":["Track","attributes","_segments","Array","isArray","tracks","track","trackSegment","segment","points","length","push","_toLineSegments","lines","segments","line","point","hasCoordinate","longitude","latitude","toGeoJSONLines","_geoJSONLines","type","properties","geometry","coordinates","toGeoJSONMultiLineString","_geoJSONMultiLineString","toGeoJSONSegments","_geoJSONSegments","previousPoint","time","features","firstSegment"],"mappings":"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","file":"track.js","sourcesContent":["import TrackSegment from './track-segment';\n\nexport default class Track {\n  constructor(attributes) {\n    this._segments = [];\n\n    if (Array.isArray(attributes)) {\n      attributes = {tracks: [ {track: attributes} ]};\n    }\n\n    if (attributes.tracks) {\n      for (const trackSegment of attributes.tracks) {\n        const segment = new TrackSegment(trackSegment);\n\n        if (segment.points.length) {\n          this._segments.push(segment);\n        }\n      }\n    }\n  }\n\n  get segments() {\n    return this._segments;\n  }\n\n  get firstSegment() {\n    return this._segments[0];\n  }\n\n  get lastSegment() {\n    return this._segments[this._segments.length - 1];\n  }\n\n  get representativePoint() {\n    if (this.firstSegment) {\n      return this.toGeoJSONLines().geometry.coordinates[0];\n    }\n\n    return null;\n  }\n\n  _toLineSegments() {\n    const lines = [];\n\n    for (const segment of this.segments) {\n      const line = [];\n\n      for (const point of segment.points) {\n        if (point.hasCoordinate) {\n          line.push([ point.longitude, point.latitude ]);\n        }\n      }\n\n      if (line.length > 1) {\n        lines.push(line);\n      }\n    }\n\n    return lines;\n  }\n\n  toGeoJSONLines() {\n    if (this._geoJSONLines) {\n      return this._geoJSONLines;\n    }\n\n    const lines = this._toLineSegments();\n\n    this._geoJSONLines = {\n      type: 'Feature',\n      properties: {},\n      geometry: {\n        type: 'LineString',\n        coordinates: lines[0]\n      }\n    };\n\n    return this._geoJSONLines;\n  }\n\n  toGeoJSONMultiLineString() {\n    if (this._geoJSONMultiLineString) {\n      return this._geoJSONMultiLineString;\n    }\n\n    const lines = this._toLineSegments();\n\n    if (lines.length === 0) {\n      return null;\n    }\n\n    this._geoJSONMultiLineString = {\n      type: 'Feature',\n      properties: {},\n      geometry: {\n        type: 'MultiLineString',\n        coordinates: lines\n      }\n    };\n\n    return this._geoJSONMultiLineString;\n  }\n\n  toGeoJSONSegments() {\n    if (this._geoJSONSegments) {\n      return this._geoJSONSegments;\n    }\n\n    const lines = [];\n\n    let previousPoint = null;\n\n    for (const segment of this.segments) {\n      for (const point of segment.points) {\n        if (point.hasCoordinate) {\n          if (previousPoint) {\n            lines.push({\n              type: 'Feature',\n              properties: {\n                time: point.time\n              },\n              geometry: {\n                type: 'LineString',\n                coordinates: [\n                  [ previousPoint.longitude, previousPoint.latitude ],\n                  [ point.longitude, point.latitude ]\n                ]\n              }\n            });\n          }\n\n          previousPoint = point;\n        }\n      }\n    }\n\n    this._geoJSONSegments = {\n      type: 'FeatureCollection',\n      features: lines\n    };\n\n    return this._geoJSONSegments;\n  }\n}\n"]}