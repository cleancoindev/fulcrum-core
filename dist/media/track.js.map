{"version":3,"sources":["../../src/media/track.js"],"names":["Track","id","attributes","_id","_segments","Array","isArray","tracks","track","_attributes","trackSegment","segment","points","length","push","_toLineSegments","lines","segments","line","point","hasCoordinate","longitude","latitude","time","toGPX","render","toKML","toSRT","toJSON","toGeoJSON","JSON","stringify","type","features","toGeoJSONMultiLineString","toGeoJSONLines","_geoJSONLines","properties","geometry","coordinates","_geoJSONMultiLineString","toGeoJSONSegments","_geoJSONSegments","previousPoint","firstSegment"],"mappings":"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","file":"track.js","sourcesContent":["import TrackSegment from './track-segment';\nimport GPX from './gpx';\nimport KML from './kml';\nimport SRT from './srt';\n\nexport default class Track {\n  constructor(id, attributes) {\n    this._id = id;\n    this._segments = [];\n\n    if (Array.isArray(attributes)) {\n      attributes = {tracks: [ {track: attributes} ]};\n    }\n\n    this._attributes = attributes;\n\n    if (attributes.tracks) {\n      for (const trackSegment of attributes.tracks) {\n        const segment = new TrackSegment(trackSegment);\n\n        if (segment.points.length) {\n          this._segments.push(segment);\n        }\n      }\n    }\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get segments() {\n    return this._segments;\n  }\n\n  get firstSegment() {\n    return this._segments[0];\n  }\n\n  get lastSegment() {\n    return this._segments[this._segments.length - 1];\n  }\n\n  get representativePoint() {\n    if (this.firstSegment) {\n      return this.toGeoJSONLines().geometry.coordinates[0];\n    }\n\n    return null;\n  }\n\n  _toLineSegments() {\n    const lines = [];\n\n    for (const segment of this.segments) {\n      const line = [];\n\n      for (const point of segment.points) {\n        if (point.hasCoordinate) {\n          line.push([ point.longitude, point.latitude, point.time ]);\n        }\n      }\n\n      if (line.length > 1) {\n        lines.push(line);\n      }\n    }\n\n    return lines;\n  }\n\n  toGPX() {\n    return GPX.render([ this ]);\n  }\n\n  toKML() {\n    return KML.render([ this ]);\n  }\n\n  toSRT() {\n    return SRT.render([ this ]);\n  }\n\n  toJSON() {\n    return this._attributes;\n  }\n\n  toGeoJSON() {\n    return JSON.stringify({\n      type: 'FeatureCollection',\n      features: [\n        this.toGeoJSONMultiLineString()\n      ]\n    });\n  }\n\n  toGeoJSONLines() {\n    if (this._geoJSONLines) {\n      return this._geoJSONLines;\n    }\n\n    const lines = this._toLineSegments();\n\n    this._geoJSONLines = {\n      type: 'Feature',\n      properties: {},\n      geometry: {\n        type: 'LineString',\n        coordinates: lines[0]\n      }\n    };\n\n    return this._geoJSONLines;\n  }\n\n  toGeoJSONMultiLineString() {\n    if (this._geoJSONMultiLineString) {\n      return this._geoJSONMultiLineString;\n    }\n\n    const lines = this._toLineSegments();\n\n    if (lines.length === 0) {\n      return null;\n    }\n\n    this._geoJSONMultiLineString = {\n      type: 'Feature',\n      properties: {},\n      geometry: {\n        type: 'MultiLineString',\n        coordinates: lines\n      }\n    };\n\n    return this._geoJSONMultiLineString;\n  }\n\n  toGeoJSONSegments() {\n    if (this._geoJSONSegments) {\n      return this._geoJSONSegments;\n    }\n\n    const lines = [];\n\n    let previousPoint = null;\n\n    for (const segment of this.segments) {\n      for (const point of segment.points) {\n        if (point.hasCoordinate) {\n          if (previousPoint) {\n            lines.push({\n              type: 'Feature',\n              properties: {\n                time: point.time\n              },\n              geometry: {\n                type: 'LineString',\n                coordinates: [\n                  [ previousPoint.longitude, previousPoint.latitude ],\n                  [ point.longitude, point.latitude ]\n                ]\n              }\n            });\n          }\n\n          previousPoint = point;\n        }\n      }\n    }\n\n    this._geoJSONSegments = {\n      type: 'FeatureCollection',\n      features: lines\n    };\n\n    return this._geoJSONSegments;\n  }\n}\n"]}