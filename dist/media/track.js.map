{"version":3,"sources":["../../src/media/track.js"],"names":[],"mappings":"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","file":"track.js","sourcesContent":["import TrackSegment from './track-segment';\n\nexport default class Track {\n  constructor(attributes) {\n    this._segments = [];\n\n    if (attributes.tracks) {\n      for (const trackSegment of attributes.tracks) {\n        const segment = new TrackSegment(trackSegment);\n\n        if (segment.points.length) {\n          this._segments.push(segment);\n        }\n      }\n    }\n  }\n\n  get segments() {\n    return this._segments;\n  }\n\n  get firstSegment() {\n    return this._segments[0];\n  }\n\n  get lastSegment() {\n    return this._segments[this._segments.length - 1];\n  }\n\n  get representativePoint() {\n    if (this.firstSegment) {\n      return this.toGeoJSONLines().geometry.coordinates[0];\n    }\n\n    return null;\n  }\n\n  _toLineSegments() {\n    const lines = [];\n\n    for (const segment of this.segments) {\n      const line = [];\n\n      for (const point of segment.points) {\n        if (point.hasCoordinate) {\n          line.push([ point.longitude, point.latitude ]);\n        }\n      }\n\n      if (line.length > 1) {\n        lines.push(line);\n      }\n    }\n\n    return lines;\n  }\n\n  toGeoJSONLines() {\n    if (this._geoJSONLines) {\n      return this._geoJSONLines;\n    }\n\n    const lines = this._toLineSegments();\n\n    this._geoJSONLines = {\n      type: 'Feature',\n      properties: {},\n      geometry: {\n        type: 'LineString',\n        coordinates: lines[0]\n      }\n    };\n\n    return this._geoJSONLines;\n  }\n\n  toGeoJSONMultiLineString() {\n    if (this._geoJSONMultiLineString) {\n      return this._geoJSONMultiLineString;\n    }\n\n    const lines = this._toLineSegments();\n\n    this._geoJSONMultiLineString = {\n      type: 'Feature',\n      properties: {},\n      geometry: {\n        type: 'MultiLineString',\n        coordinates: lines\n      }\n    };\n\n    return this._geoJSONMultiLineString;\n  }\n\n  toGeoJSONSegments() {\n    if (this._geoJSONSegments) {\n      return this._geoJSONSegments;\n    }\n\n    const lines = [];\n\n    let previousPoint = null;\n\n    for (const segment of this.segments) {\n      for (const point of segment.points) {\n        if (point.hasCoordinate) {\n          if (previousPoint) {\n            lines.push({\n              type: 'Feature',\n              properties: {\n                time: point.time\n              },\n              geometry: {\n                type: 'LineString',\n                coordinates: [\n                  [ previousPoint.longitude, previousPoint.latitude ],\n                  [ point.longitude, point.latitude ]\n                ]\n              }\n            });\n          }\n\n          previousPoint = point;\n        }\n      }\n    }\n\n    this._geoJSONSegments = {\n      type: 'FeatureCollection',\n      features: lines\n    };\n\n    return this._geoJSONSegments;\n  }\n}\n"]}