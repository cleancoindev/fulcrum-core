{"version":3,"sources":["../src/record.js"],"names":[],"mappings":"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","file":"record.js","sourcesContent":["import Feature from './feature';\nimport FormValues from './values/form-values';\nimport TextUtils from './utils/text-utils';\nimport DateUtils from './utils/date-utils';\n\nexport default class Record extends Feature {\n  constructor(form, attributes) {\n    super();\n\n    this._form = form;\n    this._id = attributes.id;\n    this._createdAt = DateUtils.parseTimestamp(attributes.client_created_at);\n    this._updatedAt = DateUtils.parseTimestamp(attributes.client_updated_at);\n    this._formValuesJSON = attributes.form_values;\n    this._latitude = attributes.latitude;\n    this._longitude = attributes.longitude;\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  set id(id) {\n    this._id = id;\n  }\n\n  get form() {\n    return this._form;\n  }\n\n  get createdAt() {\n    return this._createdAt;\n  }\n\n  set createdAt(createdAt) {\n    this._createdAt = createdAt;\n  }\n\n  get updatedAt() {\n    return this._updatedAt;\n  }\n\n  set updatedAt(updatedAt) {\n    this._updatedAt = updatedAt;\n  }\n\n  get formValues() {\n    if (this._formValues == null) {\n      this._formValues = new FormValues(this._form, this._formValuesJSON);\n    }\n\n    return this._formValues;\n  }\n\n  get hasCoordinate() {\n    return this._latitude != null && this._longitude != null;\n  }\n\n  toJSON() {\n    const json = {};\n\n    json.id = this.id;\n    json.client_created_at = DateUtils.formatTimestamp(this.createdAt);\n    json.client_updated_at = DateUtils.formatTimestamp(this.updatedAt);\n    json.form_values = this.formValues.toJSON();\n    json.latitude = this._latitude;\n    json.longitude = this._longitude;\n\n    return json;\n  }\n\n  updateTimestamps() {\n    const now = new Date();\n\n    if (this._createdAt == null) {\n      this.createdAt = now;\n    }\n\n    this.updatedAt = now;\n  }\n\n  get isGeometryEnabled() {\n    return this.form.isGeometryEnabled;\n  }\n\n  get displayValue() {\n    const titleFieldKeys = this.form.titleFieldKeys;\n    const titles = [];\n\n    for (let fieldKey of titleFieldKeys) {\n      const value = this.formValues.get(fieldKey);\n\n      if (value) {\n        const displayValue = value.displayValue;\n\n        if (TextUtils.isPresent(displayValue)) {\n          titles.push(displayValue);\n        }\n      }\n    }\n\n    return titles.join(', ');\n  }\n}\n"]}