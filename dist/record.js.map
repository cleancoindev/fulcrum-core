{"version":3,"sources":["../src/record.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAKe,MAAM,MAAM,2BAAiB;AAC1C,aAAW,CAAC,UAAU,EAAE;AACtB,SAAK,EAAE;;;;;;;;AAAC,GAQT;;AAED,MAAI,EAAE,GAAG;AACP,WAAO,IAAI,CAAC,GAAG,CAAC;GACjB;;AAED,MAAI,EAAE,CAAC,EAAE,EAAE;AACT,QAAI,CAAC,GAAG,GAAG,EAAE,CAAC;GACf;;AAED,MAAI,IAAI,GAAG;AACT,WAAO,IAAI,CAAC,KAAK,CAAC;GACnB;;AAED,MAAI,SAAS,GAAG;AACd,WAAO,IAAI,CAAC,UAAU,CAAC;GACxB;;AAED,MAAI,SAAS,CAAC,SAAS,EAAE;AACvB,QAAI,CAAC,UAAU,GAAG,SAAS,CAAC;GAC7B;;AAED,MAAI,SAAS,GAAG;AACd,WAAO,IAAI,CAAC,UAAU,CAAC;GACxB;;AAED,MAAI,SAAS,CAAC,SAAS,EAAE;AACvB,QAAI,CAAC,UAAU,GAAG,SAAS,CAAC;GAC7B;;AAED,MAAI,UAAU,GAAG;AACf,QAAI,IAAI,CAAC,WAAW,IAAI,IAAI,EAAE;AAC5B,UAAI,CAAC,WAAW,GAAG,yBAAe,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;KACrE;;AAED,WAAO,IAAI,CAAC,WAAW,CAAC;GACzB;;AAED,MAAI,aAAa,GAAG;AAClB,WAAO,IAAI,CAAC,SAAS,IAAI,IAAI,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC;GAC1D;;AAED,QAAM,GAAG;AACP,UAAM,IAAI,GAAG,EAAE,CAAC;;AAEhB,QAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;AAClB,QAAI,CAAC,iBAAiB,GAAG,oBAAU,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACnE,QAAI,CAAC,iBAAiB,GAAG,oBAAU,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACnE,QAAI,CAAC,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;AAC5C,QAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;AAC/B,QAAI,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC;;AAEjC,WAAO,IAAI,CAAC;GACb;;AAED,kBAAgB,GAAG;AACjB,UAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;;AAEvB,QAAI,IAAI,CAAC,UAAU,IAAI,IAAI,EAAE;AAC3B,UAAI,CAAC,SAAS,GAAG,GAAG,CAAC;KACtB;;AAED,QAAI,CAAC,SAAS,GAAG,GAAG,CAAC;GACtB;;AAED,MAAI,iBAAiB,GAAG;AACtB,WAAO,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC;GACpC;;AAED,MAAI,YAAY,GAAG;AACjB,UAAM,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC;AAChD,UAAM,MAAM,GAAG,EAAE,CAAC;;AAElB,SAAK,IAAI,QAAQ,IAAI,cAAc,EAAE;AACnC,YAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;;AAE5C,UAAI,KAAK,EAAE;AACT,cAAM,YAAY,GAAG,KAAK,CAAC,YAAY,CAAC;;AAExC,YAAI,oBAAU,SAAS,CAAC,YAAY,CAAC,EAAE;AACrC,gBAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;SAC3B;OACF;KACF;;AAED,WAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;GAC1B;CACF;kBAjGoB,MAAM","file":"record.js","sourcesContent":["import Feature from './feature';\nimport FormValues from './values/form-values';\nimport TextUtils from './utils/text-utils';\nimport DateUtils from './utils/date-utils';\n\nexport default class Record extends Feature {\n  constructor(attributes) {\n    super();\n\n    // this._id = attributes.id;\n    // this._createdAt = DateUtils.parseTimestamp(attributes.client_created_at);\n    // this._updatedAt = DateUtils.parseTimestamp(attributes.client_updated_at);\n    // this._formValuesJSON = attributes.form_values;\n    // this._latitude = attributes.latitude;\n    // this._longitude = attributes.longitude;\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  set id(id) {\n    this._id = id;\n  }\n\n  get form() {\n    return this._form;\n  }\n\n  get createdAt() {\n    return this._createdAt;\n  }\n\n  set createdAt(createdAt) {\n    this._createdAt = createdAt;\n  }\n\n  get updatedAt() {\n    return this._updatedAt;\n  }\n\n  set updatedAt(updatedAt) {\n    this._updatedAt = updatedAt;\n  }\n\n  get formValues() {\n    if (this._formValues == null) {\n      this._formValues = new FormValues(this._form, this._formValuesJSON);\n    }\n\n    return this._formValues;\n  }\n\n  get hasCoordinate() {\n    return this._latitude != null && this._longitude != null;\n  }\n\n  toJSON() {\n    const json = {};\n\n    json.id = this.id;\n    json.client_created_at = DateUtils.formatTimestamp(this.createdAt);\n    json.client_updated_at = DateUtils.formatTimestamp(this.updatedAt);\n    json.form_values = this.formValues.toJSON();\n    json.latitude = this._latitude;\n    json.longitude = this._longitude;\n\n    return json;\n  }\n\n  updateTimestamps() {\n    const now = new Date();\n\n    if (this._createdAt == null) {\n      this.createdAt = now;\n    }\n\n    this.updatedAt = now;\n  }\n\n  get isGeometryEnabled() {\n    return this.form.isGeometryEnabled;\n  }\n\n  get displayValue() {\n    const titleFieldKeys = this.form.titleFieldKeys;\n    const titles = [];\n\n    for (let fieldKey of titleFieldKeys) {\n      const value = this.formValues.get(fieldKey);\n\n      if (value) {\n        const displayValue = value.displayValue;\n\n        if (TextUtils.isPresent(displayValue)) {\n          titles.push(displayValue);\n        }\n      }\n    }\n\n    return titles.join(', ');\n  }\n}\n"]}