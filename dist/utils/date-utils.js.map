{"version":3,"sources":["../../src/utils/date-utils.js"],"names":["intl","Intl","global","DateUtils","parseDate","dateString","date","Date","replace","isNaN","getTime","parseTime","timeString","length","split","hours","minutes","formatTime","getHours","getMinutes","formatTimeSeconds","seconds","milliseconds","ss","div","mm","hh","ms","h","Math","floor","m","s","u","formatTimeParts","parseISOTimestamp","timestampString","parseEpochTimestamp","parseFloat","formatISOTimestamp","toISOString","formatEpochTimestamp","toFixed","isValidTime","parts","hourPart","minutePart","hour","minute","isValidDate","yearPart","monthPart","dayPart","year","month","day","parsed","formatDate","getFullYear","getMonth","getDate","formatLocalizedDate","__formatLocalizedDate","formatLocalizedTimestamp","toLocaleString","formatRelativeTimestamp","Locale","supportsECMA402","options","result","DateTimeFormat","currentLocale","format","ex"],"mappings":"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","file":"date-utils.js","sourcesContent":["import Locale from './locale';\nimport padStart from 'lodash.padstart';\nimport relativeDate from 'relative-date';\n\nlet intl = null;\n\nif (typeof Intl !== 'undefined') {\n  intl = global.Intl;\n}\n\nexport default class DateUtils {\n  static parseDate(dateString) {\n    const date = new Date(dateString.replace(/-/g, '/'));\n\n    if (date == null || isNaN(date.getTime())) {\n      return null;\n    }\n\n    return date;\n  }\n\n  static parseTime(timeString) {\n    if (!((timeString != null) && timeString.length === 5)) {\n      return null;\n    }\n\n    let [ hours, minutes ] = timeString.split(':');\n\n    if (hours == null || minutes == null) {\n      return null;\n    }\n\n    hours = +hours;\n    minutes = +minutes;\n\n    if (isNaN(hours) || isNaN(minutes)) {\n      return null;\n    }\n\n    return (hours * 60) + minutes;\n  }\n\n  static formatTime(date) {\n    const hours = padStart(date.getHours(), 2, '0');\n    const minutes = padStart(date.getMinutes(), 2, '0');\n\n    return hours + ':' + minutes;\n  }\n\n  static formatTimeSeconds(seconds, milliseconds = false) {\n    const ss = +seconds % 60;\n    const div = (+seconds - ss) / 60;\n    const mm = div % 60;\n    const hh = (div - mm) / 60;\n    const ms = (ss * 1000 % 1000);\n\n    const h = padStart(Math.floor(hh), 2, '0');\n    const m = padStart(Math.floor(mm), 2, '0');\n    const s = padStart(Math.floor(ss), 2, '0');\n    const u = padStart(Math.floor(ms), 3, '0');\n\n    return h + ':' + m + ':' + s + (milliseconds ? '.' + u : '');\n  }\n\n  static formatTimeParts(hours, minutes, seconds) {\n    const h = padStart(+hours, 2, '0');\n    const m = padStart(+minutes, 2, '0');\n    const s = padStart(+seconds, 2, '0');\n\n    return h + ':' + m + ':' + s;\n  }\n\n  static parseISOTimestamp(timestampString) {\n    if (!timestampString) {\n      return null;\n    }\n\n    return new Date(timestampString);\n  }\n\n  static parseEpochTimestamp(timestampString) {\n    if (!timestampString) {\n      return null;\n    }\n\n    return new Date(parseFloat(timestampString) * 1000);\n  }\n\n  static formatISOTimestamp(date) {\n    if (date == null || isNaN(date.getTime())) {\n      return null;\n    }\n    return date.toISOString();\n  }\n\n  static formatEpochTimestamp(date) {\n    if (date == null || isNaN(date.getTime())) {\n      return null;\n    }\n    return (date.getTime() / 1000).toFixed(3);\n  }\n\n  static isValidTime(timeString) {\n    if (timeString == null) {\n      return true;\n    }\n\n    if (timeString.length !== 5) {\n      return false;\n    }\n\n    const parts = timeString.split(':');\n\n    if (parts.length !== 2) {\n      return false;\n    }\n\n    const [ hourPart, minutePart ] = parts;\n\n    if (hourPart.length !== 2 || minutePart.length !== 2) {\n      return false;\n    }\n\n    const hour = +hourPart;\n    const minute = +minutePart;\n\n    if (isNaN(hour) || isNaN(minute)) {\n      return false;\n    }\n\n    if (hour < 0 || hour >= 24) {\n      return false;\n    }\n\n    if (minute < 0 || minute >= 60) {\n      return false;\n    }\n\n    return true;\n  }\n\n  static isValidDate(dateString) {\n    if (dateString == null) {\n      return true;\n    }\n\n    if (dateString.length !== 10) {\n      return false;\n    }\n\n    const parts = dateString.split('-');\n\n    if (parts.length !== 3) {\n      return false;\n    }\n\n    const [ yearPart, monthPart, dayPart ] = parts;\n\n    if (yearPart.length !== 4 ||\n        monthPart.length !== 2 ||\n        dayPart.length !== 2) {\n      return false;\n    }\n\n    const year = +yearPart;\n    const month = +monthPart;\n    const day = +dayPart;\n\n    if (isNaN(year) || isNaN(month) || isNaN(day)) {\n      return false;\n    }\n\n    const parsed = DateUtils.parseDate(dateString);\n\n    return parsed && !isNaN(parsed);\n  }\n\n  static formatDate(date) {\n    if (date == null) {\n      return null;\n    }\n\n    const year = date.getFullYear();\n    const month = padStart(date.getMonth() + 1, 2, '0');\n    const day = padStart(date.getDate(), 2, '0');\n\n    return year + '-' + month + '-' + day;\n  }\n\n  static formatLocalizedDate(date) {\n    if (date == null) {\n      return null;\n    }\n\n    return DateUtils.__formatLocalizedDate(date);\n  }\n\n  static formatLocalizedTimestamp(date) {\n    if (date == null) {\n      return null;\n    }\n\n    return date.toLocaleString();\n  }\n\n  static formatRelativeTimestamp(date) {\n    return relativeDate(date);\n  }\n\n  static __formatLocalizedDate(date) {\n    if (!Locale.supportsECMA402()) {\n      const year = date.getFullYear();\n      const month = padStart(date.getMonth() + 1, 2, '0');\n      const day = padStart(date.getDate(), 2, '0');\n      return year + '-' + month + '-' + day;\n    }\n\n    const options = {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    };\n\n    let result = null;\n\n    try {\n      result = new intl.DateTimeFormat(Locale.currentLocale(), options).format(date);\n    } catch (ex) {\n      // RangeError: Provided date is not in valid range.\n    }\n\n    return result;\n  }\n}\n"]}