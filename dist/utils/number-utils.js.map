{"version":3,"sources":["../../src/utils/number-utils.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAEA,IAAM,uBAAuB,GAAG;AAC9B,OAAK,EAAE,SAAS;AAChB,aAAW,EAAE,KAAK;AAClB,uBAAqB,EAAE,CAAC;AACxB,uBAAqB,EAAE,EAAE;CAC1B,CAAC;;AAEF,IAAI,IAAI,GAAG,IAAI,CAAC;;AAEhB,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;AAC/B,MAAI,GAAG,MAAM,CAAC,IAAI,CAAC;CACpB;;IAEoB,WAAW;WAAX,WAAW;0BAAX,WAAW;;;eAAX,WAAW;;gCACX,KAAK,EAAE;AACxB,aAAO,CAAC,KAAK,CAAC;KACf;;;qDAEuC,aAAa,EAAE,aAAa,EAAE;AACpE,aAAO,aAAa,CAAC;KACtB;;;kCAEoB,MAAM,EAAE;AAC3B,UAAI,IAAI,EAAE;AACR,YAAI,WAAW,CAAC,gBAAgB,IAAI,IAAI,EAAE;AACxC,qBAAW,CAAC,gBAAgB,GAAG,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,EAAE,uBAAuB,CAAC,CAAC;SAC1F;OACF;;AAED,aAAO,WAAW,CAAC,mBAAmB,CAAC,WAAW,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;KAC9E;;;mCAEqB,MAAM,EAAE,QAAQ,EAAE;AACtC,UAAI,MAAM,IAAI,IAAI,EAAE;AAClB,eAAO,IAAI,CAAC;OACb;;AAED,aAAO,WAAW,CAAC,gBAAgB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;KACvD;;;qCAEuB,MAAM,EAAE,QAAQ,EAAE;AACxC,UAAI,CAAC,iBAAO,eAAe,EAAE,EAAE;AAC7B,eAAO,MAAM,CAAC;OACf;;AAED,UAAM,OAAO,GAAG;AACd,aAAK,EAAE,UAAU;AACjB,gBAAQ,EAAE,QAAQ;AAClB,uBAAe,EAAE,QAAQ;AACzB,6BAAqB,EAAE,CAAC;AACxB,6BAAqB,EAAE,CAAC;OACzB,CAAC;;AAEF,UAAM,SAAS,GAAG,IAAI,CAAC,MAAM,IAAI,MAAM,CAAA,CAAE,IAAI,CAAC,YAAY,CAAC,iBAAO,aAAa,EAAE,EAAE,OAAO,CAAC,CAAC;;AAE5F,aAAO,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;KACjC;;;wCAE0B,SAAS,EAAE,MAAM,EAAE;AAC5C,UAAI,SAAS,IAAI,IAAI,EAAE;AACrB,YAAI,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;;AAEtC,YAAI,MAAM,KAAK,KAAK,EAAE;AACpB,iBAAO,MAAM,CAAC;SACf,MAAM;AACL,iBAAO,MAAM,CAAC;SACf;OACF,MAAM;AACL,eAAO,MAAM,CAAC,QAAQ,EAAE,CAAC;OAC1B;KACF;;;SAzDkB,WAAW;;;kBAAX,WAAW","file":"number-utils.js","sourcesContent":["import Locale from './locale';\n\nconst MachineFormatterOptions = {\n  style: 'decimal',\n  useGrouping: false,\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 20\n};\n\nlet intl = null;\n\nif (typeof Intl !== 'undefined') {\n  intl = global.Intl;\n}\n\nexport default class NumberUtils {\n  static parseDouble(input) {\n    return +input;\n  }\n\n  static localizedStringFromMachineString(machineString, allowDecimals) {\n    return machineString;\n  }\n\n  static formatMachine(number) {\n    if (intl) {\n      if (NumberUtils.machineFormatter == null) {\n        NumberUtils.machineFormatter = new intl.NumberFormat(['en-US'], MachineFormatterOptions);\n      }\n    }\n\n    return NumberUtils.formatWithFormatter(NumberUtils.machineFormatter, number);\n  }\n\n  static formatCurrency(number, currency) {\n    if (number == null) {\n      return null;\n    }\n\n    return NumberUtils.__formatCurrency(number, currency);\n  }\n\n  static __formatCurrency(number, currency) {\n    if (!Locale.supportsECMA402()) {\n      return number;\n    }\n\n    const options = {\n      style: 'currency',\n      currency: currency,\n      currencyDisplay: 'symbol',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    };\n\n    const formatter = new (window || global).Intl.NumberFormat(Locale.currentLocale(), options);\n\n    return formatter.format(number);\n  }\n\n  static formatWithFormatter(formatter, number) {\n    if (formatter != null) {\n      let string = formatter.format(number);\n\n      if (string === 'NaN') {\n        return number;\n      } else {\n        return string;\n      }\n    } else {\n      return number.toString();\n    }\n  }\n}\n"]}