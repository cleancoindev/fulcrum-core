{"version":3,"sources":["../../src/utils/number-utils.js"],"names":[],"mappings":";;;;;;AAAA;;;;;;;;AAEA,IAAM,0BAA0B;AAC9B,SAAO,SAAP;AACA,eAAa,KAAb;AACA,yBAAuB,CAAvB;AACA,yBAAuB,EAAvB;CAJI;;AAON,IAAI,OAAO,IAAP;;AAEJ,IAAI,OAAO,IAAP,KAAgB,WAAhB,EAA6B;;AAE/B,SAAO,IAAP;;AAF+B,CAAjC;;IAMqB;;;;;cACZ,mCAAY,OAAO;AACxB,QAAM,SAAS,CAAC,KAAD,CADS;;AAGxB,QAAI,UAAU,IAAV,IAAkB,MAAM,MAAN,CAAlB,EAAiC;AACnC,aAAO,IAAP,CADmC;KAArC;;AAIA,WAAO,MAAP,CAPwB;;;AADP,cAmCZ,6EAAiC,eAAqC;QAAtB,sEAAgB,oBAAM;;AAC3E,QAAI,iBAAiB,YAAY,sBAAZ,EAAoC;AACvD,aAAO,YAAY,sBAAZ,CAAmC,MAAnC,CAA0C,aAA1C,CAAP,CADuD;KAAzD,MAEO,IAAI,YAAY,sBAAZ,EAAoC;AAC7C,aAAO,YAAY,sBAAZ,CAAmC,MAAnC,CAA0C,aAA1C,CAAP,CAD6C;KAAxC;;AAIP,WAAO,aAAP,CAP2E;;;AAnC1D,cA6CZ,uCAAc,QAAQ;AAC3B,WAAO,YAAY,mBAAZ,CAAgC,YAAY,gBAAZ,EAA8B,MAA9D,CAAP,CAD2B;;;AA7CV,cAiDZ,yCAAe,QAAQ,UAAU;AACtC,QAAI,UAAU,IAAV,EAAgB;AAClB,aAAO,IAAP,CADkB;KAApB;;AAIA,WAAO,YAAY,gBAAZ,CAA6B,MAA7B,EAAqC,QAArC,CAAP,CALsC;;;AAjDrB,cAyDZ,6CAAiB,QAAQ,UAAU;AACxC,QAAI,CAAC,iBAAO,eAAP,EAAD,EAA2B;AAC7B,aAAO,MAAP,CAD6B;KAA/B;;AAIA,QAAM,UAAU;AACd,aAAO,UAAP;AACA,gBAAU,QAAV;AACA,uBAAiB,QAAjB;AACA,6BAAuB,CAAvB;AACA,6BAAuB,CAAvB;KALI,CALkC;;AAaxC,QAAM,YAAY,IAAI,OAAO,IAAP,CAAY,YAAZ,CAAyB,iBAAO,aAAP,EAA7B,EAAqD,OAArD,CAAZ,CAbkC;;AAexC,WAAO,UAAU,MAAV,CAAiB,MAAjB,CAAP,CAfwC;;;AAzDvB,cA2EZ,mDAAoB,WAAW,QAAQ;AAC5C,QAAI,aAAa,IAAb,EAAmB;AACrB,UAAI,SAAS,UAAU,MAAV,CAAiB,MAAjB,CAAT,CADiB;;AAGrB,UAAI,WAAW,KAAX,EAAkB;AACpB,eAAO,MAAP,CADoB;OAAtB,MAEO;AACL,eAAO,MAAP,CADK;OAFP;KAHF,MAQO;AACL,aAAO,OAAO,QAAP,EAAP,CADK;KARP;;;eA5EiB;;wBAWiB;AAClC,UAAI,CAAC,KAAK,uBAAL,IAAgC,IAAjC,EAAuC;AACzC,aAAK,uBAAL,GAA+B,IAAI,KAAK,YAAL,EAAnC,CADyC;OAA3C;;AAIA,aAAO,KAAK,uBAAL,CAL2B;;;;wBAQA;AAClC,UAAI,CAAC,KAAK,uBAAL,IAAgC,IAAjC,EAAuC;AACzC,aAAK,uBAAL,GAA+B,IAAI,KAAK,YAAL,CAAkB,EAAtB,EAA0B,EAAC,uBAAuB,CAAvB,EAA3B,CAA/B,CADyC;OAA3C;;AAIA,aAAO,KAAK,uBAAL,CAL2B;;;;wBAQN;AAC5B,UAAI,CAAC,KAAK,iBAAL,IAA0B,IAA3B,EAAiC;AACnC,aAAK,iBAAL,GAAyB,IAAI,KAAK,YAAL,CAAkB,CAAC,OAAD,CAAtB,EAAiC,uBAAjC,CAAzB,CADmC;OAArC;;AAIA,aAAO,KAAK,iBAAL,CALqB;;;;SA3BX","file":"number-utils.js","sourcesContent":["import Locale from './locale';\n\nconst MachineFormatterOptions = {\n  style: 'decimal',\n  useGrouping: false,\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 20\n};\n\nlet intl = null;\n\nif (typeof Intl !== 'undefined') {\n  /* eslint-disable no-undef */\n  intl = Intl;\n  /* eslint-enable no-undef */\n}\n\nexport default class NumberUtils {\n  static parseDouble(input) {\n    const number = +input;\n\n    if (number == null || isNaN(number)) {\n      return null;\n    }\n\n    return number;\n  }\n\n  static get localeDecimalFormatter() {\n    if (!this._localeDecimalFormatter && intl) {\n      this._localeDecimalFormatter = new intl.NumberFormat();\n    }\n\n    return this._localeDecimalFormatter;\n  }\n\n  static get localeIntegerFormatter() {\n    if (!this._localeIntegerFormatter && intl) {\n      this._localeIntegerFormatter = new intl.NumberFormat([], {maximumFractionDigits: 0});\n    }\n\n    return this._localeIntegerFormatter;\n  }\n\n  static get machineFormatter() {\n    if (!this._machineFormatter && intl) {\n      this._machineFormatter = new intl.NumberFormat(['en-US'], MachineFormatterOptions);\n    }\n\n    return this._machineFormatter;\n  }\n\n  static localizedStringFromMachineString(machineString, allowDecimals = true) {\n    if (allowDecimals && NumberUtils.localeDecimalFormatter) {\n      return NumberUtils.localeDecimalFormatter.format(machineString);\n    } else if (NumberUtils.localeIntegerFormatter) {\n      return NumberUtils.localeIntegerFormatter.format(machineString);\n    }\n\n    return machineString;\n  }\n\n  static formatMachine(number) {\n    return NumberUtils.formatWithFormatter(NumberUtils.machineFormatter, number);\n  }\n\n  static formatCurrency(number, currency) {\n    if (number == null) {\n      return null;\n    }\n\n    return NumberUtils.__formatCurrency(number, currency);\n  }\n\n  static __formatCurrency(number, currency) {\n    if (!Locale.supportsECMA402()) {\n      return number;\n    }\n\n    const options = {\n      style: 'currency',\n      currency: currency,\n      currencyDisplay: 'symbol',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    };\n\n    const formatter = new global.Intl.NumberFormat(Locale.currentLocale(), options);\n\n    return formatter.format(number);\n  }\n\n  static formatWithFormatter(formatter, number) {\n    if (formatter != null) {\n      let string = formatter.format(number);\n\n      if (string === 'NaN') {\n        return number;\n      } else {\n        return string;\n      }\n    } else {\n      return number.toString();\n    }\n  }\n}\n"]}