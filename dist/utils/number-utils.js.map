{"version":3,"sources":["../../src/utils/number-utils.js"],"names":[],"mappings":";;;;;;;;;;;;AAEA,MAAM,uBAAuB,GAAG;AAC9B,OAAK,EAAE,SAAS;AAChB,aAAW,EAAE,KAAK;AAClB,uBAAqB,EAAE,CAAC;AACxB,uBAAqB,EAAE,EAAE;CAC1B,CAAC;;AAEF,IAAI,IAAI,GAAG,IAAI,CAAC;;AAEhB,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;AAC/B,MAAI,GAAG,MAAM,CAAC,IAAI,CAAC;CACpB;;AAEc,MAAM,WAAW,CAAC;AAC/B,SAAO,WAAW,CAAC,KAAK,EAAE;AACxB,WAAO,CAAC,KAAK,CAAC;GACf;;AAED,SAAO,gCAAgC,CAAC,aAAa,EAAE,aAAa,EAAE;AACpE,WAAO,aAAa,CAAC;GACtB;;AAED,SAAO,aAAa,CAAC,MAAM,EAAE;AAC3B,QAAI,IAAI,EAAE;AACR,UAAI,WAAW,CAAC,gBAAgB,IAAI,IAAI,EAAE;AACxC,mBAAW,CAAC,gBAAgB,GAAG,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,EAAE,uBAAuB,CAAC,CAAC;OAC1F;KACF;;AAED,WAAO,WAAW,CAAC,mBAAmB,CAAC,WAAW,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;GAC9E;;AAED,SAAO,cAAc,CAAC,MAAM,EAAE,QAAQ,EAAE;AACtC,QAAI,MAAM,IAAI,IAAI,EAAE;AAClB,aAAO,IAAI,CAAC;KACb;;AAED,WAAO,WAAW,CAAC,gBAAgB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;GACvD;;AAED,SAAO,gBAAgB,CAAC,MAAM,EAAE,QAAQ,EAAE;AACxC,QAAI,CAAC,iBAAO,eAAe,EAAE,EAAE;AAC7B,aAAO,MAAM,CAAC;KACf;;AAED,UAAM,OAAO,GAAG;AACd,WAAK,EAAE,UAAU;AACjB,cAAQ,EAAE,QAAQ;AAClB,qBAAe,EAAE,QAAQ;AACzB,2BAAqB,EAAE,CAAC;AACxB,2BAAqB,EAAE,CAAC;KACzB,CAAC;;AAEF,UAAM,SAAS,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,iBAAO,aAAa,EAAE,EAAE,OAAO,CAAC,CAAC;;AAEhF,WAAO,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;GACjC;;AAED,SAAO,mBAAmB,CAAC,SAAS,EAAE,MAAM,EAAE;AAC5C,QAAI,SAAS,IAAI,IAAI,EAAE;AACrB,UAAI,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;;AAEtC,UAAI,MAAM,KAAK,KAAK,EAAE;AACpB,eAAO,MAAM,CAAC;OACf,MAAM;AACL,eAAO,MAAM,CAAC;OACf;KACF,MAAM;AACL,aAAO,MAAM,CAAC,QAAQ,EAAE,CAAC;KAC1B;GACF;CACF;kBA1DoB,WAAW","file":"number-utils.js","sourcesContent":["import Locale from './locale';\n\nconst MachineFormatterOptions = {\n  style: 'decimal',\n  useGrouping: false,\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 20\n};\n\nlet intl = null;\n\nif (typeof Intl !== 'undefined') {\n  intl = global.Intl;\n}\n\nexport default class NumberUtils {\n  static parseDouble(input) {\n    return +input;\n  }\n\n  static localizedStringFromMachineString(machineString, allowDecimals) {\n    return machineString;\n  }\n\n  static formatMachine(number) {\n    if (intl) {\n      if (NumberUtils.machineFormatter == null) {\n        NumberUtils.machineFormatter = new intl.NumberFormat(['en-US'], MachineFormatterOptions);\n      }\n    }\n\n    return NumberUtils.formatWithFormatter(NumberUtils.machineFormatter, number);\n  }\n\n  static formatCurrency(number, currency) {\n    if (number == null) {\n      return null;\n    }\n\n    return NumberUtils.__formatCurrency(number, currency);\n  }\n\n  static __formatCurrency(number, currency) {\n    if (!Locale.supportsECMA402()) {\n      return number;\n    }\n\n    const options = {\n      style: 'currency',\n      currency: currency,\n      currencyDisplay: 'symbol',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    };\n\n    const formatter = new global.Intl.NumberFormat(Locale.currentLocale(), options);\n\n    return formatter.format(number);\n  }\n\n  static formatWithFormatter(formatter, number) {\n    if (formatter != null) {\n      let string = formatter.format(number);\n\n      if (string === 'NaN') {\n        return number;\n      } else {\n        return string;\n      }\n    } else {\n      return number.toString();\n    }\n  }\n}\n"]}