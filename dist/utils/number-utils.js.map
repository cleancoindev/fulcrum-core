{"version":3,"sources":["../../src/utils/number-utils.js"],"names":[],"mappings":";;;;;;AAAA;;;;;;;;AAEA,IAAM,0BAA0B;AAC9B,SAAO,SADuB;AAE9B,eAAa,KAFiB;AAG9B,yBAAuB,CAHO;AAI9B,yBAAuB;AAJO,CAAhC;;AAOA,IAAI,OAAO,IAAX;;AAEA,IAAI,OAAO,IAAP,KAAgB,WAApB,EAAiC;;AAE/B,SAAO,IAAP;;AAED;;IAEoB,W;;;;;cACZ,W,wBAAY,K,EAAO;AACxB,QAAM,SAAS,CAAC,KAAhB;;AAEA,QAAI,UAAU,IAAV,IAAkB,MAAM,MAAN,CAAtB,EAAqC;AACnC,aAAO,IAAP;AACD;;AAED,WAAO,MAAP;AACD,G;;cA0BM,gC,6CAAiC,a,EAAqC;AAAA,QAAtB,aAAsB,yDAAN,IAAM;;AAC3E,QAAI,iBAAiB,YAAY,sBAAjC,EAAyD;AACvD,aAAO,YAAY,sBAAZ,CAAmC,MAAnC,CAA0C,aAA1C,CAAP;AACD,KAFD,MAEO,IAAI,YAAY,sBAAhB,EAAwC;AAC7C,aAAO,YAAY,sBAAZ,CAAmC,MAAnC,CAA0C,aAA1C,CAAP;AACD;;AAED,WAAO,aAAP;AACD,G;;cAEM,a,0BAAc,M,EAAQ;AAC3B,WAAO,YAAY,mBAAZ,CAAgC,YAAY,gBAA5C,EAA8D,MAA9D,CAAP;AACD,G;;cAEM,c,2BAAe,M,EAAQ,Q,EAAU;AACtC,QAAI,UAAU,IAAd,EAAoB;AAClB,aAAO,IAAP;AACD;;AAED,WAAO,YAAY,gBAAZ,CAA6B,MAA7B,EAAqC,QAArC,CAAP;AACD,G;;cAEM,gB,6BAAiB,M,EAAQ,Q,EAAU;AACxC,QAAI,CAAC,iBAAO,eAAP,EAAL,EAA+B;AAC7B,aAAO,MAAP;AACD;;AAED,QAAM,UAAU;AACd,aAAO,UADO;AAEd,gBAAU,QAFI;AAGd,uBAAiB,QAHH;AAId,6BAAuB,CAJT;AAKd,6BAAuB;AALT,KAAhB;;AAQA,QAAM,YAAY,IAAI,OAAO,IAAP,CAAY,YAAhB,CAA6B,iBAAO,aAAP,EAA7B,EAAqD,OAArD,CAAlB;;AAEA,WAAO,UAAU,MAAV,CAAiB,MAAjB,CAAP;AACD,G;;cAEM,mB,gCAAoB,S,EAAW,M,EAAQ;AAC5C,QAAI,aAAa,IAAjB,EAAuB;AACrB,UAAM,SAAS,UAAU,MAAV,CAAiB,MAAjB,CAAf;;AAEA,UAAI,WAAW,KAAf,EAAsB;AACpB,eAAO,MAAP;AACD;;AAED,aAAO,MAAP;AACD;;AAED,WAAO,OAAO,QAAP,EAAP;AACD,G;;;;wBA5EmC;AAClC,UAAI,CAAC,KAAK,uBAAN,IAAiC,IAArC,EAA2C;AACzC,aAAK,uBAAL,GAA+B,IAAI,KAAK,YAAT,EAA/B;AACD;;AAED,aAAO,KAAK,uBAAZ;AACD;;;wBAEmC;AAClC,UAAI,CAAC,KAAK,uBAAN,IAAiC,IAArC,EAA2C;AACzC,aAAK,uBAAL,GAA+B,IAAI,KAAK,YAAT,CAAsB,EAAtB,EAA0B,EAAC,uBAAuB,CAAxB,EAA1B,CAA/B;AACD;;AAED,aAAO,KAAK,uBAAZ;AACD;;;wBAE6B;AAC5B,UAAI,CAAC,KAAK,iBAAN,IAA2B,IAA/B,EAAqC;AACnC,aAAK,iBAAL,GAAyB,IAAI,KAAK,YAAT,CAAsB,CAAE,OAAF,CAAtB,EAAmC,uBAAnC,CAAzB;AACD;;AAED,aAAO,KAAK,iBAAZ;AACD;;;;;;kBAjCkB,W","file":"number-utils.js","sourcesContent":["import Locale from './locale';\n\nconst MachineFormatterOptions = {\n  style: 'decimal',\n  useGrouping: false,\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 20\n};\n\nlet intl = null;\n\nif (typeof Intl !== 'undefined') {\n  /* eslint-disable no-undef */\n  intl = Intl;\n  /* eslint-enable no-undef */\n}\n\nexport default class NumberUtils {\n  static parseDouble(input) {\n    const number = +input;\n\n    if (number == null || isNaN(number)) {\n      return null;\n    }\n\n    return number;\n  }\n\n  static get localeDecimalFormatter() {\n    if (!this._localeDecimalFormatter && intl) {\n      this._localeDecimalFormatter = new intl.NumberFormat();\n    }\n\n    return this._localeDecimalFormatter;\n  }\n\n  static get localeIntegerFormatter() {\n    if (!this._localeIntegerFormatter && intl) {\n      this._localeIntegerFormatter = new intl.NumberFormat([], {maximumFractionDigits: 0});\n    }\n\n    return this._localeIntegerFormatter;\n  }\n\n  static get machineFormatter() {\n    if (!this._machineFormatter && intl) {\n      this._machineFormatter = new intl.NumberFormat([ 'en-US' ], MachineFormatterOptions);\n    }\n\n    return this._machineFormatter;\n  }\n\n  static localizedStringFromMachineString(machineString, allowDecimals = true) {\n    if (allowDecimals && NumberUtils.localeDecimalFormatter) {\n      return NumberUtils.localeDecimalFormatter.format(machineString);\n    } else if (NumberUtils.localeIntegerFormatter) {\n      return NumberUtils.localeIntegerFormatter.format(machineString);\n    }\n\n    return machineString;\n  }\n\n  static formatMachine(number) {\n    return NumberUtils.formatWithFormatter(NumberUtils.machineFormatter, number);\n  }\n\n  static formatCurrency(number, currency) {\n    if (number == null) {\n      return null;\n    }\n\n    return NumberUtils.__formatCurrency(number, currency);\n  }\n\n  static __formatCurrency(number, currency) {\n    if (!Locale.supportsECMA402()) {\n      return number;\n    }\n\n    const options = {\n      style: 'currency',\n      currency: currency,\n      currencyDisplay: 'symbol',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    };\n\n    const formatter = new global.Intl.NumberFormat(Locale.currentLocale(), options);\n\n    return formatter.format(number);\n  }\n\n  static formatWithFormatter(formatter, number) {\n    if (formatter != null) {\n      const string = formatter.format(number);\n\n      if (string === 'NaN') {\n        return number;\n      }\n\n      return string;\n    }\n\n    return number.toString();\n  }\n}\n"]}