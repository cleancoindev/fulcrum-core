{"version":3,"sources":["../../src/utils/number-utils.js"],"names":[],"mappings":";;;;;;;;;;;;AAEA,MAAM,0BAA0B;AAC9B,SAAO,SAAP;AACA,eAAa,KAAb;AACA,yBAAuB,CAAvB;AACA,yBAAuB,EAAvB;CAJI;;AAON,IAAI,OAAO,IAAP;;AAEJ,IAAI,OAAO,IAAP,KAAgB,WAAhB,EAA6B;AAC/B,SAAO,OAAO,IAAP,CADwB;CAAjC;;AAIe,MAAM,WAAN,CAAkB;AAC/B,SAAO,WAAP,CAAmB,KAAnB,EAA0B;AACxB,WAAO,CAAC,KAAD,CADiB;GAA1B;;AAIA,SAAO,gCAAP,CAAwC,aAAxC,EAAuD,aAAvD,EAAsE;AACpE,WAAO,aAAP,CADoE;GAAtE;;AAIA,SAAO,aAAP,CAAqB,MAArB,EAA6B;AAC3B,QAAI,IAAJ,EAAU;AACR,UAAI,YAAY,gBAAZ,IAAgC,IAAhC,EAAsC;AACxC,oBAAY,gBAAZ,GAA+B,IAAI,KAAK,YAAL,CAAkB,CAAC,OAAD,CAAtB,EAAiC,uBAAjC,CAA/B,CADwC;OAA1C;KADF;;AAMA,WAAO,YAAY,mBAAZ,CAAgC,YAAY,gBAAZ,EAA8B,MAA9D,CAAP,CAP2B;GAA7B;;AAUA,SAAO,cAAP,CAAsB,MAAtB,EAA8B,QAA9B,EAAwC;AACtC,QAAI,UAAU,IAAV,EAAgB;AAClB,aAAO,IAAP,CADkB;KAApB;;AAIA,WAAO,YAAY,gBAAZ,CAA6B,MAA7B,EAAqC,QAArC,CAAP,CALsC;GAAxC;;AAQA,SAAO,gBAAP,CAAwB,MAAxB,EAAgC,QAAhC,EAA0C;AACxC,QAAI,CAAC,iBAAO,eAAP,EAAD,EAA2B;AAC7B,aAAO,MAAP,CAD6B;KAA/B;;AAIA,UAAM,UAAU;AACd,aAAO,UAAP;AACA,gBAAU,QAAV;AACA,uBAAiB,QAAjB;AACA,6BAAuB,CAAvB;AACA,6BAAuB,CAAvB;KALI,CALkC;;AAaxC,UAAM,YAAY,IAAI,OAAO,IAAP,CAAY,YAAZ,CAAyB,iBAAO,aAAP,EAA7B,EAAqD,OAArD,CAAZ,CAbkC;;AAexC,WAAO,UAAU,MAAV,CAAiB,MAAjB,CAAP,CAfwC;GAA1C;;AAkBA,SAAO,mBAAP,CAA2B,SAA3B,EAAsC,MAAtC,EAA8C;AAC5C,QAAI,aAAa,IAAb,EAAmB;AACrB,UAAI,SAAS,UAAU,MAAV,CAAiB,MAAjB,CAAT,CADiB;;AAGrB,UAAI,WAAW,KAAX,EAAkB;AACpB,eAAO,MAAP,CADoB;OAAtB,MAEO;AACL,eAAO,MAAP,CADK;OAFP;KAHF,MAQO;AACL,aAAO,OAAO,QAAP,EAAP,CADK;KARP;GADF;CA7Ca;kBAAM","file":"number-utils.js","sourcesContent":["import Locale from './locale';\n\nconst MachineFormatterOptions = {\n  style: 'decimal',\n  useGrouping: false,\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 20\n};\n\nlet intl = null;\n\nif (typeof Intl !== 'undefined') {\n  intl = global.Intl;\n}\n\nexport default class NumberUtils {\n  static parseDouble(input) {\n    return +input;\n  }\n\n  static localizedStringFromMachineString(machineString, allowDecimals) {\n    return machineString;\n  }\n\n  static formatMachine(number) {\n    if (intl) {\n      if (NumberUtils.machineFormatter == null) {\n        NumberUtils.machineFormatter = new intl.NumberFormat(['en-US'], MachineFormatterOptions);\n      }\n    }\n\n    return NumberUtils.formatWithFormatter(NumberUtils.machineFormatter, number);\n  }\n\n  static formatCurrency(number, currency) {\n    if (number == null) {\n      return null;\n    }\n\n    return NumberUtils.__formatCurrency(number, currency);\n  }\n\n  static __formatCurrency(number, currency) {\n    if (!Locale.supportsECMA402()) {\n      return number;\n    }\n\n    const options = {\n      style: 'currency',\n      currency: currency,\n      currencyDisplay: 'symbol',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    };\n\n    const formatter = new global.Intl.NumberFormat(Locale.currentLocale(), options);\n\n    return formatter.format(number);\n  }\n\n  static formatWithFormatter(formatter, number) {\n    if (formatter != null) {\n      let string = formatter.format(number);\n\n      if (string === 'NaN') {\n        return number;\n      } else {\n        return string;\n      }\n    } else {\n      return number.toString();\n    }\n  }\n}\n"]}