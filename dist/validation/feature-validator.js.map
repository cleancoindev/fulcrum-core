{"version":3,"sources":["../../src/validation/feature-validator.js"],"names":["FeatureValidator","validateFeature","feature","record","formValues","Record","validateRecord","RepeatableItemValue","validateRepeatableItem","errors","isStatusFieldEnabled","status","push","RequiredFieldValidationError","form","statusField","isGeometryRequired","hasCoordinate","GeometryRequiredValidationError","cache","validateFieldsInElements","elements","repeatableItem","element","visibilityCache","isSectionElement","visible","Condition","shouldElementBeVisible","required","shouldElementBeRequired","disabled","isDisabled","validatable","fieldValue","get","key","isEmpty","isTextElement","isNumeric","textValue","error","validateNumericField","hasPattern","validatePatternOfElement","isDateElement","validateDateField","isTimeElement","validateTimeField","isLengthValidationSupported","validateLengthForElement","isRepeatableElement","repeatableValue","items","item","itemValues","copy","merge","value","regex","RegExp","pattern","test","PatternValidationError","hasMinLengthError","hasMaxLengthError","hasMinLength","length","minLength","hasMaxLength","maxLength","LengthValidationError","NumericFormatValidationError","decimalSeparator","isIntegerFormat","indexOf","numberValue","hasMin","min","hasMax","max","NumericRangeValidationError","isValid","DateFormatValidationError","TimeFormatValidationError","formatErrors","messages","message","join"],"mappings":"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","sourcesContent":["import RepeatableItemValue from '../values/repeatable-item-value';\nimport Record from '../record';\nimport Condition from '../elements/condition';\nimport RequiredFieldValidationError from './required-field-validation-error';\nimport GeometryRequiredValidationError from './geometry-required-validation-error';\nimport PatternValidationError from './pattern-validation-error';\nimport LengthValidationError from './length-validation-error';\nimport NumericFormatValidationError from './numeric-format-validation-error';\nimport NumericRangeValidationError from './numeric-range-validation-error';\nimport DateFormatValidationError from './date-format-validation-error';\nimport TimeFormatValidationError from './time-format-validation-error';\n\nexport default class FeatureValidator {\n  static validateFeature(feature, record, formValues) {\n    if (feature instanceof Record) {\n      return FeatureValidator.validateRecord(record, formValues);\n    } else if (feature instanceof RepeatableItemValue) {\n      return FeatureValidator.validateRepeatableItem(feature, record, formValues);\n    }\n\n    return [];\n  }\n\n  static validateRecord(record, formValues) {\n    if (record == null) {\n      return [];\n    }\n\n    const errors = [];\n\n    if (record.isStatusFieldEnabled && record.status == null) {\n      errors.push(new RequiredFieldValidationError(record.form.statusField));\n    }\n\n    if (record.form.isGeometryRequired) {\n      if (!record.hasCoordinate) {\n        errors.push(new GeometryRequiredValidationError());\n      }\n    }\n\n    const cache = {};\n\n    this.validateFieldsInElements(record.form.elements, record, formValues, errors, cache);\n\n    return errors;\n  }\n\n  static validateRepeatableItem(repeatableItem, record, formValues) {\n    if (repeatableItem == null) {\n      return [];\n    }\n\n    const errors = [];\n\n    if (repeatableItem.element.isGeometryRequired) {\n      if (!repeatableItem.hasCoordinate) {\n        errors.push(new GeometryRequiredValidationError());\n      }\n    }\n\n    const cache = {};\n\n    FeatureValidator.validateFieldsInElements(repeatableItem.element.elements, record, formValues, errors, cache);\n\n    return errors;\n  }\n\n  static validateFieldsInElements(elements, record, formValues, errors, visibilityCache) {\n    const cache = visibilityCache || {};\n\n    for (const element of elements) {\n      if (element.isSectionElement) {\n        const visible = Condition.shouldElementBeVisible(element, record, formValues, cache);\n\n        if (visible) {\n          FeatureValidator.validateFieldsInElements(element.elements, record, formValues, errors, cache);\n        }\n      } else {\n        const required = Condition.shouldElementBeRequired(element, record, formValues);\n        const visible = Condition.shouldElementBeVisible(element, record, formValues, cache);\n\n        const disabled = element.isDisabled;\n\n        const validatable = (visible && !disabled);\n\n        if (validatable) {\n          if (required) {\n            const fieldValue = formValues.get(element.key);\n\n            if (fieldValue == null || fieldValue.isEmpty) {\n              errors.push(new RequiredFieldValidationError(element));\n            }\n          }\n\n          if (element.isTextElement) {\n            if (element.isNumeric) {\n              const textValue = formValues.get(element.key);\n\n              const error = FeatureValidator.validateNumericField(element, textValue);\n\n              if (error) {\n                errors.push(error);\n              }\n            } else if (element.hasPattern) {\n              const textValue = formValues.get(element.key);\n\n              const error = FeatureValidator.validatePatternOfElement(element, textValue);\n\n              if (error) {\n                errors.push(error);\n              }\n            }\n          }\n\n          if (element.isDateElement) {\n            const error = FeatureValidator.validateDateField(element, formValues.get(element.key));\n\n            if (error) {\n              errors.push(error);\n            }\n          }\n\n          if (element.isTimeElement) {\n            const error = FeatureValidator.validateTimeField(element, formValues.get(element.key));\n\n            if (error) {\n              errors.push(error);\n            }\n          }\n\n          if (element.isLengthValidationSupported) {\n            const fieldValue = formValues.get(element.key);\n            const error = FeatureValidator.validateLengthForElement(element, fieldValue);\n\n            if (error) {\n              errors.push(error);\n            }\n          }\n        }\n\n        if (element.isRepeatableElement) {\n          const repeatableValue = formValues.get(element.key);\n\n          if (repeatableValue) {\n            for (const item of repeatableValue.items) {\n              const itemValues = item.formValues.copy();\n\n              itemValues.merge(formValues);\n\n              FeatureValidator.validateFieldsInElements(item.element.elements, record, itemValues, errors, null);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  static validatePatternOfElement(element, value) {\n    if (value == null || value.isEmpty) {\n      return null;\n    }\n\n    const regex = new RegExp('^(?:' + element.pattern + ')$');\n\n    if (regex) {\n      if (!regex.test(value.textValue)) {\n        return new PatternValidationError(element);\n      }\n    }\n\n    return null;\n  }\n\n  static validateLengthForElement(element, value) {\n    if (value == null || value.isEmpty) {\n      return null;\n    }\n\n    let hasMinLengthError = false;\n    let hasMaxLengthError = false;\n\n    if (element.hasMinLength) {\n      hasMinLengthError = (value.length < element.minLength);\n    }\n\n    if (element.hasMaxLength) {\n      hasMaxLengthError = (value.length > element.maxLength);\n    }\n\n    if (hasMinLengthError || hasMaxLengthError) {\n      return new LengthValidationError(element);\n    }\n\n    return null;\n  }\n\n  static validateNumericField(element, value) {\n    if (value == null || value.isEmpty) {\n      return null;\n    }\n\n    if (!value.isNumeric) {\n      return new NumericFormatValidationError(element);\n    }\n\n    // since the number is now normalized to en_US, check for the . separator\n    const decimalSeparator = '.';\n\n    if (element.isIntegerFormat) {\n      if (value.textValue.indexOf(decimalSeparator) > -1) {\n        return new NumericFormatValidationError(element);\n      }\n    }\n\n    const numberValue = +value.textValue;\n\n    if ((element.hasMin && numberValue < element.min) || (element.hasMax && numberValue > element.max)) {\n      return new NumericRangeValidationError(element);\n    }\n\n    return null;\n  }\n\n  static validateDateField(element, value) {\n    if (value == null || value.isEmpty) {\n      return null;\n    }\n\n    if (!value.isValid) {\n      return new DateFormatValidationError(element);\n    }\n\n    return null;\n  }\n\n  static validateTimeField(element, value) {\n    if (value == null || value.isEmpty) {\n      return null;\n    }\n\n    if (!value.isValid) {\n      return new TimeFormatValidationError(element);\n    }\n\n    return null;\n  }\n\n  static formatErrors(errors) {\n    const messages = [];\n\n    for (const error of errors) {\n      messages.push(error.message);\n    }\n\n    return messages.join('\\n\\n');\n  }\n}\n"],"file":"feature-validator.js"}