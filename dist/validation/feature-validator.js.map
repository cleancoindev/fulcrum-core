{"version":3,"sources":["../../src/validation/feature-validator.js"],"names":[],"mappings":"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","file":"feature-validator.js","sourcesContent":["import RepeatableItemValue from '../values/repeatable-item-value';\nimport Record from '../record';\nimport Condition from '../elements/condition';\nimport RequiredFieldValidationError from './required-field-validation-error';\nimport GeometryRequiredValidationError from './geometry-required-validation-error';\nimport PatternValidationError from './pattern-validation-error';\nimport LengthValidationError from './length-validation-error';\nimport NumericFormatValidationError from './numeric-format-validation-error';\nimport NumericRangeValidationError from './numeric-range-validation-error';\n\nexport default class FeatureValidator {\n  static validateFeature(feature, record, formValues) {\n    if (feature instanceof Record) {\n      return FeatureValidator.validateRecord(record, formValues);\n    } else if (feature instanceof RepeatableItemValue) {\n      return FeatureValidator.validateRepeatableItem(feature, record, formValues);\n    }\n\n    return [];\n  }\n\n  static validateRecord(record, formValues) {\n    if (record == null) {\n      return [];\n    }\n\n    const errors = [];\n\n    if (record.isStatusFieldEnabled && record.status == null) {\n      errors.push(new RequiredFieldValidationError(record.form.statusField.label));\n    }\n\n    if (record.form.isGeometryRequired) {\n      if (!record.hasCoordinate) {\n        errors.push(new GeometryRequiredValidationError());\n      }\n    }\n\n    const cache = {};\n\n    this.validateFieldsInElements(record.form.elements, record, formValues, errors, cache);\n\n    return errors;\n  }\n\n  static validateRepeatableItem(repeatableItem, record, formValues) {\n    if (repeatableItem == null) {\n      return [];\n    }\n\n    const errors = [];\n\n    if (repeatableItem.element.isGeometryRequired) {\n      if (!repeatableItem.hasCoordinate) {\n        errors.push(new GeometryRequiredValidationError());\n      }\n    }\n\n    const cache = {};\n\n    FeatureValidator.validateFieldsInElements(repeatableItem.element.elements, record, formValues, errors, cache);\n\n    return errors;\n  }\n\n  static validateFieldsInElements(elements, record, formValues, errors, cache) {\n    if (!cache) {\n      cache = {};\n    }\n\n    for (const element of elements) {\n      if (element.isSectionElement) {\n        const visible = Condition.shouldElementBeVisible(element, record, formValues, cache);\n\n        if (visible) {\n          FeatureValidator.validateFieldsInElements(element.elements, record, formValues, errors, cache);\n        }\n      } else {\n        const required = Condition.shouldElementBeRequired(element, record, formValues);\n        const visible = Condition.shouldElementBeVisible(element, record, formValues, cache);\n\n        const disabled = element.isDisabled;\n\n        const validatable = (visible && !disabled);\n\n        if (validatable) {\n          if (required) {\n            const fieldValue = formValues.get(element.key);\n\n            if (fieldValue == null || fieldValue.isEmpty) {\n              errors.push(new RequiredFieldValidationError(element));\n            }\n          }\n\n          if (element.isTextElement) {\n            if (element.isNumeric) {\n              const textValue = formValues.get(element.key);\n\n              const error = FeatureValidator.validateNumericField(element, textValue);\n\n              if (error) {\n                errors.push(error);\n              }\n            } else if (element.hasPattern) {\n              const textValue = formValues.get(element.key);\n\n              const error = FeatureValidator.validatePatternOfElement(element, textValue);\n\n              if (error) {\n                errors.push(error);\n              }\n            }\n          }\n\n          if (element.isLengthValidationSupported) {\n            const fieldValue = formValues.get(element.key);\n            const error = FeatureValidator.validateLengthForElement(element, fieldValue);\n\n            if (error) {\n              errors.push(error);\n            }\n          }\n        }\n\n        if (element.isRepeatableElement) {\n          const repeatableValue = formValues.get(element.key);\n\n          if (repeatableValue) {\n            for (const item of repeatableValue.items) {\n              const itemValues = item.formValues.copy();\n\n              itemValues.merge(formValues);\n\n              FeatureValidator.validateFieldsInElements(item.element.elements, record, itemValues, errors, null);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  static validatePatternOfElement(element, value) {\n    if (value == null || value.isEmpty) {\n      return null;\n    }\n\n    const regex = new RegExp(element.pattern);\n\n    if (regex) {\n      if (!regex.test(value.textValue)) {\n        return new PatternValidationError(element);\n      }\n    }\n\n    return null;\n  }\n\n  static validateLengthForElement(element, value) {\n    if (value == null || value.isEmpty) {\n      return null;\n    }\n\n    let hasMinLengthError = false;\n    let hasMaxLengthError = false;\n\n    if (element.hasMinLength) {\n      hasMinLengthError = (value.length < element.minLength);\n    }\n\n    if (element.hasMaxLength) {\n      hasMaxLengthError = (value.length > element.maxLength);\n    }\n\n    if (hasMinLengthError || hasMaxLengthError) {\n      return new LengthValidationError(element);\n    }\n\n    return null;\n  }\n\n  static validateNumericField(element, value) {\n    if (value == null || value.isEmpty) {\n      return null;\n    }\n\n    if (!value.isNumeric) {\n      return new NumericFormatValidationError(element);\n    }\n\n    // since the number is now normalized to en_US, check for the . separator\n    const decimalSeparator = '.';\n\n    if (element.isInteger) {\n      if (value.indexOf(decimalSeparator) > -1) {\n        return new NumericFormatValidationError(element);\n      }\n    }\n\n    const numberValue = +value.textValue;\n\n    if (numberValue < element.min || numberValue > element.max) {\n      return new NumericRangeValidationError(element);\n    }\n\n    return null;\n  }\n\n  static formatErrors(errors) {\n    const messages = [];\n\n    for (const error of errors) {\n      messages.push(error.message);\n    }\n\n    return messages.join('\\n\\n');\n  }\n}\n"]}