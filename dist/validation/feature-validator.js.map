{"version":3,"sources":["../../src/validation/feature-validator.js"],"names":[],"mappings":"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","file":"feature-validator.js","sourcesContent":["import RepeatableItemValue from '../values/repeatable-item-value';\nimport Record from '../record';\nimport Condition from '../elements/condition';\nimport RequiredFieldValidationError from './required-field-validation-error';\nimport GeometryRequiredValidationError from './geometry-required-validation-error';\nimport PatternValidationError from './pattern-validation-error';\nimport LengthValidationError from './length-validation-error';\nimport NumericFormatValidationError from './numeric-format-validation-error';\nimport NumericRangeValidationError from './numeric-range-validation-error';\n\nexport default class FeatureValidator {\n  static validateFeature(feature, record, formValues) {\n    if (feature instanceof Record) {\n      return FeatureValidator.validateRecord(record, formValues);\n    } else if (feature instanceof RepeatableItemValue) {\n      return FeatureValidator.validateRepeatableItem(feature, record, formValues);\n    }\n\n    return [];\n  }\n\n  static validateRecord(record, formValues) {\n    if (record == null) {\n      return [];\n    }\n\n    const errors = [];\n\n    if (record.isStatusFieldEnabled && record.status == null) {\n      errors.push(new RequiredFieldValidationError(record.form.statusField.label));\n    }\n\n    if (record.form.isGeometryRequired) {\n      if (!record.hasCoordinate) {\n        errors.push(new GeometryRequiredValidationError());\n      }\n    }\n\n    const cache = {};\n\n    this.validateFieldsInElements(record.form.elements, record, formValues, errors, cache);\n\n    return errors;\n  }\n\n  static validateRepeatableItem(repeatableItem, record, formValues) {\n    if (repeatableItem == null) {\n      return [];\n    }\n\n    const errors = [];\n\n    if (repeatableItem.element.isGeometryRequired) {\n      if (!repeatableItem.hasCoordinate) {\n        errors.push(new GeometryRequiredValidationError());\n      }\n    }\n\n    const cache = {};\n\n    FeatureValidator.validateFieldsInElements(repeatableItem.element.elements, record, formValues, errors, cache);\n\n    return errors;\n  }\n\n  static validateFieldsInElements(elements, record, formValues, errors, cache) {\n    if (!cache) {\n      cache = {};\n    }\n\n    for (const element of elements) {\n      if (element.isSectionElement) {\n        const visible = Condition.shouldElementBeVisible(element, record, formValues, cache);\n\n        if (visible) {\n          FeatureValidator.validateFieldsInElements(element.elements, record, formValues, errors, cache);\n        }\n      } else {\n        const required = Condition.shouldElementBeRequired(element, record, formValues);\n        const visible = Condition.shouldElementBeVisible(element, record, formValues, cache);\n\n        const disabled = element.isDisabled;\n\n        const validatable = (visible && !disabled);\n\n        if (validatable) {\n          if (required) {\n            const fieldValue = formValues.get(element.key);\n\n            if (fieldValue == null || fieldValue.isEmpty) {\n              errors.push(new RequiredFieldValidationError(element));\n            }\n          }\n\n          if (element.isTextElement) {\n            if (element.isNumeric) {\n              const textValue = formValues.get(element.key);\n\n              const error = FeatureValidator.validateNumericField(element, textValue);\n\n              if (error) {\n                errors.push(error);\n              }\n            } else if (element.hasPattern) {\n              const textValue = formValues.get(element.key);\n\n              const error = FeatureValidator.validatePatternOfElement(element, textValue);\n\n              if (error) {\n                errors.push(error);\n              }\n            }\n          }\n\n          if (element.isLengthValidationSupported) {\n            const fieldValue = formValues.get(element.key);\n            const error = FeatureValidator.validateLengthForElement(element, fieldValue);\n\n            if (error) {\n              errors.push(error);\n            }\n          }\n        }\n\n        if (element.isRepeatableElement) {\n          const repeatableValue = formValues.get(element.key);\n\n          if (repeatableValue) {\n            for (const item of repeatableValue.items) {\n              const itemValues = item.formValues.copy();\n\n              itemValues.merge(formValues);\n\n              FeatureValidator.validateFieldsInElements(item.element.elements, record, itemValues, errors, null);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  static validatePatternOfElement(element, value) {\n    if (value == null || value.isEmpty) {\n      return null;\n    }\n\n    const regex = new RegExp(element.pattern);\n\n    if (regex) {\n      if (!regex.test(value.textValue)) {\n        return new PatternValidationError(element);\n      }\n    }\n\n    return null;\n  }\n\n  static validateLengthForElement(element, value) {\n    if (value == null || value.isEmpty) {\n      return null;\n    }\n\n    let hasMinLengthError = false;\n    let hasMaxLengthError = false;\n\n    if (element.hasMinLength) {\n      hasMinLengthError = (value.length < element.minLength);\n    }\n\n    if (element.hasMaxLength) {\n      hasMaxLengthError = (value.length > element.maxLength);\n    }\n\n    if (hasMinLengthError || hasMaxLengthError) {\n      return new LengthValidationError(element);\n    }\n\n    return null;\n  }\n\n  static validateNumericField(element, value) {\n    if (value == null || value.isEmpty) {\n      return null;\n    }\n\n    if (!value.isNumeric) {\n      return new NumericFormatValidationError(element);\n    }\n\n    // since the number is now normalized to en_US, check for the . separator\n    const decimalSeparator = '.';\n\n    if (element.isInteger) {\n      if (value.indexOf(decimalSeparator) > -1) {\n        return new NumericFormatValidationError(element);\n      }\n    }\n\n    const numberValue = +value.textValue;\n\n    if (numberValue < element.min || numberValue > element.max) {\n      return new NumericRangeValidationError(element);\n    }\n\n    return null;\n  }\n\n  static formatErrors(errors) {\n    const messages = [];\n\n    for (const error of errors) {\n      messages.push(error.message);\n    }\n\n    messages.join('\\n\\n');\n  }\n}\n"]}