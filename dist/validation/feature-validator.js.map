{"version":3,"sources":["../../src/validation/feature-validator.js"],"names":[],"mappings":"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","file":"feature-validator.js","sourcesContent":["import RepeatableItemValue from '../values/repeatable-item-value';\nimport Record from '../record';\nimport Condition from '../elements/condition';\nimport RequiredFieldValidationError from './required-field-validation-error';\nimport GeometryRequiredValidationError from './geometry-required-validation-error';\nimport PatternValidationError from './pattern-validation-error';\nimport LengthValidationError from './length-validation-error';\nimport NumericFormatValidationError from './numeric-format-validation-error';\nimport NumericRangeValidationError from './numeric-range-validation-error';\nimport DateFormatValidationError from './date-format-validation-error';\nimport TimeFormatValidationError from './time-format-validation-error';\n\nexport default class FeatureValidator {\n  static validateFeature(feature, record, formValues) {\n    if (feature instanceof Record) {\n      return FeatureValidator.validateRecord(record, formValues);\n    } else if (feature instanceof RepeatableItemValue) {\n      return FeatureValidator.validateRepeatableItem(feature, record, formValues);\n    }\n\n    return [];\n  }\n\n  static validateRecord(record, formValues) {\n    if (record == null) {\n      return [];\n    }\n\n    const errors = [];\n\n    if (record.isStatusFieldEnabled && record.status == null) {\n      errors.push(new RequiredFieldValidationError(record.form.statusField));\n    }\n\n    if (record.form.isGeometryRequired) {\n      if (!record.hasCoordinate) {\n        errors.push(new GeometryRequiredValidationError());\n      }\n    }\n\n    const cache = {};\n\n    this.validateFieldsInElements(record.form.elements, record, formValues, errors, cache);\n\n    return errors;\n  }\n\n  static validateRepeatableItem(repeatableItem, record, formValues) {\n    if (repeatableItem == null) {\n      return [];\n    }\n\n    const errors = [];\n\n    if (repeatableItem.element.isGeometryRequired) {\n      if (!repeatableItem.hasCoordinate) {\n        errors.push(new GeometryRequiredValidationError());\n      }\n    }\n\n    const cache = {};\n\n    FeatureValidator.validateFieldsInElements(repeatableItem.element.elements, record, formValues, errors, cache);\n\n    return errors;\n  }\n\n  static validateFieldsInElements(elements, record, formValues, errors, cache) {\n    if (!cache) {\n      cache = {};\n    }\n\n    for (const element of elements) {\n      if (element.isSectionElement) {\n        const visible = Condition.shouldElementBeVisible(element, record, formValues, cache);\n\n        if (visible) {\n          FeatureValidator.validateFieldsInElements(element.elements, record, formValues, errors, cache);\n        }\n      } else {\n        const required = Condition.shouldElementBeRequired(element, record, formValues);\n        const visible = Condition.shouldElementBeVisible(element, record, formValues, cache);\n\n        const disabled = element.isDisabled;\n\n        const validatable = (visible && !disabled);\n\n        if (validatable) {\n          if (required) {\n            const fieldValue = formValues.get(element.key);\n\n            if (fieldValue == null || fieldValue.isEmpty) {\n              errors.push(new RequiredFieldValidationError(element));\n            }\n          }\n\n          if (element.isTextElement) {\n            if (element.isNumeric) {\n              const textValue = formValues.get(element.key);\n\n              const error = FeatureValidator.validateNumericField(element, textValue);\n\n              if (error) {\n                errors.push(error);\n              }\n            } else if (element.hasPattern) {\n              const textValue = formValues.get(element.key);\n\n              const error = FeatureValidator.validatePatternOfElement(element, textValue);\n\n              if (error) {\n                errors.push(error);\n              }\n            }\n          }\n\n          if (element.isDateElement) {\n            const error = FeatureValidator.validateDateField(element, formValues.get(element.key));\n\n            if (error) {\n              errors.push(error);\n            }\n          }\n\n          if (element.isTimeElement) {\n            const error = FeatureValidator.validateTimeField(element, formValues.get(element.key));\n\n            if (error) {\n              errors.push(error);\n            }\n          }\n\n          if (element.isLengthValidationSupported) {\n            const fieldValue = formValues.get(element.key);\n            const error = FeatureValidator.validateLengthForElement(element, fieldValue);\n\n            if (error) {\n              errors.push(error);\n            }\n          }\n        }\n\n        if (element.isRepeatableElement) {\n          const repeatableValue = formValues.get(element.key);\n\n          if (repeatableValue) {\n            for (const item of repeatableValue.items) {\n              const itemValues = item.formValues.copy();\n\n              itemValues.merge(formValues);\n\n              FeatureValidator.validateFieldsInElements(item.element.elements, record, itemValues, errors, null);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  static validatePatternOfElement(element, value) {\n    if (value == null || value.isEmpty) {\n      return null;\n    }\n\n    const regex = new RegExp('^(?:' + element.pattern + ')$');\n\n    if (regex) {\n      if (!regex.test(value.textValue)) {\n        return new PatternValidationError(element);\n      }\n    }\n\n    return null;\n  }\n\n  static validateLengthForElement(element, value) {\n    if (value == null || value.isEmpty) {\n      return null;\n    }\n\n    let hasMinLengthError = false;\n    let hasMaxLengthError = false;\n\n    if (element.hasMinLength) {\n      hasMinLengthError = (value.length < element.minLength);\n    }\n\n    if (element.hasMaxLength) {\n      hasMaxLengthError = (value.length > element.maxLength);\n    }\n\n    if (hasMinLengthError || hasMaxLengthError) {\n      return new LengthValidationError(element);\n    }\n\n    return null;\n  }\n\n  static validateNumericField(element, value) {\n    if (value == null || value.isEmpty) {\n      return null;\n    }\n\n    if (!value.isNumeric) {\n      return new NumericFormatValidationError(element);\n    }\n\n    // since the number is now normalized to en_US, check for the . separator\n    const decimalSeparator = '.';\n\n    if (element.isIntegerFormat) {\n      if (value.textValue.indexOf(decimalSeparator) > -1) {\n        return new NumericFormatValidationError(element);\n      }\n    }\n\n    const numberValue = +value.textValue;\n\n    if ((element.hasMin && numberValue < element.min) || (element.hasMax && numberValue > element.max)) {\n      return new NumericRangeValidationError(element);\n    }\n\n    return null;\n  }\n\n  static validateDateField(element, value) {\n    if (value == null || value.isEmpty) {\n      return null;\n    }\n\n    if (!value.isValid) {\n      return new DateFormatValidationError(element);\n    }\n\n    return null;\n  }\n\n  static validateTimeField(element, value) {\n    if (value == null || value.isEmpty) {\n      return null;\n    }\n\n    if (!value.isValid) {\n      return new TimeFormatValidationError(element);\n    }\n\n    return null;\n  }\n\n  static formatErrors(errors) {\n    const messages = [];\n\n    for (const error of errors) {\n      messages.push(error.message);\n    }\n\n    return messages.join('\\n\\n');\n  }\n}\n"]}