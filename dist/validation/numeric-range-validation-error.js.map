{"version":3,"sources":["../../src/validation/numeric-range-validation-error.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;;;;;;;;;;;IAEqB,2B;;;;;;;;;;;wBACL;AACZ,UAAI,UAAU,IAAd;;AAEA,UAAM,aAAa,KAAK,KAAxB;;AAEA,UAAI,KAAK,OAAL,CAAa,MAAb,IAAuB,KAAK,OAAL,CAAa,MAAxC,EAAgD;AAC9C,kBAAU,kBAAO,oDAAP,EACO,UADP,EAEO,KAAK,OAAL,CAAa,GAFpB,EAGO,KAAK,OAAL,CAAa,GAHpB,CAAV;AAID,OALD,MAKO,IAAI,KAAK,OAAL,CAAa,MAAjB,EAAyB;AAC9B,kBAAU,kBAAO,8DAAP,EACO,UADP,EAEO,KAAK,OAAL,CAAa,GAFpB,CAAV;AAGD,OAJM,MAIA;AACL,kBAAU,kBAAO,2DAAP,EACO,UADP,EAEO,KAAK,OAAL,CAAa,GAFpB,CAAV;AAGD;;AAED,aAAO,OAAP;AACD;;;;;;kBAtBkB,2B","file":"numeric-range-validation-error.js","sourcesContent":["import ElementValidationError from './element-validation-error';\nimport {format} from 'util';\n\nexport default class NumericRangeValidationError extends ElementValidationError {\n  get message() {\n    let message = null;\n\n    const fieldLabel = this.label;\n\n    if (this.element.hasMin && this.element.hasMax) {\n      message = format(\"The value of field '%s' must be between %s and %s.\",\n                       fieldLabel,\n                       this.element.min,\n                       this.element.max);\n    } else if (this.element.hasMin) {\n      message = format(\"The value of field '%s' must be greater than or equal to %s.\",\n                       fieldLabel,\n                       this.element.min);\n    } else {\n      message = format(\"The value of field '%s' must be less than or equal to %s.\",\n                       fieldLabel,\n                       this.element.max);\n    }\n\n    return message;\n  }\n}\n"]}