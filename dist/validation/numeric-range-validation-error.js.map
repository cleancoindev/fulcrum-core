{"version":3,"sources":["../../src/validation/numeric-range-validation-error.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;IAGqB;;;;;;;;;;;wBACL;AACZ,UAAI,gBAAJ,CADY;;AAGZ,UAAM,aAAa,KAAK,KAAL,CAHP;;AAKZ,UAAI,KAAK,OAAL,CAAa,MAAb,IAAuB,KAAK,OAAL,CAAa,MAAb,EAAqB;AAC9C,kBAAU,kBAAO,oDAAP,EACO,UADP,EAEO,KAAK,OAAL,CAAa,GAAb,EACA,KAAK,OAAL,CAAa,GAAb,CAHjB,CAD8C;OAAhD,MAKO,IAAI,KAAK,OAAL,CAAa,MAAb,EAAqB;AAC9B,kBAAU,kBAAO,8DAAP,EACO,UADP,EAEO,KAAK,OAAL,CAAa,GAAb,CAFjB,CAD8B;OAAzB,MAIA;AACL,kBAAU,kBAAO,2DAAP,EACO,UADP,EAEO,KAAK,OAAL,CAAa,GAAb,CAFjB,CADK;OAJA;;AAUP,aAAO,OAAP,CApBY;;;;SADK","file":"numeric-range-validation-error.js","sourcesContent":["import ElementValidationError from './element-validation-error';\nimport {format} from 'util';\n\nexport default class NumericRangeValidationError extends ElementValidationError {\n  get message() {\n    let message;\n\n    const fieldLabel = this.label;\n\n    if (this.element.hasMin && this.element.hasMax) {\n      message = format(\"The value of field '%s' must be between %s and %s.\",\n                       fieldLabel,\n                       this.element.min,\n                       this.element.max);\n    } else if (this.element.hasMin) {\n      message = format(\"The value of field '%s' must be greater than or equal to %s.\",\n                       fieldLabel,\n                       this.element.min);\n    } else {\n      message = format(\"The value of field '%s' must be less than or equal to %s.\",\n                       fieldLabel,\n                       this.element.max);\n    }\n\n    return message;\n  }\n}\n"]}