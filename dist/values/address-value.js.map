{"version":3,"sources":["../../src/values/address-value.js"],"names":["AddressValue","element","attributes","address","toJSON","isEmpty","isEqual","stringValue","contains","startsWith","isLessThan","isGreaterThan","lines","join","displayValue","length","value","Object","keys","key","searchableValue"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;;;;;;;;;IAEqBA,Y;;;AACnB,wBAAYC,OAAZ,EAAqBC,UAArB,EAAiC;AAAA;;AAAA,iDAC/B,sBAAMD,OAAN,CAD+B;;AAG/B,UAAKE,OAAL,GAAe,sBAAYD,UAAZ,CAAf;AAH+B;AAIhC;;yBAsCDE,M,qBAAS;AACP,QAAI,KAAKC,OAAT,EAAkB;AAChB,aAAO,IAAP;AACD;;AAED,WAAO,KAAKF,OAAL,CAAaC,MAAb,EAAP;AACD,G;;yBAEDE,O,oBAAQC,W,EAAa;AACnB,WAAO,KAAP;AACD,G;;yBAEDC,Q,qBAASD,W,EAAa;AACpB,WAAO,KAAP;AACD,G;;yBAEDE,U,uBAAWF,W,EAAa;AACtB,WAAO,KAAP;AACD,G;;yBAEDG,U,uBAAWH,W,EAAa;AACtB,WAAO,KAAP;AACD,G;;yBAEDI,a,0BAAcJ,W,EAAa;AACzB,WAAO,KAAP;AACD,G;;;;wBA9Da;AACZ,aAAO,KAAKJ,OAAL,CAAaE,OAApB;AACD;;;wBAEkB;AACjB,aAAO,KAAKF,OAAL,CAAaS,KAAb,CAAmBC,IAAnB,CAAwB,IAAxB,CAAP;AACD;;;wBAEqB;AACpB,aAAO,KAAKV,OAAL,CAAaS,KAAb,CAAmBC,IAAnB,CAAwB,GAAxB,CAAP;AACD;;;wBAEY;AACX,aAAO,KAAKC,YAAL,CAAkBC,MAAzB;AACD;;;wBAEiB;AAChB,UAAMC,QAAQ,EAAd;;AAEA,UAAMb,UAAU,KAAKA,OAAL,CAAaC,MAAb,EAAhB;;AAEA,2BAAkBa,OAAOC,IAAP,CAAYf,OAAZ,CAAlB,kHAAwC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,YAA7BgB,GAA6B;;AACtCH,cAAM,MAAM,KAAKf,OAAL,CAAakB,GAAnB,GAAyB,GAAzB,GAA+BA,GAArC,IAA4ChB,QAAQgB,GAAR,CAA5C;AACD;;AAEDH,YAAM,MAAM,KAAKf,OAAL,CAAakB,GAAzB,IAAgC,KAAKC,eAArC;;AAEA,aAAOJ,KAAP;AACD;;;wBAEoB;AACnB,aAAO,IAAP;AACA;AACA;AACD;;;;;;kBAzCkBhB,Y","file":"address-value.js","sourcesContent":["import FormValue from './form-value';\nimport Address from './address';\n\nexport default class AddressValue extends FormValue {\n  constructor(element, attributes) {\n    super(element);\n\n    this.address = new Address(attributes);\n  }\n\n  get isEmpty() {\n    return this.address.isEmpty;\n  }\n\n  get displayValue() {\n    return this.address.lines.join('\\n');\n  }\n\n  get searchableValue() {\n    return this.address.lines.join(' ');\n  }\n\n  get length() {\n    return this.displayValue.length;\n  }\n\n  get columnValue() {\n    const value = {};\n\n    const address = this.address.toJSON();\n\n    for (const key of Object.keys(address)) {\n      value['f' + this.element.key + '_' + key] = address[key];\n    }\n\n    value['f' + this.element.key] = this.searchableValue;\n\n    return value;\n  }\n\n  get multipleValues() {\n    return null;\n    // TODO(zhm) implement\n    // throw new Error('Not implemented');\n  }\n\n  toJSON() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    return this.address.toJSON();\n  }\n\n  isEqual(stringValue) {\n    return false;\n  }\n\n  contains(stringValue) {\n    return false;\n  }\n\n  startsWith(stringValue) {\n    return false;\n  }\n\n  isLessThan(stringValue) {\n    return false;\n  }\n\n  isGreaterThan(stringValue) {\n    return false;\n  }\n}\n"]}