{"version":3,"sources":["../../src/values/address-value.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;;;;;;;;;;;;;IAEqB,Y;;;AACnB,wBAAY,OAAZ,EAAqB,UAArB,EAAiC;AAAA;;AAAA,iDAC/B,sBAAM,OAAN,CAD+B;;AAG/B,UAAK,OAAL,GAAe,sBAAY,UAAZ,CAAf;AAH+B;AAIhC;;;;;yBAsCD,M,qBAAS;AACP,QAAI,KAAK,OAAT,EAAkB;AAChB,aAAO,IAAP;AACD;;AAED,WAAO,KAAK,OAAL,CAAa,MAAb,EAAP;AACD,G;;yBAED,O,oBAAQ,W,EAAa;AACnB,WAAO,KAAP;AACD,G;;yBAED,Q,qBAAS,W,EAAa;AACpB,WAAO,KAAP;AACD,G;;yBAED,U,uBAAW,W,EAAa;AACtB,WAAO,KAAP;AACD,G;;yBAED,U,uBAAW,W,EAAa;AACtB,WAAO,KAAP;AACD,G;;yBAED,a,0BAAc,W,EAAa;AACzB,WAAO,KAAP;AACD,G;;;;wBA9Da;AACZ,aAAO,KAAK,OAAL,CAAa,OAApB;AACD;;;wBAEkB;AACjB,aAAO,KAAK,OAAL,CAAa,KAAb,CAAmB,IAAnB,CAAwB,IAAxB,CAAP;AACD;;;wBAEqB;AACpB,aAAO,KAAK,OAAL,CAAa,KAAb,CAAmB,IAAnB,CAAwB,GAAxB,CAAP;AACD;;;wBAEY;AACX,aAAO,KAAK,YAAL,CAAkB,MAAzB;AACD;;;wBAEiB;AAChB,UAAM,QAAQ,EAAd;;AAEA,UAAM,UAAU,KAAK,OAAL,CAAa,MAAb,EAAhB;;AAEA,2BAAkB,OAAO,IAAP,CAAY,OAAZ,CAAlB,kHAAwC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,YAA7B,GAA6B;;AACtC,cAAM,MAAM,KAAK,OAAL,CAAa,GAAnB,GAAyB,GAAzB,GAA+B,GAArC,IAA4C,QAAQ,GAAR,CAA5C;AACD;;AAED,YAAM,MAAM,KAAK,OAAL,CAAa,GAAzB,IAAgC,KAAK,eAArC;;AAEA,aAAO,KAAP;AACD;;;wBAEoB;AACnB,aAAO,IAAP;AAGD;;;;;;kBAzCkB,Y","file":"address-value.js","sourcesContent":["import FormValue from './form-value';\nimport Address from './address';\n\nexport default class AddressValue extends FormValue {\n  constructor(element, attributes) {\n    super(element);\n\n    this.address = new Address(attributes);\n  }\n\n  get isEmpty() {\n    return this.address.isEmpty;\n  }\n\n  get displayValue() {\n    return this.address.lines.join('\\n');\n  }\n\n  get searchableValue() {\n    return this.address.lines.join(' ');\n  }\n\n  get length() {\n    return this.displayValue.length;\n  }\n\n  get columnValue() {\n    const value = {};\n\n    const address = this.address.toJSON();\n\n    for (const key of Object.keys(address)) {\n      value['f' + this.element.key + '_' + key] = address[key];\n    }\n\n    value['f' + this.element.key] = this.searchableValue;\n\n    return value;\n  }\n\n  get multipleValues() {\n    return null;\n    // TODO(zhm) implement\n    // throw new Error('Not implemented');\n  }\n\n  toJSON() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    return this.address.toJSON();\n  }\n\n  isEqual(stringValue) {\n    return false;\n  }\n\n  contains(stringValue) {\n    return false;\n  }\n\n  startsWith(stringValue) {\n    return false;\n  }\n\n  isLessThan(stringValue) {\n    return false;\n  }\n\n  isGreaterThan(stringValue) {\n    return false;\n  }\n}\n"]}