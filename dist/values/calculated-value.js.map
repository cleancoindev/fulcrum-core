{"version":3,"sources":["../../src/values/calculated-value.js"],"names":["CalculatedValue","element","value","error","hasError","display","format","textValue","isCurrency","isNumber","parseDouble","isDate","date","Date","getTime"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;;;;;;;;;IAEqBA,e;;;AACnB,2BAAYC,OAAZ,EAAqBC,KAArB,EAA4B;AAAA;;AAAA,iDAC1B,yBAAMD,OAAN,EAAeC,KAAf,CAD0B;;AAG1B,UAAKC,KAAL,GAAa,IAAb;AAH0B;AAI3B;;;;wBAEkB;AACjB,UAAI,KAAKC,QAAT,EAAmB;AACjB,eAAO,KAAKD,KAAZ;AACD;;AAED,aAAO,KAAKF,OAAL,CAAaI,OAAb,CAAqBC,MAArB,CAA4B,KAAKC,SAAjC,CAAP;AACD;;;wBAEc;AACb,aAAO,KAAKJ,KAAL,IAAc,IAArB;AACD;;;wBAEiB;AAChB,UAAME,UAAU,KAAKJ,OAAL,CAAaI,OAA7B;;AAEA;AACA;AACA;;AAEA,UAAIA,QAAQG,UAAR,IAAsBH,QAAQI,QAAlC,EAA4C;AAC1C,eAAO,sBAAYC,WAAZ,CAAwB,KAAKH,SAA7B,CAAP;AACD,OAFD,MAEO,IAAIF,QAAQM,MAAZ,EAAoB;AACzB,YAAMC,OAAO,IAAIC,IAAJ,CAAY,KAAKN,SAAjB,gBAAb;;AAEA,YAAIK,IAAJ,EAAU;AACR,iBAAOA,KAAKE,OAAL,KAAiB,IAAxB;AACD;AACF;;AAED,aAAO,KAAKP,SAAZ;AACD;;;;;;kBArCkBP,e","file":"calculated-value.js","sourcesContent":["import TextualValue from './textual-value';\nimport NumberUtils from '../utils/number-utils';\n\nexport default class CalculatedValue extends TextualValue {\n  constructor(element, value) {\n    super(element, value);\n\n    this.error = null;\n  }\n\n  get displayValue() {\n    if (this.hasError) {\n      return this.error;\n    }\n\n    return this.element.display.format(this.textValue);\n  }\n\n  get hasError() {\n    return this.error != null;\n  }\n\n  get columnValue() {\n    const display = this.element.display;\n\n    // - for currency or number display, return the numeric value\n    // - for date calculations return the UTC epoch seconds\n    // - for text (and anything else) just return the string value\n\n    if (display.isCurrency || display.isNumber) {\n      return NumberUtils.parseDouble(this.textValue);\n    } else if (display.isDate) {\n      const date = new Date(`${this.textValue} 00:00:00Z`);\n\n      if (date) {\n        return date.getTime() / 1000;\n      }\n    }\n\n    return this.textValue;\n  }\n}\n\n"]}