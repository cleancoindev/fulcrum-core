{"version":3,"sources":["../../src/values/calculated-value.js"],"names":["CalculatedValue","element","value","error","format","isEmpty","display","isCurrency","isNumber","parseDouble","textValue","isDate","Date","hasError","date","getTime"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;;;;;;;;;IAEqBA,e;;;AACnB,2BAAYC,OAAZ,EAAqBC,KAArB,EAA4B;AAAA;;AAAA,iDAC1B,yBAAMD,OAAN,EAAeC,KAAf,CAD0B;;AAG1B,UAAKC,KAAL,GAAa,IAAb;AAH0B;AAI3B;;4BAEDC,M,qBAAS;AACP,QAAI,KAAKC,OAAT,EAAkB;AAChB,aAAO,IAAP;AACD;;AAED,QAAMC,UAAU,KAAKL,OAAL,CAAaK,OAA7B;;AAEA;AACA;AACA;;AAEA,QAAIA,QAAQC,UAAR,IAAsBD,QAAQE,QAAlC,EAA4C;AAC1C,aAAO,sBAAYC,WAAZ,CAAwB,KAAKC,SAA7B,CAAP;AACD,KAFD,MAEO,IAAIJ,QAAQK,MAAZ,EAAoB;AACzB,aAAO,IAAIC,IAAJ,CAAY,KAAKF,SAAjB,gBAAP;AACD;;AAED,WAAO,KAAKA,SAAZ;AACD,G;;;;wBAEkB;AACjB,UAAI,KAAKG,QAAT,EAAmB;AACjB,eAAO,KAAKV,KAAZ;AACD;;AAED,aAAO,KAAKF,OAAL,CAAaK,OAAb,CAAqBF,MAArB,CAA4B,KAAKM,SAAjC,CAAP;AACD;;;wBAEc;AACb,aAAO,KAAKP,KAAL,IAAc,IAArB;AACD;;;wBAEiB;AAChB,UAAMG,UAAU,KAAKL,OAAL,CAAaK,OAA7B;;AAEA;AACA;AACA;;AAEA,UAAIA,QAAQC,UAAR,IAAsBD,QAAQE,QAAlC,EAA4C;AAC1C,eAAO,sBAAYC,WAAZ,CAAwB,KAAKC,SAA7B,CAAP;AACD,OAFD,MAEO,IAAIJ,QAAQK,MAAZ,EAAoB;AACzB,YAAMG,OAAO,IAAIF,IAAJ,CAAY,KAAKF,SAAjB,gBAAb;;AAEA,YAAII,IAAJ,EAAU;AACR,iBAAOA,KAAKC,OAAL,KAAiB,IAAxB;AACD;AACF;;AAED,aAAO,KAAKL,SAAZ;AACD;;;;;;kBAzDkBV,e","file":"calculated-value.js","sourcesContent":["import TextualValue from './textual-value';\nimport NumberUtils from '../utils/number-utils';\n\nexport default class CalculatedValue extends TextualValue {\n  constructor(element, value) {\n    super(element, value);\n\n    this.error = null;\n  }\n\n  format() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const display = this.element.display;\n\n    // - for currency or number display, return the numeric value\n    // - for date calculations return the date\n    // - for text (and anything else) just return the string value\n\n    if (display.isCurrency || display.isNumber) {\n      return NumberUtils.parseDouble(this.textValue);\n    } else if (display.isDate) {\n      return new Date(`${this.textValue} 00:00:00Z`);\n    }\n\n    return this.textValue;\n  }\n\n  get displayValue() {\n    if (this.hasError) {\n      return this.error;\n    }\n\n    return this.element.display.format(this.textValue);\n  }\n\n  get hasError() {\n    return this.error != null;\n  }\n\n  get columnValue() {\n    const display = this.element.display;\n\n    // - for currency or number display, return the numeric value\n    // - for date calculations return the UTC epoch seconds\n    // - for text (and anything else) just return the string value\n\n    if (display.isCurrency || display.isNumber) {\n      return NumberUtils.parseDouble(this.textValue);\n    } else if (display.isDate) {\n      const date = new Date(`${this.textValue} 00:00:00Z`);\n\n      if (date) {\n        return date.getTime() / 1000;\n      }\n    }\n\n    return this.textValue;\n  }\n}\n\n"]}