{"version":3,"sources":["../../src/values/choice-value.js"],"names":["ChoiceDisplaySeparator","ChoiceSearchSeparator","ChoiceValue","element","attributes","_choiceValues","_otherValues","choice_values","choice","isPresent","push","other_values","toJSON","isEmpty","choiceValues","otherValues","rawValue","otherValue","isEqual","value","selectedValues","contains","startsWith","length","labels","choiceByValue","label","join","values","allValues","multiple","slice","hasOtherValue"],"mappings":"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","file":"choice-value.js","sourcesContent":["import FormValue from './form-value';\nimport TextUtils from '../utils/text-utils';\nimport includes from 'lodash.includes';\n\nconst ChoiceDisplaySeparator = ', ';\nconst ChoiceSearchSeparator = ' ';\n\nexport default class ChoiceValue extends FormValue {\n  constructor(element, attributes) {\n    super(element, attributes);\n\n    this._choiceValues = [];\n    this._otherValues = [];\n\n    if (attributes) {\n      if (attributes.choice_values) {\n        for (const choice of attributes.choice_values) {\n          if (TextUtils.isPresent(choice)) {\n            this._choiceValues.push(choice);\n          }\n        }\n      }\n\n      if (attributes.other_values) {\n        for (const choice of attributes.other_values) {\n          if (TextUtils.isPresent(choice)) {\n            this._otherValues.push(choice);\n          }\n        }\n      }\n    }\n  }\n\n  get isEmpty() {\n    if (this._choiceValues.length) {\n      return false;\n    }\n    if (this._otherValues.length) {\n      return false;\n    }\n    return true;\n  }\n\n  get displayValue() {\n    const labels = [];\n\n    for (const rawValue of this._choiceValues) {\n      const choice = this.element.choiceByValue(rawValue);\n\n      const label = (choice != null ? choice.label : rawValue);\n\n      if (TextUtils.isPresent(label)) {\n        labels.push(label);\n      }\n    }\n\n    for (const otherValue of this._otherValues) {\n      labels.push(otherValue);\n    }\n\n    return labels.join(ChoiceDisplaySeparator);\n  }\n\n  get searchableValue() {\n    const values = [];\n\n    for (const rawValue of this._choiceValues) {\n      const choice = this.element.choiceByValue(rawValue);\n\n      if (choice != null) {\n        values.push(choice.label);\n\n        if (choice.label !== choice.value) {\n          values.push(choice.value);\n        }\n      } else {\n        values.push(rawValue);\n      }\n    }\n\n    for (const otherValue of this._otherValues) {\n      values.push(otherValue);\n    }\n\n    return values.join(ChoiceSearchSeparator);\n  }\n\n  get length() {\n    return this._choiceValues.length + this._otherValues.length;\n  }\n\n  toJSON() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const choiceValues = [];\n    const otherValues = [];\n\n    for (const rawValue of this._choiceValues) {\n      choiceValues.push(rawValue);\n    }\n\n    for (const otherValue of this._otherValues) {\n      otherValues.push(otherValue);\n    }\n\n    return {\n      choice_values: choiceValues,\n      other_values: otherValues\n    };\n  }\n\n  get columnValue() {\n    const allValues = [];\n\n    for (const rawValue of this._choiceValues) {\n      allValues.push(rawValue);\n    }\n\n    for (const otherValue of this._otherValues) {\n      allValues.push(otherValue);\n    }\n\n    if (allValues.length === 0) {\n      return null;\n    }\n\n    if (!this.element.multiple) {\n      return allValues[0];\n    }\n\n    return allValues;\n  }\n\n  get multipleValues() {\n    return null;\n  }\n\n  get hasOtherValue() {\n    return this._otherValues.length !== 0;\n  }\n\n  get selectedValues() {\n    return this._choiceValues.slice();\n  }\n\n  set selectedValues(values) {\n    this._choiceValues = (values || []).slice();\n  }\n\n  get otherValues() {\n    return this._otherValues.slice();\n  }\n\n  set otherValues(values) {\n    this._otherValues = (values || []).slice();\n  }\n\n  get otherValue() {\n    if (!this.hasOtherValue) {\n      return null;\n    }\n\n    return this._otherValues[0];\n  }\n\n  isEqual(value) {\n    if (includes(this.selectedValues, value)) {\n      return true;\n    }\n\n    return this.otherValue === value;\n  }\n\n  contains(value) {\n    return this.isEqual(value);\n  }\n\n  startsWith(value) {\n    return this.contains(value);\n  }\n\n  // isLessThan(value) {\n  //   notImplemented();\n  // }\n\n  // isGreaterThan(value) {\n  //   notImplemented();\n  // }\n}\n"]}