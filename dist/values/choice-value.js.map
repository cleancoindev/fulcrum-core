{"version":3,"sources":["../../src/values/choice-value.js"],"names":[],"mappings":"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","file":"choice-value.js","sourcesContent":["import FormValue from './form-value';\nimport TextUtils from '../utils/text-utils';\nimport includes from 'lodash.includes';\n\nconst ChoiceDisplaySeparator = ', ';\nconst ChoiceSearchSeparator = ' ';\n\nexport default class ChoiceValue extends FormValue {\n  constructor(element, attributes) {\n    super(element, attributes);\n\n    this._choiceValues = [];\n    this._otherValues = [];\n\n    if (attributes) {\n      if (attributes.choice_values) {\n        for (const choice of attributes.choice_values) {\n          if (TextUtils.isPresent(choice)) {\n            this._choiceValues.push(choice);\n          }\n        }\n      }\n\n      if (attributes.other_values) {\n        for (const choice of attributes.other_values) {\n          if (TextUtils.isPresent(choice)) {\n            this._otherValues.push(choice);\n          }\n        }\n      }\n    }\n  }\n\n  get isEmpty() {\n    if (this._choiceValues.length) {\n      return false;\n    }\n    if (this._otherValues.length) {\n      return false;\n    }\n    return true;\n  }\n\n  get displayValue() {\n    const labels = [];\n\n    for (const rawValue of this._choiceValues) {\n      const choice = this.element.choiceByValue(rawValue);\n\n      const label = (choice != null ? choice.label : rawValue);\n\n      if (TextUtils.isPresent(label)) {\n        labels.push(label);\n      }\n    }\n\n    for (const otherValue of this._otherValues) {\n      labels.push(otherValue);\n    }\n\n    return labels.join(ChoiceDisplaySeparator);\n  }\n\n  get searchableValue() {\n    const values = [];\n\n    for (const rawValue of this._choiceValues) {\n      const choice = this.element.choiceByValue(rawValue);\n\n      if (choice != null) {\n        values.push(choice.label);\n        values.push(choice.value);\n      } else {\n        values.push(rawValue);\n      }\n    }\n\n    for (const otherValue of this._otherValues) {\n      values.push(otherValue);\n    }\n\n    return values.join(ChoiceSearchSeparator);\n  }\n\n  get length() {\n    return this._choiceValues.length + this._otherValues.length;\n  }\n\n  toJSON() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const choiceValues = [];\n    const otherValues = [];\n\n    for (const rawValue of this._choiceValues) {\n      choiceValues.push(rawValue);\n    }\n\n    for (const otherValue of this._otherValues) {\n      otherValues.push(otherValue);\n    }\n\n    return {\n      choice_values: choiceValues,\n      other_values: otherValues\n    };\n  }\n\n  get columnValue() {\n    const allValues = [];\n\n    for (const rawValue of this._choiceValues) {\n      allValues.push(rawValue);\n    }\n\n    for (const otherValue of this._otherValues) {\n      allValues.push(otherValue);\n    }\n\n    if (allValues.length === 0) {\n      return null;\n    }\n\n    if (!this.element.multiple) {\n      return allValues[0];\n    }\n\n    return allValues;\n  }\n\n  get multipleValues() {\n    return null;\n  }\n\n  get hasOtherValue() {\n    return this._otherValues.length !== 0;\n  }\n\n  get selectedValues() {\n    return this._choiceValues.slice();\n  }\n\n  set selectedValues(values) {\n    this._choiceValues = (values || []).slice();\n  }\n\n  get otherValues() {\n    return this._otherValues.slice();\n  }\n\n  set otherValues(values) {\n    this._otherValues = (values || []).slice();\n  }\n\n  get otherValue() {\n    if (!this.hasOtherValue) {\n      return null;\n    }\n\n    return this._otherValues[0];\n  }\n\n  isEqual(value) {\n    if (includes(this.selectedValues, value)) {\n      return true;\n    }\n\n    return this.otherValue === value;\n  }\n\n  contains(value) {\n    return this.isEqual(value);\n  }\n\n  startsWith(value) {\n    return this.contains(value);\n  }\n\n  // isLessThan(value) {\n  //   notImplemented();\n  // }\n\n  // isGreaterThan(value) {\n  //   notImplemented();\n  // }\n}\n"]}