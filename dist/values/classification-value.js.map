{"version":3,"sources":["../../src/values/classification-value.js"],"names":[],"mappings":"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","file":"classification-value.js","sourcesContent":["import FormValue from './form-value';\nimport TextUtils from '../utils/text-utils';\nimport Classification from '../elements/classification';\n\nconst DisplaySeparator = ' â–¸ ';\n\nconst SearchSeparator = ' ';\n\nexport default class ClassificationValue extends FormValue {\n  constructor(element, attributes) {\n    super(element, attributes);\n\n    this._choiceValues = [];\n    this._otherValues = [];\n\n    if (attributes) {\n      if (attributes.choice_values) {\n        for (const choice of attributes.choice_values) {\n          if (TextUtils.isPresent(choice)) {\n            this._choiceValues.push(choice);\n          }\n        }\n      }\n\n      if (attributes.other_values) {\n        for (const choice of attributes.other_values) {\n          if (TextUtils.isPresent(choice)) {\n            this._otherValues.push(choice);\n          }\n        }\n      }\n    }\n  }\n\n  get isEmpty() {\n    if (this._choiceValues.length) {\n      return false;\n    }\n\n    if (this._otherValues.length) {\n      return false;\n    }\n\n    return true;\n  }\n\n  isEqual(value) {\n    const classification = this.selectedClassification;\n\n    const choiceValues = classification ? classification.toJSON() : null;\n\n    const ESCAPED = /\\\\,/g;\n\n    const parts = value.replace(ESCAPED, '\\t\\t').split(',').map(part => part.replace(/\\t\\t/g, ','));\n\n    let allMatchSoFar = false;\n\n    let partIndex = 0;\n\n    for (const part of parts) {\n      if (part != null && choiceValues && partIndex < choiceValues.length &&\n          choiceValues[partIndex].toLowerCase() === part.replace(ESCAPED, ',').toLowerCase()) {\n        allMatchSoFar = true;\n      } else {\n        allMatchSoFar = false;\n        break;\n      }\n\n      ++partIndex;\n    }\n\n    return allMatchSoFar;\n  }\n\n  contains(value) {\n    return this.isEqual(value);\n  }\n\n  startsWith(value) {\n    return this.contains(value);\n  }\n\n  get displayValue() {\n    const values = [];\n\n    const classification = this.selectedClassification;\n\n    if (classification) {\n      for (const item of classification.exploded) {\n        if (item.label) {\n          values.push(item.label);\n        }\n      }\n    }\n\n    if (this.hasOtherValue) {\n      values.push(this.otherValue);\n    }\n\n    return values.join(DisplaySeparator);\n  }\n\n  get searchableValue() {\n    const values = [];\n\n    const classification = this.selectedClassification;\n\n    if (classification) {\n      for (const item of classification.exploded) {\n        if (item.label) {\n          values.push(item.label);\n        }\n\n        if (item.value && item.value !== item.label) {\n          values.push(item.value);\n        }\n      }\n    }\n\n    if (this.hasOtherValue) {\n      values.push(this.otherValue);\n    }\n\n    return values.join(SearchSeparator);\n  }\n\n  get length() {\n    return this._choiceValues.length + this._otherValues.length;\n  }\n\n  toJSON() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const choiceValues = this._choiceValues.slice();\n    const otherValues = this._otherValues.slice();\n\n    return {\n      choice_values: choiceValues,\n      other_values: otherValues\n    };\n  }\n\n  get columnValue() {\n    const allValues = [];\n\n    for (const value of this._choiceValues) {\n      allValues.push(value);\n    }\n\n    for (const value of this._otherValues) {\n      allValues.push(value);\n    }\n\n    if (allValues.length === 0) {\n      return null;\n    }\n\n    return allValues;\n  }\n\n  get multipleValues() {\n    return null;\n  }\n\n  get hasOtherValue() {\n    return this._otherValues.length !== 0;\n  }\n\n  get otherValue() {\n    if (!this.hasOtherValue) {\n      return null;\n    }\n\n    return this._otherValues[0];\n  }\n\n  set otherValue(value) {\n    if (value && value.length) {\n      this._otherValues = [ value ];\n    } else {\n      this._otherValues = [];\n    }\n  }\n\n  get selectedClassification() {\n    let result = null;\n\n    if (this._choiceValues.length === 0) {\n      return null;\n    }\n\n    let currentClassifications = this.element.classificationItems;\n\n    for (const classificationValue of this._choiceValues) {\n      for (const classification of currentClassifications) {\n        if (classification.value === classificationValue) {\n          result = classification;\n          currentClassifications = classification.items;\n          break;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  setSelectedClassification(classification, otherValue) {\n    if (classification instanceof Classification) {\n      this.setSelectedClassificationJSON(classification.toJSON(), otherValue);\n    } else {\n      this.setSelectedClassificationJSON(null, otherValue);\n    }\n  }\n\n  setSelectedClassificationJSON(classificationAsJSON, otherValue) {\n    if (classificationAsJSON && classificationAsJSON.length) {\n      this._choiceValues = classificationAsJSON;\n    } else {\n      this._choiceValues = [];\n    }\n\n    if (otherValue) {\n      this._otherValues = [ otherValue.toString() ];\n    } else {\n      this._otherValues = [];\n    }\n  }\n}\n"]}