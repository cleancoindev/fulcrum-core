{"version":3,"sources":["../../src/values/classification-value.js"],"names":["DisplaySeparator","SearchSeparator","ClassificationValue","element","attributes","_choiceValues","_otherValues","choice_values","choice","isPresent","push","other_values","isEqual","value","classification","selectedClassification","choiceValues","toJSON","ESCAPED","parts","replace","split","map","part","allMatchSoFar","partIndex","length","toLowerCase","contains","startsWith","format","useDisplayValue","isEmpty","labelStrings","valueStrings","slice","otherValues","toSimpleJSON","labels","strings","setSelectedClassification","otherValue","setSelectedClassificationJSON","classificationAsJSON","toString","exploded","item","label","hasOtherValue","values","join","allValues","result","currentClassifications","classificationItems","classificationValue","items"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;;;AAEA,IAAMA,mBAAmB,KAAzB;;AAEA,IAAMC,kBAAkB,GAAxB;;IAEqBC,mB;;;AACnB,+BAAYC,OAAZ,EAAqBC,UAArB,EAAiC;AAAA;;AAAA,iDAC/B,sBAAMD,OAAN,EAAeC,UAAf,CAD+B;;AAG/B,UAAKC,aAAL,GAAqB,EAArB;AACA,UAAKC,YAAL,GAAoB,EAApB;;AAEA,QAAIF,UAAJ,EAAgB;AACd,UAAIA,WAAWG,aAAf,EAA8B;AAC5B,6BAAqBH,WAAWG,aAAhC,kHAA+C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,cAApCC,MAAoC;;AAC7C,cAAI,oBAAUC,SAAV,CAAoBD,MAApB,CAAJ,EAAiC;AAC/B,kBAAKH,aAAL,CAAmBK,IAAnB,CAAwBF,MAAxB;AACD;AACF;AACF;;AAED,UAAIJ,WAAWO,YAAf,EAA6B;AAC3B,8BAAqBP,WAAWO,YAAhC,yHAA8C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,cAAnCH,OAAmC;;AAC5C,cAAI,oBAAUC,SAAV,CAAoBD,OAApB,CAAJ,EAAiC;AAC/B,kBAAKF,YAAL,CAAkBI,IAAlB,CAAuBF,OAAvB;AACD;AACF;AACF;AACF;AAtB8B;AAuBhC;;gCAcDI,O,oBAAQC,K,EAAO;AACb,QAAMC,iBAAiB,KAAKC,sBAA5B;;AAEA,QAAMC,eAAeF,iBAAiBA,eAAeG,MAAf,EAAjB,GAA2C,IAAhE;;AAEA,QAAMC,UAAU,MAAhB;;AAEA,QAAMC,QAAQN,MAAMO,OAAN,CAAcF,OAAd,EAAuB,MAAvB,EAA+BG,KAA/B,CAAqC,GAArC,EAA0CC,GAA1C,CAA8C;AAAA,aAAQC,KAAKH,OAAL,CAAa,OAAb,EAAsB,GAAtB,CAAR;AAAA,KAA9C,CAAd;;AAEA,QAAII,gBAAgB,KAApB;;AAEA,QAAIC,YAAY,CAAhB;;AAEA,0BAAmBN,KAAnB,yHAA0B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,UAAfI,IAAe;;AACxB,UAAIA,QAAQ,IAAR,IAAgBP,YAAhB,IAAgCS,YAAYT,aAAaU,MAAzD,IACAV,aAAaS,SAAb,EAAwBE,WAAxB,OAA0CJ,KAAKH,OAAL,CAAaF,OAAb,EAAsB,GAAtB,EAA2BS,WAA3B,EAD9C,EACwF;AACtFH,wBAAgB,IAAhB;AACD,OAHD,MAGO;AACLA,wBAAgB,KAAhB;AACA;AACD;;AAED,QAAEC,SAAF;AACD;;AAED,WAAOD,aAAP;AACD,G;;gCAEDI,Q,qBAASf,K,EAAO;AACd,WAAO,KAAKD,OAAL,CAAaC,KAAb,CAAP;AACD,G;;gCAEDgB,U,uBAAWhB,K,EAAO;AAChB,WAAO,KAAKe,QAAL,CAAcf,KAAd,CAAP;AACD,G;;gCAgEDiB,M,0BAAkC;AAAA,sCAA1BC,eAA0B;AAAA,QAA1BA,eAA0B,yCAAR,KAAQ;;AAChC,QAAI,KAAKC,OAAT,EAAkB;AAChB,aAAO,IAAP;AACD;;AAED,WAAOD,kBAAkB,KAAKE,YAAvB,GAAsC,KAAKC,YAAlD;AACD,G;;gCAMDjB,M,qBAAS;AACP,QAAI,KAAKe,OAAT,EAAkB;AAChB,aAAO,IAAP;AACD;;AAED,QAAMhB,eAAe,KAAKX,aAAL,CAAmB8B,KAAnB,EAArB;AACA,QAAMC,cAAc,KAAK9B,YAAL,CAAkB6B,KAAlB,EAApB;;AAEA,WAAO;AACL5B,qBAAeS,YADV;AAELL,oBAAcyB;AAFT,KAAP;AAID,G;;gCAEDC,Y,2BAA4B;AAAA,oFAAJ,EAAI;AAAA,QAAdC,MAAc,SAAdA,MAAc;;AAC1B,QAAI,KAAKN,OAAT,EAAkB;AAChB,aAAO,IAAP;AACD;;AAED,QAAMO,UAAUD,SAAS,KAAKL,YAAd,GAA6B,KAAKC,YAAlD;;AAEA,WAAOK,OAAP;AACD,G;;gCA0DDC,yB,sCAA0B1B,c,EAAgB2B,U,EAAY;AACpD,QAAI3B,kDAAJ,EAA8C;AAC5C,WAAK4B,6BAAL,CAAmC5B,eAAeG,MAAf,EAAnC,EAA4DwB,UAA5D;AACD,KAFD,MAEO;AACL,WAAKC,6BAAL,CAAmC,IAAnC,EAAyCD,UAAzC;AACD;AACF,G;;gCAEDC,6B,0CAA8BC,oB,EAAsBF,U,EAAY;AAC9D,QAAIE,wBAAwBA,qBAAqBjB,MAAjD,EAAyD;AACvD,WAAKrB,aAAL,GAAqBsC,oBAArB;AACD,KAFD,MAEO;AACL,WAAKtC,aAAL,GAAqB,EAArB;AACD;;AAED,QAAIoC,UAAJ,EAAgB;AACd,WAAKnC,YAAL,GAAoB,CAAEmC,WAAWG,QAAX,EAAF,CAApB;AACD,KAFD,MAEO;AACL,WAAKtC,YAAL,GAAoB,EAApB;AACD;AACF,G;;;;wBA9Na;AACZ,UAAI,KAAKD,aAAL,CAAmBqB,MAAvB,EAA+B;AAC7B,eAAO,KAAP;AACD;;AAED,UAAI,KAAKpB,YAAL,CAAkBoB,MAAtB,EAA8B;AAC5B,eAAO,KAAP;AACD;;AAED,aAAO,IAAP;AACD;;;wBAsCkB;AACjB,UAAMY,SAAS,EAAf;;AAEA,UAAMxB,iBAAiB,KAAKC,sBAA5B;;AAEA,UAAID,cAAJ,EAAoB;AAClB,8BAAmBA,eAAe+B,QAAlC,yHAA4C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,cAAjCC,IAAiC;;AAC1C,cAAIA,KAAKC,KAAT,EAAgB;AACdT,mBAAO5B,IAAP,CAAYoC,KAAKC,KAAjB;AACD;AACF;AACF;;AAED,UAAI,KAAKC,aAAT,EAAwB;AACtBV,eAAO5B,IAAP,CAAY,KAAK+B,UAAjB;AACD;;AAED,aAAOH,MAAP;AACD;;;wBAEkB;AACjB,UAAMW,SAAS,EAAf;;AAEA,4BAAoB,KAAK5C,aAAzB,yHAAwC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,YAA7BQ,KAA6B;;AACtCoC,eAAOvC,IAAP,CAAYG,KAAZ;AACD;;AAED,4BAAoB,KAAKP,YAAzB,yHAAuC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,YAA5BO,MAA4B;;AACrCoC,eAAOvC,IAAP,CAAYG,MAAZ;AACD;;AAED,aAAOoC,MAAP;AACD;;;wBAEkB;AACjB,aAAO,KAAKhB,YAAL,CAAkBiB,IAAlB,CAAuBlD,gBAAvB,CAAP;AACD;;;wBAEqB;AACpB,UAAMiD,SAAS,EAAf;;AAEA,UAAMnC,iBAAiB,KAAKC,sBAA5B;;AAEA,UAAID,cAAJ,EAAoB;AAClB,8BAAmBA,eAAe+B,QAAlC,yHAA4C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,cAAjCC,IAAiC;;AAC1C,cAAIA,KAAKC,KAAT,EAAgB;AACdE,mBAAOvC,IAAP,CAAYoC,KAAKC,KAAjB;AACD;;AAED,cAAID,KAAKjC,KAAL,IAAciC,KAAKjC,KAAL,KAAeiC,KAAKC,KAAtC,EAA6C;AAC3CE,mBAAOvC,IAAP,CAAYoC,KAAKjC,KAAjB;AACD;AACF;AACF;;AAED,UAAI,KAAKmC,aAAT,EAAwB;AACtBC,eAAOvC,IAAP,CAAY,KAAK+B,UAAjB;AACD;;AAED,aAAOQ,OAAOC,IAAP,CAAYjD,eAAZ,CAAP;AACD;;;wBAUY;AACX,aAAO,KAAKI,aAAL,CAAmBqB,MAAnB,GAA4B,KAAKpB,YAAL,CAAkBoB,MAArD;AACD;;;wBA0BiB;AAChB,UAAMyB,YAAY,KAAKjB,YAAvB;;AAEA,UAAIiB,UAAUzB,MAAV,KAAqB,CAAzB,EAA4B;AAC1B,eAAO,IAAP;AACD;;AAED,aAAOyB,SAAP;AACD;;;wBAEoB;AACnB,aAAO,IAAP;AACD;;;wBAEmB;AAClB,aAAO,KAAK7C,YAAL,CAAkBoB,MAAlB,KAA6B,CAApC;AACD;;;wBAEgB;AACf,UAAI,CAAC,KAAKsB,aAAV,EAAyB;AACvB,eAAO,IAAP;AACD;;AAED,aAAO,KAAK1C,YAAL,CAAkB,CAAlB,CAAP;AACD,K;sBAEcO,K,EAAO;AACpB,UAAIA,SAASA,MAAMa,MAAnB,EAA2B;AACzB,aAAKpB,YAAL,GAAoB,CAAEO,KAAF,CAApB;AACD,OAFD,MAEO;AACL,aAAKP,YAAL,GAAoB,EAApB;AACD;AACF;;;wBAE4B;AAC3B,UAAI8C,SAAS,IAAb;;AAEA,UAAI,KAAK/C,aAAL,CAAmBqB,MAAnB,KAA8B,CAAlC,EAAqC;AACnC,eAAO,IAAP;AACD;;AAED,UAAI2B,yBAAyB,KAAKlD,OAAL,CAAamD,mBAA1C;;AAEA,4BAAkC,KAAKjD,aAAvC,yHAAsD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,YAA3CkD,mBAA2C;;AACpD,8BAA6BF,sBAA7B,yHAAqD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,cAA1CvC,cAA0C;;AACnD,cAAIA,eAAeD,KAAf,KAAyB0C,mBAA7B,EAAkD;AAChDH,qBAAStC,cAAT;AACAuC,qCAAyBvC,eAAe0C,KAAxC;AACA;AACD;AACF;AACF;;AAED,aAAOJ,MAAP;AACD;;;;;;kBAlOkBlD,mB","file":"classification-value.js","sourcesContent":["import FormValue from './form-value';\nimport TextUtils from '../utils/text-utils';\nimport Classification from '../elements/classification';\n\nconst DisplaySeparator = ' â–¸ ';\n\nconst SearchSeparator = ' ';\n\nexport default class ClassificationValue extends FormValue {\n  constructor(element, attributes) {\n    super(element, attributes);\n\n    this._choiceValues = [];\n    this._otherValues = [];\n\n    if (attributes) {\n      if (attributes.choice_values) {\n        for (const choice of attributes.choice_values) {\n          if (TextUtils.isPresent(choice)) {\n            this._choiceValues.push(choice);\n          }\n        }\n      }\n\n      if (attributes.other_values) {\n        for (const choice of attributes.other_values) {\n          if (TextUtils.isPresent(choice)) {\n            this._otherValues.push(choice);\n          }\n        }\n      }\n    }\n  }\n\n  get isEmpty() {\n    if (this._choiceValues.length) {\n      return false;\n    }\n\n    if (this._otherValues.length) {\n      return false;\n    }\n\n    return true;\n  }\n\n  isEqual(value) {\n    const classification = this.selectedClassification;\n\n    const choiceValues = classification ? classification.toJSON() : null;\n\n    const ESCAPED = /\\\\,/g;\n\n    const parts = value.replace(ESCAPED, '\\t\\t').split(',').map(part => part.replace(/\\t\\t/g, ','));\n\n    let allMatchSoFar = false;\n\n    let partIndex = 0;\n\n    for (const part of parts) {\n      if (part != null && choiceValues && partIndex < choiceValues.length &&\n          choiceValues[partIndex].toLowerCase() === part.replace(ESCAPED, ',').toLowerCase()) {\n        allMatchSoFar = true;\n      } else {\n        allMatchSoFar = false;\n        break;\n      }\n\n      ++partIndex;\n    }\n\n    return allMatchSoFar;\n  }\n\n  contains(value) {\n    return this.isEqual(value);\n  }\n\n  startsWith(value) {\n    return this.contains(value);\n  }\n\n  get labelStrings() {\n    const labels = [];\n\n    const classification = this.selectedClassification;\n\n    if (classification) {\n      for (const item of classification.exploded) {\n        if (item.label) {\n          labels.push(item.label);\n        }\n      }\n    }\n\n    if (this.hasOtherValue) {\n      labels.push(this.otherValue);\n    }\n\n    return labels;\n  }\n\n  get valueStrings() {\n    const values = [];\n\n    for (const value of this._choiceValues) {\n      values.push(value);\n    }\n\n    for (const value of this._otherValues) {\n      values.push(value);\n    }\n\n    return values;\n  }\n\n  get displayValue() {\n    return this.labelStrings.join(DisplaySeparator);\n  }\n\n  get searchableValue() {\n    const values = [];\n\n    const classification = this.selectedClassification;\n\n    if (classification) {\n      for (const item of classification.exploded) {\n        if (item.label) {\n          values.push(item.label);\n        }\n\n        if (item.value && item.value !== item.label) {\n          values.push(item.value);\n        }\n      }\n    }\n\n    if (this.hasOtherValue) {\n      values.push(this.otherValue);\n    }\n\n    return values.join(SearchSeparator);\n  }\n\n  format({useDisplayValue = false}) {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    return useDisplayValue ? this.labelStrings : this.valueStrings;\n  }\n\n  get length() {\n    return this._choiceValues.length + this._otherValues.length;\n  }\n\n  toJSON() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const choiceValues = this._choiceValues.slice();\n    const otherValues = this._otherValues.slice();\n\n    return {\n      choice_values: choiceValues,\n      other_values: otherValues\n    };\n  }\n\n  toSimpleJSON({labels} = {}) {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const strings = labels ? this.labelStrings : this.valueStrings;\n\n    return strings;\n  }\n\n  get columnValue() {\n    const allValues = this.valueStrings;\n\n    if (allValues.length === 0) {\n      return null;\n    }\n\n    return allValues;\n  }\n\n  get multipleValues() {\n    return null;\n  }\n\n  get hasOtherValue() {\n    return this._otherValues.length !== 0;\n  }\n\n  get otherValue() {\n    if (!this.hasOtherValue) {\n      return null;\n    }\n\n    return this._otherValues[0];\n  }\n\n  set otherValue(value) {\n    if (value && value.length) {\n      this._otherValues = [ value ];\n    } else {\n      this._otherValues = [];\n    }\n  }\n\n  get selectedClassification() {\n    let result = null;\n\n    if (this._choiceValues.length === 0) {\n      return null;\n    }\n\n    let currentClassifications = this.element.classificationItems;\n\n    for (const classificationValue of this._choiceValues) {\n      for (const classification of currentClassifications) {\n        if (classification.value === classificationValue) {\n          result = classification;\n          currentClassifications = classification.items;\n          break;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  setSelectedClassification(classification, otherValue) {\n    if (classification instanceof Classification) {\n      this.setSelectedClassificationJSON(classification.toJSON(), otherValue);\n    } else {\n      this.setSelectedClassificationJSON(null, otherValue);\n    }\n  }\n\n  setSelectedClassificationJSON(classificationAsJSON, otherValue) {\n    if (classificationAsJSON && classificationAsJSON.length) {\n      this._choiceValues = classificationAsJSON;\n    } else {\n      this._choiceValues = [];\n    }\n\n    if (otherValue) {\n      this._otherValues = [ otherValue.toString() ];\n    } else {\n      this._otherValues = [];\n    }\n  }\n}\n"]}