{"version":3,"sources":["../../src/values/classification-value.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAIA,MAAM,gBAAgB,GAAG,KAAK,CAAC;;AAE/B,MAAM,eAAe,GAAG,GAAG,CAAC;;AAEb,MAAM,mBAAmB,6BAAmB;AACzD,aAAW,CAAC,OAAO,EAAE,UAAU,EAAE;AAC/B,SAAK,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;;AAE3B,QAAI,CAAC,aAAa,GAAG,EAAE,CAAC;AACxB,QAAI,CAAC,YAAY,GAAG,EAAE,CAAC;;AAEvB,SAAK,IAAI,MAAM,IAAI,UAAU,CAAC,aAAa,EAAE;AAC3C,UAAI,oBAAU,SAAS,CAAC,MAAM,CAAC,EAAE;AAC/B,YAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;OACjC;KACF;;AAED,SAAK,IAAI,MAAM,IAAI,UAAU,CAAC,YAAY,EAAE;AAC1C,UAAI,oBAAU,SAAS,CAAC,MAAM,CAAC,EAAE;AAC/B,YAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;OAChC;KACF;GACF;;AAED,MAAI,OAAO,GAAG;AACZ,QAAI,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE;AAC7B,aAAO,KAAK,CAAC;KACd;;AAED,QAAI,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;AAC5B,aAAO,KAAK,CAAC;KACd;;AAED,WAAO,IAAI,CAAC;GACb;;AAED,MAAI,YAAY,GAAG;AACjB,UAAM,MAAM,GAAG,EAAE,CAAC;;AAElB,UAAM,cAAc,GAAG,IAAI,CAAC,sBAAsB,CAAC;;AAEnD,QAAI,cAAc,EAAE;AAClB,WAAK,IAAI,IAAI,IAAI,cAAc,CAAC,QAAQ,EAAE;AACxC,YAAI,IAAI,CAAC,KAAK,EAAE;AACd,gBAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACzB;OACF;KACF;;AAED,QAAI,IAAI,CAAC,aAAa,EAAE;AACtB,YAAM,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KAC9B;;AAED,WAAO,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;GACtC;;AAED,MAAI,eAAe,GAAG;AACpB,UAAM,MAAM,GAAG,EAAE,CAAC;;AAElB,UAAM,cAAc,GAAG,IAAI,CAAC,sBAAsB,CAAC;;AAEnD,QAAI,cAAc,EAAE;AAClB,WAAK,IAAI,IAAI,IAAI,cAAc,CAAC,QAAQ,EAAE;AACxC,YAAI,IAAI,CAAC,KAAK,EAAE;AACd,gBAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACzB;;AAED,YAAI,IAAI,CAAC,KAAK,EAAE;AACd,gBAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACzB;OACF;KACF;;AAED,QAAI,IAAI,CAAC,aAAa,EAAE;AACtB,YAAM,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KAC9B;;AAED,WAAO,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;GACrC;;AAED,MAAI,MAAM,GAAG;AACX,WAAO,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC;GAC7D;;AAED,QAAM,GAAG;AACP,QAAI,IAAI,CAAC,OAAO,EAAE;AAChB,aAAO,IAAI,CAAC;KACb;;AAED,UAAM,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;AAChD,UAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;;AAE9C,WAAO;AACL,mBAAa,EAAE,YAAY;AAC3B,kBAAY,EAAE,WAAW;KAC1B,CAAC;GACH;;AAED,MAAI,WAAW,GAAG;AAChB,UAAM,SAAS,GAAG,EAAE,CAAC;;AAErB,SAAK,IAAI,KAAK,IAAI,IAAI,CAAC,aAAa,EAAE;AACpC,eAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACvB;;AAED,SAAK,IAAI,KAAK,IAAI,IAAI,CAAC,YAAY,EAAE;AACnC,eAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACvB;;AAED,QAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;AAC1B,aAAO,IAAI,CAAC;KACb;;AAED,WAAO,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;GAC7B;;AAED,MAAI,cAAc,GAAG;AACnB,WAAO,IAAI,CAAC;GACb;;AAED,MAAI,aAAa,GAAG;AAClB,WAAO,IAAI,CAAC,YAAY,CAAC,MAAM,KAAK,CAAC,CAAC;GACvC;;AAED,MAAI,UAAU,GAAG;AACf,QAAI,CAAC,IAAI,CAAC,aAAa,EAAE;AACvB,aAAO,IAAI,CAAC;KACb;;AAED,WAAO,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;GAC7B;;AAED,MAAI,sBAAsB,GAAG;AAC3B,QAAI,MAAM,GAAG,IAAI,CAAC;;AAElB,QAAI,IAAI,CAAC,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE;AACnC,aAAO,IAAI,CAAC;KACb;;AAED,QAAI,sBAAsB,GAAG,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC;;AAE9D,SAAK,IAAI,mBAAmB,IAAI,IAAI,CAAC,aAAa,EAAE;AAClD,WAAK,IAAI,cAAc,IAAI,sBAAsB,EAAE;AACjD,YAAI,cAAc,CAAC,KAAK,KAAK,mBAAmB,EAAE;AAChD,gBAAM,GAAG,cAAc,CAAC;AACxB,gCAAsB,GAAG,cAAc,CAAC,QAAQ,CAAC;AACjD,gBAAM;SACP;OACF;KACF;;AAED,WAAO,MAAM,CAAC;GACf;;AAED,2BAAyB,CAAC,cAAc,EAAE,UAAU,EAAE;AACpD,QAAI,cAAc,oCAA0B,EAAE;AAC5C,UAAI,CAAC,aAAa,GAAG,cAAc,CAAC,MAAM,EAAE,CAAC;KAC9C,MAAM;AACL,UAAI,CAAC,aAAa,GAAG,EAAE,CAAC;KACzB;;AAED,QAAI,UAAU,EAAE;AACd,UAAI,CAAC,YAAY,GAAG,CAAE,UAAU,CAAC,QAAQ,EAAE,CAAE,CAAC;KAC/C,MAAM;AACL,UAAI,CAAC,WAAW,GAAG,EAAE,CAAC;KACvB;GACF;CACF;kBAnKoB,mBAAmB","file":"classification-value.js","sourcesContent":["import FormValue from './form-value';\nimport TextUtils from '../utils/text-utils';\nimport Classification from '../elements/classification';\n\nconst DisplaySeparator = ' â–¸ ';\n\nconst SearchSeparator = ' ';\n\nexport default class ClassificationValue extends FormValue {\n  constructor(element, attributes) {\n    super(element, attributes);\n\n    this._choiceValues = [];\n    this._otherValues = [];\n\n    for (let choice of attributes.choice_values) {\n      if (TextUtils.isPresent(choice)) {\n        this._choiceValues.push(choice);\n      }\n    }\n\n    for (let choice of attributes.other_values) {\n      if (TextUtils.isPresent(choice)) {\n        this._otherValues.push(choice);\n      }\n    }\n  }\n\n  get isEmpty() {\n    if (this._choiceValues.length) {\n      return false;\n    }\n\n    if (this._otherValues.length) {\n      return false;\n    }\n\n    return true;\n  }\n\n  get displayValue() {\n    const values = [];\n\n    const classification = this.selectedClassification;\n\n    if (classification) {\n      for (let item of classification.exploded) {\n        if (item.label) {\n          values.push(item.label);\n        }\n      }\n    }\n\n    if (this.hasOtherValue) {\n      values.push(this.otherValue);\n    }\n\n    return values.join(DisplaySeparator);\n  }\n\n  get searchableValue() {\n    const values = [];\n\n    const classification = this.selectedClassification;\n\n    if (classification) {\n      for (let item of classification.exploded) {\n        if (item.label) {\n          values.push(item.label);\n        }\n\n        if (item.value) {\n          values.push(item.value);\n        }\n      }\n    }\n\n    if (this.hasOtherValue) {\n      values.push(this.otherValue);\n    }\n\n    return values.join(SearchSeparator);\n  }\n\n  get length() {\n    return this._choiceValues.length + this._otherValues.length;\n  }\n\n  toJSON() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const choiceValues = this._choiceValues.slice();\n    const otherValues = this._otherValues.slice();\n\n    return {\n      choice_values: choiceValues,\n      other_values: otherValues\n    };\n  }\n\n  get columnValue() {\n    const allValues = [];\n\n    for (let value of this._choiceValues) {\n      allValues.push(value);\n    }\n\n    for (let value of this._otherValues) {\n      allValues.push(value);\n    }\n\n    if (allValues.length === 0) {\n      return null;\n    }\n\n    return allValues.join('\\t');\n  }\n\n  get multipleValues() {\n    return null;\n  }\n\n  get hasOtherValue() {\n    return this._otherValues.length !== 0;\n  }\n\n  get otherValue() {\n    if (!this.hasOtherValue) {\n      return null;\n    }\n\n    return this._otherValues[0];\n  }\n\n  get selectedClassification() {\n    let result = null;\n\n    if (this._choiceValues.length === 0) {\n      return null;\n    }\n\n    let currentClassifications = this.element.classificationItems;\n\n    for (let classificationValue of this._choiceValues) {\n      for (let classification of currentClassifications) {\n        if (classification.value === classificationValue) {\n          result = classification;\n          currentClassifications = classification.children;\n          break;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  setSelectedClassification(classification, otherValue) {\n    if (classification instanceof Classification) {\n      this._choiceValues = classification.toJSON();\n    } else {\n      this._choiceValues = [];\n    }\n\n    if (otherValue) {\n      this._otherValues = [ otherValue.toString() ];\n    } else {\n      this._otherVaues = [];\n    }\n  }\n}\n"]}