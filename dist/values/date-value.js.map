{"version":3,"sources":["../../src/values/date-value.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;IAIqB,SAAS;YAAT,SAAS;;AAC5B,WADmB,SAAS,CAChB,OAAO,EAAE,KAAK,EAAE;0BADT,SAAS;;kEAAT,SAAS,aAEpB,OAAO,EAAE,KAAK;GACrB;;eAHkB,SAAS;;+BAuBjB,WAAW,EAAE;AACtB,UAAI,IAAI,CAAC,OAAO,EAAE;AAChB,eAAO,oBAAU,OAAO,CAAC,WAAW,CAAC,CAAC;OACvC;;AAED,UAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;AAClC,UAAM,QAAQ,GAAG,oBAAU,SAAS,CAAC,WAAW,CAAC,CAAC;;AAElD,UAAI,QAAQ,IAAI,IAAI,IAAI,QAAQ,IAAI,IAAI,EAAE;AACxC,eAAO,KAAK,CAAC;OACd;;AAED,aAAO,QAAQ,CAAC,OAAO,EAAE,GAAG,QAAQ,CAAC,OAAO,EAAE,CAAC;KAChD;;;kCAEa,WAAW,EAAE;AACzB,UAAI,IAAI,CAAC,OAAO,EAAE;AAChB,eAAO,oBAAU,OAAO,CAAC,WAAW,CAAC,CAAC;OACvC;;AAED,UAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;AAClC,UAAM,QAAQ,GAAG,oBAAU,SAAS,CAAC,WAAW,CAAC,CAAC;;AAElD,UAAI,QAAQ,IAAI,IAAI,IAAI,QAAQ,IAAI,IAAI,EAAE;AACxC,eAAO,KAAK,CAAC;OACd;;AAED,aAAO,QAAQ,CAAC,OAAO,EAAE,GAAG,QAAQ,CAAC,OAAO,EAAE,CAAC;KAChD;;;wBA9CkB;AACjB,UAAI,IAAI,CAAC,OAAO,EAAE;AAChB,eAAO,IAAI,CAAC;OACb;;AAED,UAAM,IAAI,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;;AAE9B,UAAI,IAAI,IAAI,IAAI,EAAE;AAChB,eAAO,IAAI,CAAC;OACb;;AAED,aAAO,oBAAU,mBAAmB,CAAC,IAAI,CAAC,CAAC;KAC5C;;;wBAEqB;AACpB,aAAO,IAAI,CAAC,SAAS,CAAC;KACvB;;;wBAgCe;AACd,aAAO,oBAAU,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KAC5C;;;SAvDkB,SAAS;;;kBAAT,SAAS","file":"date-value.js","sourcesContent":["import TextualValue from './textual-value';\nimport DateUtils from '../utils/date-utils';\nimport TextUtils from '../utils/text-utils';\n\nexport default class DateValue extends TextualValue {\n  constructor(element, value) {\n    super(element, value);\n  }\n\n  get displayValue() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const date = this.dateValue();\n\n    if (date == null) {\n      return null;\n    }\n\n    return DateUtils.formatLocalizedDate(date);\n  }\n\n  get searchableValue() {\n    return this.textValue;\n  }\n\n  isLessThan(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    const thisDate = this.dateValue();\n    const thatDate = DateUtils.parseDate(stringValue);\n\n    if (thisDate == null || thatDate == null) {\n      return false;\n    }\n\n    return thisDate.getTime() < thatDate.getTime();\n  }\n\n  isGreaterThan(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    const thisDate = this.dateValue();\n    const thatDate = DateUtils.parseDate(stringValue);\n\n    if (thisDate == null || thatDate == null) {\n      return false;\n    }\n\n    return thisDate.getTime() > thatDate.getTime();\n  }\n\n  get dateValue() {\n    return DateUtils.parseDate(this.textValue);\n  }\n}\n"]}