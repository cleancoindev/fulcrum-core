{"version":3,"sources":["../../src/values/date-value.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;IAIqB;;;AACnB,WADmB,SACnB,CAAY,OAAZ,EAAqB,KAArB,EAA4B;0BADT,WACS;;kEADT,sBAEX,SAAS,QADW;GAA5B;;eADmB;;+BAuBR,aAAa;AACtB,UAAI,KAAK,OAAL,EAAc;AAChB,eAAO,oBAAU,OAAV,CAAkB,WAAlB,CAAP,CADgB;OAAlB;;AAIA,UAAM,WAAW,KAAK,SAAL,CALK;AAMtB,UAAM,WAAW,oBAAU,SAAV,CAAoB,WAApB,CAAX,CANgB;;AAQtB,UAAI,YAAY,IAAZ,IAAoB,YAAY,IAAZ,EAAkB;AACxC,eAAO,KAAP,CADwC;OAA1C;;AAIA,aAAO,SAAS,OAAT,KAAqB,SAAS,OAAT,EAArB,CAZe;;;;kCAeV,aAAa;AACzB,UAAI,KAAK,OAAL,EAAc;AAChB,eAAO,oBAAU,OAAV,CAAkB,WAAlB,CAAP,CADgB;OAAlB;;AAIA,UAAM,WAAW,KAAK,SAAL,CALQ;AAMzB,UAAM,WAAW,oBAAU,SAAV,CAAoB,WAApB,CAAX,CANmB;;AAQzB,UAAI,YAAY,IAAZ,IAAoB,YAAY,IAAZ,EAAkB;AACxC,eAAO,KAAP,CADwC;OAA1C;;AAIA,aAAO,SAAS,OAAT,KAAqB,SAAS,OAAT,EAArB,CAZkB;;;;wBAjCR;AACjB,UAAI,KAAK,OAAL,EAAc;AAChB,eAAO,IAAP,CADgB;OAAlB;;AAIA,UAAM,OAAO,KAAK,SAAL,CALI;;AAOjB,UAAI,QAAQ,IAAR,EAAc;AAChB,eAAO,IAAP,CADgB;OAAlB;;AAIA,aAAO,oBAAU,mBAAV,CAA8B,IAA9B,CAAP,CAXiB;;;;wBAcG;AACpB,aAAO,KAAK,SAAL,CADa;;;;wBAkCN;AACd,aAAO,oBAAU,SAAV,CAAoB,KAAK,SAAL,CAA3B,CADc;;;;SArDG","file":"date-value.js","sourcesContent":["import TextualValue from './textual-value';\nimport DateUtils from '../utils/date-utils';\nimport TextUtils from '../utils/text-utils';\n\nexport default class DateValue extends TextualValue {\n  constructor(element, value) {\n    super(element, value);\n  }\n\n  get displayValue() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const date = this.dateValue;\n\n    if (date == null) {\n      return null;\n    }\n\n    return DateUtils.formatLocalizedDate(date);\n  }\n\n  get searchableValue() {\n    return this.textValue;\n  }\n\n  isLessThan(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    const thisDate = this.dateValue;\n    const thatDate = DateUtils.parseDate(stringValue);\n\n    if (thisDate == null || thatDate == null) {\n      return false;\n    }\n\n    return thisDate.getTime() < thatDate.getTime();\n  }\n\n  isGreaterThan(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    const thisDate = this.dateValue;\n    const thatDate = DateUtils.parseDate(stringValue);\n\n    if (thisDate == null || thatDate == null) {\n      return false;\n    }\n\n    return thisDate.getTime() > thatDate.getTime();\n  }\n\n  get dateValue() {\n    return DateUtils.parseDate(this.textValue);\n  }\n}\n"]}