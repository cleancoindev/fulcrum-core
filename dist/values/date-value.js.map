{"version":3,"sources":["../../src/values/date-value.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;;;IAEqB,S;;;AACnB,qBAAY,OAAZ,EAAqB,KAArB,EAA4B;AAAA;;AAAA,4CAC1B,yBAAM,OAAN,EAAe,KAAf,CAD0B;AAE3B;;sBAoBD,U,uBAAW,W,EAAa;AACtB,QAAI,KAAK,OAAT,EAAkB;AAChB,aAAO,oBAAU,OAAV,CAAkB,WAAlB,CAAP;AACD;;AAED,QAAM,WAAW,KAAK,SAAtB;AACA,QAAM,WAAW,oBAAU,SAAV,CAAoB,WAApB,CAAjB;;AAEA,QAAI,YAAY,IAAZ,IAAoB,YAAY,IAApC,EAA0C;AACxC,aAAO,KAAP;AACD;;AAED,WAAO,SAAS,OAAT,KAAqB,SAAS,OAAT,EAA5B;AACD,G;;sBAED,a,0BAAc,W,EAAa;AACzB,QAAI,KAAK,OAAT,EAAkB;AAChB,aAAO,oBAAU,OAAV,CAAkB,WAAlB,CAAP;AACD;;AAED,QAAM,WAAW,KAAK,SAAtB;AACA,QAAM,WAAW,oBAAU,SAAV,CAAoB,WAApB,CAAjB;;AAEA,QAAI,YAAY,IAAZ,IAAoB,YAAY,IAApC,EAA0C;AACxC,aAAO,KAAP;AACD;;AAED,WAAO,SAAS,OAAT,KAAqB,SAAS,OAAT,EAA5B;AACD,G;;;;wBA9CkB;AACjB,UAAI,KAAK,OAAT,EAAkB;AAChB,eAAO,IAAP;AACD;;AAED,UAAM,OAAO,KAAK,SAAlB;;AAEA,UAAI,QAAQ,IAAZ,EAAkB;AAChB,eAAO,IAAP;AACD;;AAED,aAAO,oBAAU,mBAAV,CAA8B,IAA9B,CAAP;AACD;;;wBAEqB;AACpB,aAAO,KAAK,SAAZ;AACD;;;wBAgCa;AACZ,UAAI,KAAK,OAAT,EAAkB;AAChB,eAAO,IAAP;AACD;;AAED,aAAO,oBAAU,WAAV,CAAsB,KAAK,SAA3B,CAAP;AACD;;;wBAEe;AACd,aAAO,oBAAU,SAAV,CAAoB,KAAK,SAAzB,CAAP;AACD;;;wBAEiB;AAChB,UAAI,KAAK,OAAT,EAAkB;AAChB,eAAO,IAAP;AACD;;AAED,UAAM,YAAY,KAAK,SAAL,GAAiB,YAAnC;;AAEA,UAAM,OAAO,oBAAU,iBAAV,CAA4B,SAA5B,CAAb;;AAEA,aAAO,OAAO,KAAK,OAAL,KAAiB,IAAxB,GAA+B,IAAtC;AACD;;;;;;kBA3EkB,S","file":"date-value.js","sourcesContent":["import TextualValue from './textual-value';\nimport DateUtils from '../utils/date-utils';\nimport TextUtils from '../utils/text-utils';\n\nexport default class DateValue extends TextualValue {\n  constructor(element, value) {\n    super(element, value);\n  }\n\n  get displayValue() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const date = this.dateValue;\n\n    if (date == null) {\n      return null;\n    }\n\n    return DateUtils.formatLocalizedDate(date);\n  }\n\n  get searchableValue() {\n    return this.textValue;\n  }\n\n  isLessThan(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    const thisDate = this.dateValue;\n    const thatDate = DateUtils.parseDate(stringValue);\n\n    if (thisDate == null || thatDate == null) {\n      return false;\n    }\n\n    return thisDate.getTime() < thatDate.getTime();\n  }\n\n  isGreaterThan(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    const thisDate = this.dateValue;\n    const thatDate = DateUtils.parseDate(stringValue);\n\n    if (thisDate == null || thatDate == null) {\n      return false;\n    }\n\n    return thisDate.getTime() > thatDate.getTime();\n  }\n\n  get isValid() {\n    if (this.isEmpty) {\n      return true;\n    }\n\n    return DateUtils.isValidDate(this.textValue);\n  }\n\n  get dateValue() {\n    return DateUtils.parseDate(this.textValue);\n  }\n\n  get columnValue() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const timestamp = this.textValue + 'T00:00:00Z';\n\n    const date = DateUtils.parseISOTimestamp(timestamp);\n\n    return date ? date.getTime() / 1000 : null;\n  }\n}\n"]}