{"version":3,"sources":["../../src/values/date-value.js"],"names":["DateValue","isLessThan","stringValue","isEmpty","TextUtils","thisDate","dateValue","thatDate","DateUtils","parseDate","getTime","isGreaterThan","format","useDisplayValue","displayValue","columnValue","date","formatLocalizedDate","textValue","isValidDate","TextualValue"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;;;IAEqBA,S;;;;;;;;;sBAmBnBC,U,uBAAWC,W,EAAa;AACtB,QAAI,KAAKC,OAAT,EAAkB;AAChB,aAAOC,oBAAUD,OAAV,CAAkBD,WAAlB,CAAP;AACD;;AAED,QAAMG,WAAW,KAAKC,SAAtB;AACA,QAAMC,WAAWC,oBAAUC,SAAV,CAAoBP,WAApB,CAAjB;;AAEA,QAAIG,YAAY,IAAZ,IAAoBE,YAAY,IAApC,EAA0C;AACxC,aAAO,KAAP;AACD;;AAED,WAAOF,SAASK,OAAT,KAAqBH,SAASG,OAAT,EAA5B;AACD,G;;sBAEDC,a,0BAAcT,W,EAAa;AACzB,QAAI,KAAKC,OAAT,EAAkB;AAChB,aAAOC,oBAAUD,OAAV,CAAkBD,WAAlB,CAAP;AACD;;AAED,QAAMG,WAAW,KAAKC,SAAtB;AACA,QAAMC,WAAWC,oBAAUC,SAAV,CAAoBP,WAApB,CAAjB;;AAEA,QAAIG,YAAY,IAAZ,IAAoBE,YAAY,IAApC,EAA0C;AACxC,aAAO,KAAP;AACD;;AAED,WAAOF,SAASK,OAAT,KAAqBH,SAASG,OAAT,EAA5B;AACD,G;;sBAcDE,M,yBAAkC;AAAA,oCAA1BC,eAA0B;AAAA,QAA1BA,eAA0B,wCAAR,KAAQ;;AAChC,QAAIA,eAAJ,EAAqB;AACnB,aAAO,KAAKC,YAAZ;AACD;;AAED,WAAO,KAAKC,WAAZ;AACD,G;;;;wBAlEkB;AACjB,UAAI,KAAKZ,OAAT,EAAkB;AAChB,eAAO,IAAP;AACD;;AAED,UAAMa,OAAO,KAAKV,SAAlB;;AAEA,UAAIU,QAAQ,IAAZ,EAAkB;AAChB,eAAO,IAAP;AACD;;AAED,aAAOR,oBAAUS,mBAAV,CAA8BD,IAA9B,CAAP;AACD;;;wBAEqB;AACpB,aAAO,KAAKE,SAAZ;AACD;;;wBAgCa;AACZ,UAAI,KAAKf,OAAT,EAAkB;AAChB,eAAO,IAAP;AACD;;AAED,aAAOK,oBAAUW,WAAV,CAAsB,KAAKD,SAA3B,CAAP;AACD;;;wBAEe;AACd,aAAOV,oBAAUC,SAAV,CAAoB,KAAKS,SAAzB,CAAP;AACD;;;wBAUiB;AAChB,UAAI,KAAKf,OAAT,EAAkB;AAChB,eAAO,IAAP;AACD;;AAED,aAAO,KAAKG,SAAZ;;AAEA;AACA;AACA;AACA;AACA;AACD;;;;EAjFoCc,sB;;kBAAlBpB,S","file":"date-value.js","sourcesContent":["import TextualValue from './textual-value';\nimport DateUtils from '../utils/date-utils';\nimport TextUtils from '../utils/text-utils';\n\nexport default class DateValue extends TextualValue {\n  get displayValue() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const date = this.dateValue;\n\n    if (date == null) {\n      return null;\n    }\n\n    return DateUtils.formatLocalizedDate(date);\n  }\n\n  get searchableValue() {\n    return this.textValue;\n  }\n\n  isLessThan(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    const thisDate = this.dateValue;\n    const thatDate = DateUtils.parseDate(stringValue);\n\n    if (thisDate == null || thatDate == null) {\n      return false;\n    }\n\n    return thisDate.getTime() < thatDate.getTime();\n  }\n\n  isGreaterThan(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    const thisDate = this.dateValue;\n    const thatDate = DateUtils.parseDate(stringValue);\n\n    if (thisDate == null || thatDate == null) {\n      return false;\n    }\n\n    return thisDate.getTime() > thatDate.getTime();\n  }\n\n  get isValid() {\n    if (this.isEmpty) {\n      return true;\n    }\n\n    return DateUtils.isValidDate(this.textValue);\n  }\n\n  get dateValue() {\n    return DateUtils.parseDate(this.textValue);\n  }\n\n  format({useDisplayValue = false}) {\n    if (useDisplayValue) {\n      return this.displayValue;\n    }\n\n    return this.columnValue;\n  }\n\n  get columnValue() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    return this.dateValue;\n\n    // The following code can be used to convert a date to a unix timestamp integer\n    //\n    // const timestamp = this.textValue + 'T00:00:00Z';\n    // const date = DateUtils.parseISOTimestamp(timestamp);\n    // return date ? date.getTime() / 1000 : null;\n  }\n}\n"]}