{"version":3,"sources":["../../src/values/date-value.js"],"names":["DateValue","isLessThan","stringValue","isEmpty","thisDate","dateValue","thatDate","parseDate","getTime","isGreaterThan","date","formatLocalizedDate","textValue","isValidDate"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;;;IAEqBA,S;;;;;;;;;sBAmBnBC,U,uBAAWC,W,EAAa;AACtB,QAAI,KAAKC,OAAT,EAAkB;AAChB,aAAO,oBAAUA,OAAV,CAAkBD,WAAlB,CAAP;AACD;;AAED,QAAME,WAAW,KAAKC,SAAtB;AACA,QAAMC,WAAW,oBAAUC,SAAV,CAAoBL,WAApB,CAAjB;;AAEA,QAAIE,YAAY,IAAZ,IAAoBE,YAAY,IAApC,EAA0C;AACxC,aAAO,KAAP;AACD;;AAED,WAAOF,SAASI,OAAT,KAAqBF,SAASE,OAAT,EAA5B;AACD,G;;sBAEDC,a,0BAAcP,W,EAAa;AACzB,QAAI,KAAKC,OAAT,EAAkB;AAChB,aAAO,oBAAUA,OAAV,CAAkBD,WAAlB,CAAP;AACD;;AAED,QAAME,WAAW,KAAKC,SAAtB;AACA,QAAMC,WAAW,oBAAUC,SAAV,CAAoBL,WAApB,CAAjB;;AAEA,QAAIE,YAAY,IAAZ,IAAoBE,YAAY,IAApC,EAA0C;AACxC,aAAO,KAAP;AACD;;AAED,WAAOF,SAASI,OAAT,KAAqBF,SAASE,OAAT,EAA5B;AACD,G;;;;wBA9CkB;AACjB,UAAI,KAAKL,OAAT,EAAkB;AAChB,eAAO,IAAP;AACD;;AAED,UAAMO,OAAO,KAAKL,SAAlB;;AAEA,UAAIK,QAAQ,IAAZ,EAAkB;AAChB,eAAO,IAAP;AACD;;AAED,aAAO,oBAAUC,mBAAV,CAA8BD,IAA9B,CAAP;AACD;;;wBAEqB;AACpB,aAAO,KAAKE,SAAZ;AACD;;;wBAgCa;AACZ,UAAI,KAAKT,OAAT,EAAkB;AAChB,eAAO,IAAP;AACD;;AAED,aAAO,oBAAUU,WAAV,CAAsB,KAAKD,SAA3B,CAAP;AACD;;;wBAEe;AACd,aAAO,oBAAUL,SAAV,CAAoB,KAAKK,SAAzB,CAAP;AACD;;;wBAEiB;AAChB,UAAI,KAAKT,OAAT,EAAkB;AAChB,eAAO,IAAP;AACD;;AAED,aAAO,KAAKE,SAAZ;;AAEA;AACA;AACA;AACA;AACA;AACD;;;;;;kBAzEkBL,S","file":"date-value.js","sourcesContent":["import TextualValue from './textual-value';\nimport DateUtils from '../utils/date-utils';\nimport TextUtils from '../utils/text-utils';\n\nexport default class DateValue extends TextualValue {\n  get displayValue() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const date = this.dateValue;\n\n    if (date == null) {\n      return null;\n    }\n\n    return DateUtils.formatLocalizedDate(date);\n  }\n\n  get searchableValue() {\n    return this.textValue;\n  }\n\n  isLessThan(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    const thisDate = this.dateValue;\n    const thatDate = DateUtils.parseDate(stringValue);\n\n    if (thisDate == null || thatDate == null) {\n      return false;\n    }\n\n    return thisDate.getTime() < thatDate.getTime();\n  }\n\n  isGreaterThan(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    const thisDate = this.dateValue;\n    const thatDate = DateUtils.parseDate(stringValue);\n\n    if (thisDate == null || thatDate == null) {\n      return false;\n    }\n\n    return thisDate.getTime() > thatDate.getTime();\n  }\n\n  get isValid() {\n    if (this.isEmpty) {\n      return true;\n    }\n\n    return DateUtils.isValidDate(this.textValue);\n  }\n\n  get dateValue() {\n    return DateUtils.parseDate(this.textValue);\n  }\n\n  get columnValue() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    return this.dateValue;\n\n    // The following code can be used to convert a date to a unix timestamp integer\n    //\n    // const timestamp = this.textValue + 'T00:00:00Z';\n    // const date = DateUtils.parseISOTimestamp(timestamp);\n    // return date ? date.getTime() / 1000 : null;\n  }\n}\n"]}