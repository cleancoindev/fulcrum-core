{"version":3,"sources":["../../src/values/default-values.js"],"names":[],"mappings":"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","file":"default-values.js","sourcesContent":["import DateUtils from '../utils/date-utils';\nimport TextUtils from '../utils/text-utils';\n\nconst NOW = 'now';\n\nexport default class DefaultValues {\n  static applyDefaultValue(defaultValue, element, formValues) {\n    const value = formValues.get(element.key);\n\n    const hasValue = value && !value.isEmpty;\n\n    if (hasValue || defaultValue == null || defaultValue.length === 0) {\n      return;\n    }\n\n    if (element.isDateElement && defaultValue === NOW) {\n      defaultValue = DateUtils.formatDate(new Date());\n    } else if (element.isTimeElement && defaultValue === NOW) {\n      defaultValue = DateUtils.formatTime(new Date());\n    }\n\n    const fieldValue = formValues.createValueFromString(element, defaultValue);\n\n    if (fieldValue) {\n      formValues.set(element.key, fieldValue);\n    }\n  }\n\n  static applyPreviousDefaults(defaultValues, formValues, record) {\n    if (defaultValues == null) {\n      return;\n    }\n\n    const elements = DefaultValues.elementsWithPreviousDefaultsEnabledWithinElements(formValues.elements, record.form);\n\n    for (const element of elements) {\n      const previousDefaultAsJSON = defaultValues[element.key];\n\n      if (previousDefaultAsJSON) {\n        const fieldValue = formValues.createValue(element, previousDefaultAsJSON);\n        const currentValue = record.get(element.key, formValues);\n\n        const isCurrentlyEmpty = (currentValue == null || currentValue.isEmpty);\n\n        if (fieldValue && isCurrentlyEmpty) {\n          record.set(element.key, fieldValue, formValues);\n\n          if (element.isRecordLinkElement) {\n            DefaultValues.applyDefaultValuesForRecordLinkValue(fieldValue, formValues, record);\n          }\n        }\n      }\n    }\n  }\n\n  static applyDefaultValuesForRecordLinkValue(recordLinkValue, formValues, record) {\n    const recordLinkElement = recordLinkValue.element;\n\n    const itemValue = recordLinkValue.items[recordLinkValue.length - 1];\n\n    // TODO(zhm) reload?\n    // [itemValue.record reload];\n\n    const otherRecord = itemValue.record;\n\n    for (const recordDefault of recordLinkElement.recordDefaults) {\n      const otherValue = otherRecord.get(recordDefault.sourceKey, otherRecord.formValues);\n\n      // TODO(zhm) verify container here\n      // FCMElement *newElement = [record.form elementByKey:recordDefault.destinationKey withinContainer:nil];\n      const newElement = record.form.elementsByKey[recordDefault.destinationKey];\n\n      if (newElement) {\n        const newValue = formValues.createValueFromOtherValue(newElement, otherValue);\n\n        if (newValue) {\n          record.set(recordDefault.destinationKey, newValue, formValues);\n        }\n      }\n    }\n  }\n\n  static applyDefaultValueForElement(element, formValues) {\n    const defaultValue = element.defaultValue;\n\n    if (defaultValue == null) {\n      return;\n    }\n\n    DefaultValues.applyDefaultValue(defaultValue, element, formValues);\n  }\n\n  static applyDefaultValuesForElements(elements, formValues, record) {\n    const hasStatusDefault = (record.form.statusField &&\n                              TextUtils.isPresent(record.form.statusField.defaultValue) &&\n                              record.form.statusField.isEnabled);\n\n    if (hasStatusDefault && TextUtils.isEmpty(record.status)) {\n      record.status = record.form.statusField.defaultValue;\n    }\n\n    DefaultValues.applyDefaultValuesForElementsRecursive(elements, formValues);\n  }\n\n  static applyDefaultValuesForElementsRecursive(elements, formValues) {\n    for (const element of elements) {\n      if (element.isSectionElement) {\n        DefaultValues.applyDefaultValuesForElementsRecursive(element.elements, formValues);\n      } else {\n        DefaultValues.applyDefaultValueForElement(element, formValues);\n      }\n    }\n  }\n\n  static elementsWithPreviousDefaultsEnabledWithinElements(elements, form) {\n    const results = [];\n\n    if (form && form.statusField.isEnabled && form.statusField.isDefaultPreviousValueEnabled) {\n      results.push(form.statusField);\n    }\n\n    for (const element of elements) {\n      if (element.isSectionElement) {\n        // when recursing don't pass in the form, so the status field is only added once\n        Array.prototype.push.apply(results, DefaultValues.elementsWithPreviousDefaultsEnabledWithinElements(element.elements, null));\n      } else if (element.isDefaultPreviousValueEnabled) {\n        results.push(element);\n      }\n    }\n\n    return results;\n  }\n}\n"]}