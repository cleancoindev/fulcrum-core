{"version":3,"sources":["../../src/values/default-values.js"],"names":["NOW","DefaultValues","applyDefaultValue","elementDefaultValue","element","formValues","defaultValue","value","get","key","hasValue","isEmpty","length","isDateElement","DateUtils","formatDate","Date","isTimeElement","formatTime","fieldValue","createValueFromString","set","applyPreviousDefaults","defaultValues","feature","record","form","elements","elementsWithPreviousDefaultsEnabledWithinElements","previousDefaultAsJSON","createValue","currentValue","isCurrentlyEmpty","isRecordLinkElement","applyDefaultValuesForRecordLinkValue","recordLinkValue","recordLinkElement","itemValue","items","otherRecord","recordDefaults","recordDefault","otherValue","sourceKey","newElement","elementsByKey","destinationKey","newValue","createValueFromOtherValue","applyDefaultValueForElement","applyDefaultValuesForElements","hasStatusDefault","statusField","TextUtils","isPresent","isEnabled","status","applyDefaultValuesForElementsRecursive","isSectionElement","results","isDefaultPreviousValueEnabled","push","Array","prototype","apply"],"mappings":";;;;AAAA;;;;AACA;;;;;;;;AAEA,IAAMA,MAAM,KAAZ;;IAEqBC,a;;;;;gBACZC,iB,8BAAkBC,mB,EAAqBC,O,EAASC,U,EAAY;AACjE,QAAIC,eAAeH,mBAAnB;;AAEA,QAAMI,QAAQF,WAAWG,GAAX,CAAeJ,QAAQK,GAAvB,CAAd;;AAEA,QAAMC,WAAWH,SAAS,CAACA,MAAMI,OAAjC;;AAEA,QAAID,YAAYJ,gBAAgB,IAA5B,IAAoCA,aAAaM,MAAb,KAAwB,CAAhE,EAAmE;AACjE;AACD;;AAED,QAAIR,QAAQS,aAAR,IAAyBP,iBAAiBN,GAA9C,EAAmD;AACjDM,qBAAeQ,oBAAUC,UAAV,CAAqB,IAAIC,IAAJ,EAArB,CAAf;AACD,KAFD,MAEO,IAAIZ,QAAQa,aAAR,IAAyBX,iBAAiBN,GAA9C,EAAmD;AACxDM,qBAAeQ,oBAAUI,UAAV,CAAqB,IAAIF,IAAJ,EAArB,CAAf;AACD;;AAED,QAAMG,aAAad,WAAWe,qBAAX,CAAiChB,OAAjC,EAA0CE,YAA1C,CAAnB;;AAEA,QAAIa,UAAJ,EAAgB;AACdd,iBAAWgB,GAAX,CAAejB,QAAQK,GAAvB,EAA4BU,UAA5B;AACD;AACF,G;;gBAEMG,qB,kCAAsBC,a,EAAeC,O,EAASC,M,EAAQ;AAC3D,QAAIF,iBAAiB,IAArB,EAA2B;AACzB;AACD;AACD,QAAMG,OAAOF,QAAQE,IAArB;AACA,QAAMrB,aAAamB,QAAQnB,UAA3B;AACA,QAAMsB,WAAW1B,cAAc2B,iDAAd,CAAgEF,KAAKC,QAArE,EAA+EF,OAAOC,IAAtF,CAAjB;;AAEA,yBAAsBC,QAAtB,kHAAgC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,UAArBvB,OAAqB;;AAC9B,UAAMyB,wBAAwBN,cAAcnB,QAAQK,GAAtB,CAA9B;;AAEA,UAAIoB,qBAAJ,EAA2B;AACzB,YAAMV,aAAad,WAAWyB,WAAX,CAAuB1B,OAAvB,EAAgCyB,qBAAhC,CAAnB;AACA,YAAME,eAAeN,OAAOjB,GAAP,CAAWJ,QAAQK,GAAnB,EAAwBJ,UAAxB,CAArB;;AAEA,YAAM2B,mBAAoBD,gBAAgB,IAAhB,IAAwBA,aAAapB,OAA/D;;AAEA,YAAIQ,cAAca,gBAAlB,EAAoC;AAClCP,iBAAOJ,GAAP,CAAWjB,QAAQK,GAAnB,EAAwBU,UAAxB,EAAoCd,UAApC;;AAEA,cAAID,QAAQ6B,mBAAZ,EAAiC;AAC/BhC,0BAAciC,oCAAd,CAAmDf,UAAnD,EAA+Dd,UAA/D,EAA2EoB,MAA3E;AACD;AACF;AACF;AACF;AACF,G;;gBAEMS,oC,iDAAqCC,e,EAAiB9B,U,EAAYoB,M,EAAQ;AAC/E,QAAMW,oBAAoBD,gBAAgB/B,OAA1C;;AAEA,QAAMiC,YAAYF,gBAAgBG,KAAhB,CAAsBH,gBAAgBvB,MAAhB,GAAyB,CAA/C,CAAlB;;AAEA;AACA;;AAEA,QAAM2B,cAAcF,UAAUZ,MAA9B;;AAEA,0BAA4BW,kBAAkBI,cAA9C,yHAA8D;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,UAAnDC,aAAmD;;AAC5D,UAAMC,aAAaH,YAAY/B,GAAZ,CAAgBiC,cAAcE,SAA9B,EAAyCJ,YAAYlC,UAArD,CAAnB;;AAEA;AACA;AACA,UAAMuC,aAAanB,OAAOC,IAAP,CAAYmB,aAAZ,CAA0BJ,cAAcK,cAAxC,CAAnB;;AAEA,UAAIF,UAAJ,EAAgB;AACd,YAAMG,WAAW1C,WAAW2C,yBAAX,CAAqCJ,UAArC,EAAiDF,UAAjD,CAAjB;;AAEA,YAAIK,QAAJ,EAAc;AACZtB,iBAAOJ,GAAP,CAAWoB,cAAcK,cAAzB,EAAyCC,QAAzC,EAAmD1C,UAAnD;AACD;AACF;AACF;AACF,G;;gBAEM4C,2B,wCAA4B7C,O,EAASC,U,EAAY;AACtD,QAAMC,eAAeF,QAAQE,YAA7B;;AAEA,QAAIA,gBAAgB,IAApB,EAA0B;AACxB;AACD;;AAEDL,kBAAcC,iBAAd,CAAgCI,YAAhC,EAA8CF,OAA9C,EAAuDC,UAAvD;AACD,G;;gBAEM6C,6B,0CAA8BvB,Q,EAAUtB,U,EAAYoB,M,EAAQ;AACjE,QAAM0B,mBAAoB1B,OAAOC,IAAP,CAAY0B,WAAZ,IACAC,oBAAUC,SAAV,CAAoB7B,OAAOC,IAAP,CAAY0B,WAAZ,CAAwB9C,YAA5C,CADA,IAEAmB,OAAOC,IAAP,CAAY0B,WAAZ,CAAwBG,SAFlD;;AAIA,QAAIJ,oBAAoBE,oBAAU1C,OAAV,CAAkBc,OAAO+B,MAAzB,CAAxB,EAA0D;AACxD/B,aAAO+B,MAAP,GAAgB/B,OAAOC,IAAP,CAAY0B,WAAZ,CAAwB9C,YAAxC;AACD;;AAEDL,kBAAcwD,sCAAd,CAAqD9B,QAArD,EAA+DtB,UAA/D;AACD,G;;gBAEMoD,sC,mDAAuC9B,Q,EAAUtB,U,EAAY;AAClE,0BAAsBsB,QAAtB,yHAAgC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,UAArBvB,OAAqB;;AAC9B,UAAIA,QAAQsD,gBAAZ,EAA8B;AAC5BzD,sBAAcwD,sCAAd,CAAqDrD,QAAQuB,QAA7D,EAAuEtB,UAAvE;AACD,OAFD,MAEO;AACLJ,sBAAcgD,2BAAd,CAA0C7C,OAA1C,EAAmDC,UAAnD;AACD;AACF;AACF,G;;gBAEMuB,iD,8DAAkDD,Q,EAAUD,I,EAAM;AACvE,QAAMiC,UAAU,EAAhB;;AAEA,QAAIjC,QAAQA,KAAK0B,WAAL,CAAiBG,SAAzB,IAAsC7B,KAAK0B,WAAL,CAAiBQ,6BAA3D,EAA0F;AACxFD,cAAQE,IAAR,CAAanC,KAAK0B,WAAlB;AACD;;AAED,0BAAsBzB,QAAtB,yHAAgC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,UAArBvB,OAAqB;;AAC9B,UAAIA,QAAQsD,gBAAZ,EAA8B;AAC5B;AACAI,cAAMC,SAAN,CAAgBF,IAAhB,CAAqBG,KAArB,CAA2BL,OAA3B,EAAoC1D,cAAc2B,iDAAd,CAAgExB,QAAQuB,QAAxE,EAAkF,IAAlF,CAApC;AACD,OAHD,MAGO,IAAIvB,QAAQwD,6BAAZ,EAA2C;AAChDD,gBAAQE,IAAR,CAAazD,OAAb;AACD;AACF;;AAED,WAAOuD,OAAP;AACD,G;;;;;kBAjIkB1D,a","file":"default-values.js","sourcesContent":["import DateUtils from '../utils/date-utils';\nimport TextUtils from '../utils/text-utils';\n\nconst NOW = 'now';\n\nexport default class DefaultValues {\n  static applyDefaultValue(elementDefaultValue, element, formValues) {\n    let defaultValue = elementDefaultValue;\n\n    const value = formValues.get(element.key);\n\n    const hasValue = value && !value.isEmpty;\n\n    if (hasValue || defaultValue == null || defaultValue.length === 0) {\n      return;\n    }\n\n    if (element.isDateElement && defaultValue === NOW) {\n      defaultValue = DateUtils.formatDate(new Date());\n    } else if (element.isTimeElement && defaultValue === NOW) {\n      defaultValue = DateUtils.formatTime(new Date());\n    }\n\n    const fieldValue = formValues.createValueFromString(element, defaultValue);\n\n    if (fieldValue) {\n      formValues.set(element.key, fieldValue);\n    }\n  }\n\n  static applyPreviousDefaults(defaultValues, feature, record) {\n    if (defaultValues == null) {\n      return;\n    }\n    const form = feature.form;\n    const formValues = feature.formValues;\n    const elements = DefaultValues.elementsWithPreviousDefaultsEnabledWithinElements(form.elements, record.form);\n\n    for (const element of elements) {\n      const previousDefaultAsJSON = defaultValues[element.key];\n\n      if (previousDefaultAsJSON) {\n        const fieldValue = formValues.createValue(element, previousDefaultAsJSON);\n        const currentValue = record.get(element.key, formValues);\n\n        const isCurrentlyEmpty = (currentValue == null || currentValue.isEmpty);\n\n        if (fieldValue && isCurrentlyEmpty) {\n          record.set(element.key, fieldValue, formValues);\n\n          if (element.isRecordLinkElement) {\n            DefaultValues.applyDefaultValuesForRecordLinkValue(fieldValue, formValues, record);\n          }\n        }\n      }\n    }\n  }\n\n  static applyDefaultValuesForRecordLinkValue(recordLinkValue, formValues, record) {\n    const recordLinkElement = recordLinkValue.element;\n\n    const itemValue = recordLinkValue.items[recordLinkValue.length - 1];\n\n    // TODO(zhm) reload?\n    // [itemValue.record reload];\n\n    const otherRecord = itemValue.record;\n\n    for (const recordDefault of recordLinkElement.recordDefaults) {\n      const otherValue = otherRecord.get(recordDefault.sourceKey, otherRecord.formValues);\n\n      // TODO(zhm) verify container here\n      // FCMElement *newElement = [record.form elementByKey:recordDefault.destinationKey withinContainer:nil];\n      const newElement = record.form.elementsByKey[recordDefault.destinationKey];\n\n      if (newElement) {\n        const newValue = formValues.createValueFromOtherValue(newElement, otherValue);\n\n        if (newValue) {\n          record.set(recordDefault.destinationKey, newValue, formValues);\n        }\n      }\n    }\n  }\n\n  static applyDefaultValueForElement(element, formValues) {\n    const defaultValue = element.defaultValue;\n\n    if (defaultValue == null) {\n      return;\n    }\n\n    DefaultValues.applyDefaultValue(defaultValue, element, formValues);\n  }\n\n  static applyDefaultValuesForElements(elements, formValues, record) {\n    const hasStatusDefault = (record.form.statusField &&\n                              TextUtils.isPresent(record.form.statusField.defaultValue) &&\n                              record.form.statusField.isEnabled);\n\n    if (hasStatusDefault && TextUtils.isEmpty(record.status)) {\n      record.status = record.form.statusField.defaultValue;\n    }\n\n    DefaultValues.applyDefaultValuesForElementsRecursive(elements, formValues);\n  }\n\n  static applyDefaultValuesForElementsRecursive(elements, formValues) {\n    for (const element of elements) {\n      if (element.isSectionElement) {\n        DefaultValues.applyDefaultValuesForElementsRecursive(element.elements, formValues);\n      } else {\n        DefaultValues.applyDefaultValueForElement(element, formValues);\n      }\n    }\n  }\n\n  static elementsWithPreviousDefaultsEnabledWithinElements(elements, form) {\n    const results = [];\n\n    if (form && form.statusField.isEnabled && form.statusField.isDefaultPreviousValueEnabled) {\n      results.push(form.statusField);\n    }\n\n    for (const element of elements) {\n      if (element.isSectionElement) {\n        // when recursing don't pass in the form, so the status field is only added once\n        Array.prototype.push.apply(results, DefaultValues.elementsWithPreviousDefaultsEnabledWithinElements(element.elements, null));\n      } else if (element.isDefaultPreviousValueEnabled) {\n        results.push(element);\n      }\n    }\n\n    return results;\n  }\n}\n"]}