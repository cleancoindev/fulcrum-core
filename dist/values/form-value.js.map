{"version":3,"sources":["../../src/values/form-value.js"],"names":[],"mappings":";;;;;;;;;;;;AAEA,SAAS,cAAc,GAAG;AACxB,QAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;CACpC;;AAED,IAAI,gBAAgB,GAAG,IAAI,CAAC;;AAEb,MAAM,SAAS,CAAC;AAC7B,aAAW,CAAC,OAAO,EAAE,KAAK,EAAE;AAC1B,QAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;AACxB,QAAI,CAAC,SAAS,GAAG,KAAK,CAAC;GACxB;;AAED,MAAI,OAAO,GAAG;AACZ,WAAO,IAAI,CAAC,QAAQ,CAAC;GACtB;;AAED,MAAI,OAAO,CAAC,OAAO,EAAE;AACnB,QAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;GACzB;;AAED,MAAI,OAAO,GAAG;AACZ,kBAAc,EAAE,CAAC;GAClB;;AAED,MAAI,YAAY,GAAG;AACjB,kBAAc,EAAE,CAAC;GAClB;;AAED,MAAI,eAAe,GAAG;AACpB,kBAAc,EAAE,CAAC;GAClB;;AAED,MAAI,MAAM,GAAG;AACX,kBAAc,EAAE,CAAC;GAClB;;AAED,MAAI,WAAW,GAAG;AAChB,kBAAc,EAAE,CAAC;GAClB;;AAED,MAAI,cAAc,GAAG;AACnB,kBAAc,EAAE,CAAC;GAClB;;AAED,QAAM,GAAG;AACP,kBAAc,EAAE,CAAC;GAClB;;AAED,SAAO,CAAC,KAAK,EAAE;AACb,kBAAc,EAAE,CAAC;GAClB;;AAED,UAAQ,CAAC,KAAK,EAAE;AACd,kBAAc,EAAE,CAAC;GAClB;;AAED,YAAU,CAAC,KAAK,EAAE;AAChB,kBAAc,EAAE,CAAC;GAClB;;AAED,YAAU,CAAC,KAAK,EAAE;AAChB,kBAAc,EAAE,CAAC;GAClB;;AAED,eAAa,CAAC,KAAK,EAAE;AACnB,kBAAc,EAAE,CAAC;GAClB;;AAED,SAAO,OAAO,GAAG;AACf,WAAQ,gBAAgB,GAAG,gBAAgB,IAAI,OAAO,CAAC,sBAAsB,CAAC,CAAC,OAAO,CAAE;GACzF;;AAED,SAAO,MAAM,CAAC,OAAO,EAAE,UAAU,EAAE;AACjC,WAAO,SAAS,CAAC,OAAO,EAAE,CAAC,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;GACxD;;AAED,SAAO,OAAO,GAAG;AACf,QAAI,SAAS,CAAC,QAAQ,IAAI,IAAI,EAAE;AAC9B,eAAS,CAAC,QAAQ,GAAG,EAAE,CAAC;;AAExB,WAAK,IAAI,KAAK,IAAI,MAAM,CAAC,IAAI,wBAAO,EAAE;AACpC,cAAM,WAAW,GAAG,SAAS,CAAC,OAAO,EAAE,CAAC,OAAO,EAAE,CAAC,uBAAM,KAAK,CAAC,CAAC,CAAC;;AAEhE,YAAI,WAAW,EAAE;AACf,mBAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC;SACpD;OACF;KACF;;AAED,WAAO,SAAS,CAAC,QAAQ,CAAC;GAC3B;CACF;kBArFoB,SAAS","file":"form-value.js","sourcesContent":["import Types from '../elements/element-types';\n\nfunction notImplemented() {\n  throw new Error('Not implemented');\n}\n\nlet FormValueFactory = null;\n\nexport default class FormValue {\n  constructor(element, value) {\n    this._element = element;\n    this._rawValue = value;\n  }\n\n  get element() {\n    return this._element;\n  }\n\n  set element(element) {\n    this._element = element;\n  }\n\n  get isEmpty() {\n    notImplemented();\n  }\n\n  get displayValue() {\n    notImplemented();\n  }\n\n  get searchableValue() {\n    notImplemented();\n  }\n\n  get length() {\n    notImplemented();\n  }\n\n  get columnValue() {\n    notImplemented();\n  }\n\n  get multipleValues() {\n    notImplemented();\n  }\n\n  toJSON() {\n    notImplemented();\n  }\n\n  isEqual(value) {\n    notImplemented();\n  }\n\n  contains(value) {\n    notImplemented();\n  }\n\n  startsWith(value) {\n    notImplemented();\n  }\n\n  isLessThan(value) {\n    notImplemented();\n  }\n\n  isGreaterThan(value) {\n    notImplemented();\n  }\n\n  static factory() {\n    return (FormValueFactory = FormValueFactory || require('./form-value-factory').default);\n  }\n\n  static create(element, attributes) {\n    return FormValue.factory().create(element, attributes);\n  }\n\n  static classes() {\n    if (FormValue._classes == null) {\n      FormValue._classes = {};\n\n      for (let klass of Object.keys(Types)) {\n        const constructor = FormValue.factory().classes()[Types[klass]];\n\n        if (constructor) {\n          FormValue._classes[constructor.name] = constructor;\n        }\n      }\n    }\n\n    return FormValue._classes;\n  }\n}\n"]}