{"version":3,"sources":["../../src/values/form-value.js"],"names":[],"mappings":";;;;;;AAAA;;;;;;;;AAEA,SAAS,cAAT,GAA0B;AACxB,QAAM,IAAI,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAED,IAAI,mBAAmB,IAAvB;;IAEqB,S;AACnB,qBAAY,OAAZ,EAAqB,KAArB,EAA4B;AAAA;;AAC1B,SAAK,QAAL,GAAgB,OAAhB;AACA,SAAK,SAAL,GAAiB,KAAjB;AACD;;sBAkCD,M,qBAAS;AACP;AACD,G;;sBAED,O,oBAAQ,K,EAAO;AACb;AACD,G;;sBAED,Q,qBAAS,K,EAAO;AACd;AACD,G;;sBAED,U,uBAAW,K,EAAO;AAChB;AACD,G;;sBAED,U,uBAAW,K,EAAO;AAChB;AACD,G;;sBAED,a,0BAAc,K,EAAO;AACnB;AACD,G;;YAEM,O,sBAAU;AACf,WAAQ,mBAAmB,oBAAoB,QAAQ,sBAAR,EAAgC,OAA/E;AACD,G;;YAEM,M,mBAAO,O,EAAS,U,EAAY;AACjC,WAAO,UAAU,OAAV,GAAoB,MAApB,CAA2B,OAA3B,EAAoC,UAApC,CAAP;AACD,G;;YAEM,O,sBAAU;AACf,QAAI,UAAU,QAAV,IAAsB,IAA1B,EAAgC;AAC9B,gBAAU,QAAV,GAAqB,EAArB;;AAEA,2BAAkB,OAAO,IAAP,wBAAlB,kHAAsC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,YAA7B,KAA6B;;AACpC,YAAM,eAAc,UAAU,OAAV,GAAoB,OAApB,GAA8B,uBAAM,KAAN,CAA9B,CAApB;;AAEA,YAAI,YAAJ,EAAiB;AACf,oBAAU,QAAV,CAAmB,aAAY,IAA/B,IAAuC,YAAvC;AACD;AACF;AACF;;AAED,WAAO,UAAU,QAAjB;AACD,G;;;;wBA9Ea;AACZ,aAAO,KAAK,QAAZ;AACD,K;sBAEW,O,EAAS;AACnB,WAAK,QAAL,GAAgB,OAAhB;AACD;;;wBAEa;AACZ;AACD;;;wBAEkB;AACjB;AACD;;;wBAEqB;AACpB;AACD;;;wBAEY;AACX;AACD;;;wBAEiB;AAChB;AACD;;;wBAEoB;AACnB;AACD;;;;;;kBApCkB,S","file":"form-value.js","sourcesContent":["import Types from '../elements/element-types';\n\nfunction notImplemented() {\n  throw new Error('Not implemented');\n}\n\nlet FormValueFactory = null;\n\nexport default class FormValue {\n  constructor(element, value) {\n    this._element = element;\n    this._rawValue = value;\n  }\n\n  get element() {\n    return this._element;\n  }\n\n  set element(element) {\n    this._element = element;\n  }\n\n  get isEmpty() {\n    notImplemented();\n  }\n\n  get displayValue() {\n    notImplemented();\n  }\n\n  get searchableValue() {\n    notImplemented();\n  }\n\n  get length() {\n    notImplemented();\n  }\n\n  get columnValue() {\n    notImplemented();\n  }\n\n  get multipleValues() {\n    notImplemented();\n  }\n\n  toJSON() {\n    notImplemented();\n  }\n\n  isEqual(value) {\n    notImplemented();\n  }\n\n  contains(value) {\n    notImplemented();\n  }\n\n  startsWith(value) {\n    notImplemented();\n  }\n\n  isLessThan(value) {\n    notImplemented();\n  }\n\n  isGreaterThan(value) {\n    notImplemented();\n  }\n\n  static factory() {\n    return (FormValueFactory = FormValueFactory || require('./form-value-factory').default);\n  }\n\n  static create(element, attributes) {\n    return FormValue.factory().create(element, attributes);\n  }\n\n  static classes() {\n    if (FormValue._classes == null) {\n      FormValue._classes = {};\n\n      for (let klass of Object.keys(Types)) {\n        const constructor = FormValue.factory().classes()[Types[klass]];\n\n        if (constructor) {\n          FormValue._classes[constructor.name] = constructor;\n        }\n      }\n    }\n\n    return FormValue._classes;\n  }\n}\n"]}