{"version":3,"sources":["../../src/values/form-values.js"],"names":["SearchValueSeparator","FormValues","container","attributes","_values","loadValues","elements","get","key","set","value","FormValue","Error","find","dataName","element","elementsByDataName","loadValue","isSectionElement","rawValue","formValue","FormValueFactory","create","toJSON","json","Object","keys","jsonValue","toSimpleJSON","copy","merge","formValues","createValue","createValueFromString","string","isTextElement","isChoiceElement","choice","choiceByValue","choice_values","isYesNoElement","isBarcodeElement","isClassificationElement","isDateElement","isTimeElement","isHyperlinkElement","createValueFromOtherValue","otherValue","destinationIsTextual","TextualElement","otherIsTextual","stringValue","textValue","isCalculatedElement","isNumeric","displayValue","TextUtils","isPresent","isEmpty","isAddressElement","clearInvisibleValues","valuesForConditions","record","elementsToRemove","cache","all","skipElement","isHidden","hasHiddenParent","isPreserved","shouldBeVisible","Condition","shouldElementBeVisible","push","blankValue","result","searchValues","searchValue","searchableValue","trim","join","values","MediaValue","apply","items","SignatureValue","RepeatableValue","item","mediaValues","repeatableItems","RecordLinkValue","recordLinkItems"],"mappings":"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","file":"form-values.js","sourcesContent":["import FormValueFactory from './form-value-factory';\nimport FormValue from './form-value';\nimport TextualElement from '../elements/textual-element';\nimport TextUtils from '../utils/text-utils';\nimport Condition from '../elements/condition';\nimport MediaValue from './media-value';\nimport SignatureValue from './signature-value';\nimport RepeatableValue from './repeatable-value';\nimport RecordLinkValue from './record-link-value';\n\nconst SearchValueSeparator = ' ';\n\nexport default class FormValues {\n  constructor(container, attributes) {\n    this._values = {};\n    this.container = container;\n    this.loadValues(container.elements, attributes || {});\n  }\n\n  get all() {\n    const result = [];\n\n    for (const key of Object.keys(this._values)) {\n      result.push(this._values[key]);\n    }\n\n    return result;\n  }\n\n  get(key) {\n    return this._values[key];\n  }\n\n  set(key, value) {\n    if (value && !(value instanceof FormValue)) {\n      throw new Error('Invalid value ' + value);\n    }\n\n    if (value != null) {\n      this._values[key] = value;\n    } else {\n      delete this._values[key];\n    }\n  }\n\n  find(dataName) {\n    const element = this.container.elementsByDataName[dataName];\n\n    if (element) {\n      return this.get(element.key);\n    }\n\n    return null;\n  }\n\n  loadValues(elements, attributes) {\n    for (const element of elements) {\n      this.loadValue(element, attributes);\n    }\n  }\n\n  loadValue(element, attributes) {\n    if (element.isSectionElement) {\n      this.loadValues(element.elements, attributes);\n    } else {\n      const rawValue = attributes[element.key];\n\n      if (rawValue != null) {\n        const formValue = FormValueFactory.create(element, rawValue);\n\n        this.set(element.key, formValue);\n      }\n    }\n  }\n\n  toJSON() {\n    const json = {};\n\n    for (const key of Object.keys(this._values)) {\n      const formValue = this._values[key];\n\n      if (formValue) {\n        const jsonValue = formValue.toJSON();\n\n        if (jsonValue) {\n          json[key] = jsonValue;\n        }\n      }\n    }\n\n    return json;\n  }\n\n  toSimpleJSON() {\n    const json = {};\n\n    for (const key of Object.keys(this._values)) {\n      const formValue = this._values[key];\n\n      if (formValue) {\n        const jsonValue = formValue.toSimpleJSON();\n\n        if (jsonValue) {\n          json[formValue.element.dataName] = jsonValue;\n        }\n      }\n    }\n\n    return json;\n  }\n\n  copy() {\n    return new FormValues(this.container, this.toJSON());\n  }\n\n  merge(formValues) {\n    if (!(formValues instanceof FormValues)) {\n      throw new Error('Invalid values');\n    }\n\n    for (const key of Object.keys(formValues._values)) {\n      const formValue = formValues._values[key];\n\n      this.set(key, formValue);\n    }\n  }\n\n  createValue(element, rawValue) {\n    if (element == null) {\n      throw new Error('element cannot be null');\n    }\n\n    return FormValueFactory.create(element, rawValue != null ? rawValue : null);\n  }\n\n  createValueFromString(element, string) {\n    if (element.isTextElement) {\n      return this.createValue(element, string);\n    } else if (element.isChoiceElement) {\n      const choice = element.choiceByValue(string);\n\n      if (choice) {\n        return this.createValue(element, {choice_values: [ choice.value ]});\n      }\n    } else if (element.isYesNoElement) {\n      return this.createValue(element, string);\n    } else if (element.isBarcodeElement) {\n      return this.createValue(element, string);\n    } else if (element.isClassificationElement) {\n      return this.createValue(element, {choice_values: [ string ]});\n    } else if (element.isDateElement) {\n      return this.createValue(element, string);\n    } else if (element.isTimeElement) {\n      return this.createValue(element, string);\n    } else if (element.isHyperlinkElement) {\n      return this.createValue(element, string);\n    }\n\n    return null;\n  }\n\n  createValueFromOtherValue(element, otherValue) {\n    if (otherValue == null) {\n      return this.createValue(element, null);\n    }\n\n    const destinationIsTextual = element instanceof TextualElement;\n    const otherIsTextual = otherValue.element instanceof TextualElement;\n\n    if (destinationIsTextual && otherIsTextual) {\n      // converting text -> text\n      // if the other field is a calculated field and it's being copied to a regular text field,\n      // use the display value instead of the raw value so it can use the display formatting logic\n\n      let stringValue = otherValue.textValue;\n\n      if (otherValue.element.isCalculatedElement && element.isTextElement) {\n        if (!element.isNumeric) {\n          stringValue = otherValue.displayValue;\n        }\n      }\n\n      return this.createValue(element, stringValue);\n    } else if (destinationIsTextual && !otherIsTextual) {\n      // converting choice -> text\n      if (otherValue.element.isChoiceElement || otherValue.element.isClassificationElement) {\n        const displayValue = otherValue.displayValue;\n\n        if (TextUtils.isPresent(displayValue)) {\n          return this.createValue(element, displayValue);\n        }\n      }\n    } else if (!destinationIsTextual && otherIsTextual) {\n      // converting text -> choice\n      if (element.isChoiceElement) {\n        if (!otherValue.isEmpty) {\n          return this.createValueFromString(element, otherValue.textValue);\n        }\n      }\n    } else if (!destinationIsTextual && !otherIsTextual) {\n      // choice -> choice\n      if ((element.isChoiceElement && otherValue.element.isChoiceElement) ||\n          (element.isClassificationElement && otherValue.element.isClassificationElement)) {\n        return this.createValue(element, otherValue.toJSON());\n      } else if (element.isAddressElement && otherValue.element.isAddressElement) {\n        // address -> address\n        return this.createValue(element, otherValue.toJSON());\n      }\n    }\n\n    return null;\n  }\n\n  get searchableValue() {\n    const searchValues = [];\n\n    for (const key of Object.keys(this._values)) {\n      const formValue = this._values[key];\n\n      if (formValue) {\n        const searchValue = formValue.searchableValue;\n\n        if (searchValue != null) {\n          searchValues.push(searchValue.trim());\n        }\n      }\n    }\n\n    return searchValues.join(SearchValueSeparator).trim();\n  }\n\n  clearInvisibleValues(valuesForConditions, record) {\n    const elementsToRemove = [];\n\n    const cache = {};\n\n    for (const formValue of this.all) {\n      const element = formValue.element;\n\n      // don't clear out fields that are:\n      //   * are explicitly marked hidden\n      //   * or have any parents explicitly marked as hidden\n      //   * or have any parents explicitly marked to preserve values\n      const skipElement = element.isHidden || element.hasHiddenParent || element.isPreserved;\n\n      if (!skipElement) {\n        const shouldBeVisible = Condition.shouldElementBeVisible(element,\n                                                                 record,\n                                                                 valuesForConditions,\n                                                                 cache);\n\n        if (!shouldBeVisible) {\n          elementsToRemove.push(element);\n        }\n      }\n    }\n\n    for (const element of elementsToRemove) {\n      const blankValue = this.createValue(element, null);\n\n      this.set(element.key, blankValue);\n    }\n  }\n\n  get mediaValues() {\n    const values = [];\n\n    for (const formValue of this.all) {\n      if (formValue instanceof MediaValue) {\n        values.push.apply(values, formValue.items);\n      } else if (formValue instanceof SignatureValue) {\n        values.push(formValue);\n      } else if (formValue instanceof RepeatableValue) {\n        for (const item of formValue.items) {\n          values.push.apply(values, item.formValues.mediaValues);\n        }\n      }\n    }\n\n    return values;\n  }\n\n  get repeatableItems() {\n    const items = [];\n\n    for (const formValue of this.all) {\n      if (formValue instanceof RepeatableValue) {\n        items.push.apply(items, formValue.items);\n\n        for (const item of formValue.items) {\n          items.push.apply(items, item.formValues.repeatableItems);\n        }\n      }\n    }\n\n    return items;\n  }\n\n  get recordLinkItems() {\n    const items = [];\n\n    for (const formValue of this.all) {\n      if (formValue instanceof RecordLinkValue) {\n        items.push.apply(items, formValue.items);\n      } else if (formValue instanceof RepeatableValue) {\n        for (const item of formValue.items) {\n          items.push.apply(items, item.formValues.recordLinkItems);\n        }\n      }\n    }\n\n    return items;\n  }\n}\n"]}