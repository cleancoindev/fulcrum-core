{"version":3,"sources":["../../src/values/form-values.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,IAAM,uBAAuB,GAAvB;;IAEe;AACnB,WADmB,UACnB,CAAY,SAAZ,EAAuB,UAAvB,EAAmC;0BADhB,YACgB;;AACjC,SAAK,OAAL,GAAe,EAAf,CADiC;AAEjC,SAAK,SAAL,GAAiB,SAAjB,CAFiC;AAGjC,SAAK,UAAL,CAAgB,UAAU,QAAV,EAAoB,UAApC,EAHiC;GAAnC;;eADmB;;wBAiBf,KAAK;AACP,aAAO,KAAK,OAAL,CAAa,GAAb,CAAP,CADO;;;;wBAIL,KAAK,OAAO;AACd,UAAI,SAAS,EAAE,qCAAF,EAA+B;AAC1C,cAAM,IAAI,KAAJ,CAAU,mBAAmB,KAAnB,CAAhB,CAD0C;OAA5C;;AAIA,UAAI,SAAS,IAAT,EAAe;AACjB,aAAK,OAAL,CAAa,GAAb,IAAoB,KAApB,CADiB;OAAnB,MAEO;AACL,eAAO,KAAK,OAAL,CAAa,GAAb,CAAP,CADK;OAFP;;;;yBAOG,UAAU;AACb,UAAM,UAAU,KAAK,SAAL,CAAe,kBAAf,CAAkC,QAAlC,CAAV,CADO;;AAGb,UAAI,OAAJ,EAAa;AACX,eAAO,KAAK,GAAL,CAAS,QAAQ,GAAR,CAAhB,CADW;OAAb;;AAIA,aAAO,IAAP,CAPa;;;;+BAUJ,UAAU,YAAY;;;;;;AAC/B,6BAAoB,kCAApB,oGAA8B;cAArB,sBAAqB;;AAC5B,eAAK,SAAL,CAAe,OAAf,EAAwB,UAAxB,EAD4B;SAA9B;;;;;;;;;;;;;;OAD+B;;;;8BAMvB,SAAS,YAAY;AAC7B,UAAI,QAAQ,gBAAR,EAA0B;AAC5B,aAAK,UAAL,CAAgB,QAAQ,QAAR,EAAkB,UAAlC,EAD4B;OAA9B,MAEO;AACL,YAAM,WAAW,WAAW,QAAQ,GAAR,CAAtB,CADD;;AAGL,YAAI,YAAY,IAAZ,EAAkB;AACpB,cAAM,YAAY,2BAAiB,MAAjB,CAAwB,OAAxB,EAAiC,QAAjC,CAAZ,CADc;;AAGpB,eAAK,GAAL,CAAS,QAAQ,GAAR,EAAa,SAAtB,EAHoB;SAAtB;OALF;;;;6BAaO;AACP,UAAM,OAAO,EAAP,CADC;;;;;;;AAGP,8BAAgB,OAAO,IAAP,CAAY,KAAK,OAAL,4BAA5B,wGAA2C;cAAlC,mBAAkC;;AACzC,cAAM,YAAY,KAAK,OAAL,CAAa,GAAb,CAAZ,CADmC;;AAGzC,cAAI,SAAJ,EAAe;AACb,gBAAM,YAAY,UAAU,MAAV,EAAZ,CADO;;AAGb,gBAAI,SAAJ,EAAe;AACb,mBAAK,GAAL,IAAY,SAAZ,CADa;aAAf;WAHF;SAHF;;;;;;;;;;;;;;OAHO;;AAeP,aAAO,IAAP,CAfO;;;;2BAkBF;AACL,aAAO,IAAI,UAAJ,CAAe,KAAK,SAAL,EAAgB,KAAK,MAAL,EAA/B,CAAP,CADK;;;;0BAID,YAAY;AAChB,UAAI,EAAE,sBAAsB,UAAtB,CAAF,EAAqC;AACvC,cAAM,IAAI,KAAJ,CAAU,gBAAV,CAAN,CADuC;OAAzC;;4CADgB;;;;;AAKhB,8BAAgB,OAAO,IAAP,CAAY,KAAK,OAAL,4BAA5B,wGAA2C;cAAlC,mBAAkC;;AACzC,cAAM,YAAY,KAAK,OAAL,CAAa,GAAb,CAAZ,CADmC;;AAGzC,eAAK,GAAL,CAAS,GAAT,EAAc,SAAd,EAHyC;SAA3C;;;;;;;;;;;;;;OALgB;;;;gCAYN,SAAS,UAAU;AAC7B,aAAO,2BAAiB,MAAjB,CAAwB,OAAxB,EAAiC,YAAY,IAAZ,GAAmB,QAAnB,GAA8B,IAA9B,CAAxC,CAD6B;;;;0CAIT,SAAS,QAAQ;AACrC,UAAI,QAAQ,aAAR,EAAuB;AACzB,eAAO,KAAK,WAAL,CAAiB,OAAjB,EAA0B,MAA1B,CAAP,CADyB;OAA3B,MAEO,IAAI,QAAQ,eAAR,EAAyB;AAClC,YAAM,SAAS,QAAQ,aAAR,CAAsB,MAAtB,CAAT,CAD4B;;AAGlC,YAAI,MAAJ,EAAY;AACV,iBAAO,KAAK,WAAL,CAAiB,OAAjB,EAA0B,EAAC,eAAe,CAAE,OAAO,KAAP,CAAjB,EAA3B,CAAP,CADU;SAAZ;OAHK,MAMA,IAAI,QAAQ,cAAR,EAAwB;AACjC,eAAO,KAAK,WAAL,CAAiB,OAAjB,EAA0B,MAA1B,CAAP,CADiC;OAA5B,MAEA,IAAI,QAAQ,gBAAR,EAA0B;AACnC,eAAO,KAAK,WAAL,CAAiB,OAAjB,EAA0B,MAA1B,CAAP,CADmC;OAA9B,MAEA,IAAI,QAAQ,uBAAR,EAAiC;AAC1C,eAAO,KAAK,WAAL,CAAiB,OAAjB,EAA0B,EAAC,eAAe,CAAE,MAAF,CAAf,EAA3B,CAAP,CAD0C;OAArC,MAEA,IAAI,QAAQ,aAAR,EAAuB;AAChC,eAAO,KAAK,WAAL,CAAiB,OAAjB,EAA0B,MAA1B,CAAP,CADgC;OAA3B,MAEA,IAAI,QAAQ,aAAR,EAAuB;AAChC,eAAO,KAAK,WAAL,CAAiB,OAAjB,EAA0B,MAA1B,CAAP,CADgC;OAA3B,MAEA,IAAI,QAAQ,kBAAR,EAA4B;AACrC,eAAO,KAAK,WAAL,CAAiB,OAAjB,EAA0B,MAA1B,CAAP,CADqC;OAAhC;;AAIP,aAAO,IAAP,CAvBqC;;;;8CA0Bb,SAAS,YAAY;AAC7C,UAAI,cAAc,IAAd,EAAoB;AACtB,eAAO,KAAK,WAAL,CAAiB,OAAjB,EAA0B,IAA1B,CAAP,CADsB;OAAxB;;AAIA,UAAM,uBAAuB,2CAAvB,CALuC;AAM7C,UAAM,iBAAiB,WAAW,OAAX,oCAAjB,CANuC;;AAQ7C,UAAI,wBAAwB,cAAxB,EAAwC;;;;;AAK1C,YAAI,cAAc,WAAW,SAAX,CALwB;;AAO1C,YAAI,WAAW,OAAX,CAAmB,mBAAnB,IAA0C,QAAQ,aAAR,EAAuB;AACnE,cAAI,CAAC,QAAQ,SAAR,EAAmB;AACtB,0BAAc,WAAW,YAAX,CADQ;WAAxB;SADF;;AAMA,eAAO,KAAK,WAAL,CAAiB,OAAjB,EAA0B,WAA1B,CAAP,CAb0C;OAA5C,MAcO,IAAI,wBAAwB,CAAC,cAAD,EAAiB;;AAElD,YAAI,WAAW,OAAX,CAAmB,eAAnB,IAAsC,WAAW,OAAX,CAAmB,uBAAnB,EAA4C;AACpF,cAAM,eAAe,WAAW,YAAX,CAD+D;;AAGpF,cAAI,oBAAU,SAAV,CAAoB,YAApB,CAAJ,EAAuC;AACrC,mBAAO,KAAK,WAAL,CAAiB,OAAjB,EAA0B,YAA1B,CAAP,CADqC;WAAvC;SAHF;OAFK,MASA,IAAI,CAAC,oBAAD,IAAyB,cAAzB,EAAyC;;AAElD,YAAI,QAAQ,eAAR,EAAyB;AAC3B,cAAI,CAAC,WAAW,OAAX,EAAoB;AACvB,mBAAO,KAAK,qBAAL,CAA2B,OAA3B,EAAoC,WAAW,SAAX,CAA3C,CADuB;WAAzB;SADF;OAFK,MAOA,IAAI,CAAC,oBAAD,IAAyB,CAAC,cAAD,EAAiB;;AAEnD,YAAI,OAAC,CAAQ,eAAR,IAA2B,WAAW,OAAX,CAAmB,eAAnB,IAC3B,QAAQ,uBAAR,IAAmC,WAAW,OAAX,CAAmB,uBAAnB,EAA6C;AACnF,iBAAO,KAAK,WAAL,CAAiB,OAAjB,EAA0B,WAAW,MAAX,EAA1B,CAAP,CADmF;SADrF,MAGO,IAAI,QAAQ,gBAAR,IAA4B,WAAW,OAAX,CAAmB,gBAAnB,EAAqC;;AAE1E,iBAAO,KAAK,WAAL,CAAiB,OAAjB,EAA0B,WAAW,MAAX,EAA1B,CAAP,CAF0E;SAArE;OALF;;AAWP,aAAO,IAAP,CAjD6C;;;;wBAxHrC;AACR,UAAM,SAAS,EAAT,CADE;;;;;;;AAGR,8BAAkB,OAAO,IAAP,CAAY,KAAK,OAAL,4BAA9B,wGAA6C;cAAlC,mBAAkC;;AAC3C,iBAAO,IAAP,CAAY,KAAK,OAAL,CAAa,GAAb,CAAZ,EAD2C;SAA7C;;;;;;;;;;;;;;OAHQ;;AAOR,aAAO,MAAP,CAPQ;;;;wBA4KY;AACpB,UAAM,eAAe,EAAf,CADc;;;;;;;AAGpB,8BAAgB,OAAO,IAAP,CAAY,KAAK,OAAL,4BAA5B,wGAA2C;cAAlC,mBAAkC;;AACzC,cAAM,YAAY,KAAK,OAAL,CAAa,GAAb,CAAZ,CADmC;;AAGzC,cAAI,SAAJ,EAAe;AACb,gBAAM,cAAc,UAAU,eAAV,CADP;;AAGb,gBAAI,eAAe,IAAf,EAAqB;AACvB,2BAAa,IAAb,CAAkB,WAAlB,EADuB;aAAzB;WAHF;SAHF;;;;;;;;;;;;;;OAHoB;;AAepB,aAAO,aAAa,IAAb,CAAkB,oBAAlB,CAAP,CAfoB;;;;SAnLH","file":"form-values.js","sourcesContent":["import FormValueFactory from './form-value-factory';\nimport FormValue from './form-value';\nimport TextualElement from '../elements/textual-element';\nimport TextUtils from '../utils/text-utils';\n\nconst SearchValueSeparator = ' ';\n\nexport default class FormValues {\n  constructor(container, attributes) {\n    this._values = {};\n    this.container = container;\n    this.loadValues(container.elements, attributes);\n  }\n\n  get all() {\n    const result = [];\n\n    for (const key of Object.keys(this._values)) {\n      result.push(this._values[key]);\n    }\n\n    return result;\n  }\n\n  get(key) {\n    return this._values[key];\n  }\n\n  set(key, value) {\n    if (value && !(value instanceof FormValue)) {\n      throw new Error('Invalid value ' + value);\n    }\n\n    if (value != null) {\n      this._values[key] = value;\n    } else {\n      delete this._values[key];\n    }\n  }\n\n  find(dataName) {\n    const element = this.container.elementsByDataName[dataName];\n\n    if (element) {\n      return this.get(element.key);\n    }\n\n    return null;\n  }\n\n  loadValues(elements, attributes) {\n    for (let element of elements) {\n      this.loadValue(element, attributes);\n    }\n  }\n\n  loadValue(element, attributes) {\n    if (element.isSectionElement) {\n      this.loadValues(element.elements, attributes);\n    } else {\n      const rawValue = attributes[element.key];\n\n      if (rawValue != null) {\n        const formValue = FormValueFactory.create(element, rawValue);\n\n        this.set(element.key, formValue);\n      }\n    }\n  }\n\n  toJSON() {\n    const json = {};\n\n    for (let key of Object.keys(this._values)) {\n      const formValue = this._values[key];\n\n      if (formValue) {\n        const jsonValue = formValue.toJSON();\n\n        if (jsonValue) {\n          json[key] = jsonValue;\n        }\n      }\n    }\n\n    return json;\n  }\n\n  copy() {\n    return new FormValues(this.container, this.toJSON());\n  }\n\n  merge(formValues) {\n    if (!(formValues instanceof FormValues)) {\n      throw new Error('Invalid values');\n    }\n\n    for (let key of Object.keys(this._values)) {\n      const formValue = this._values[key];\n\n      this.set(key, formValue);\n    }\n  }\n\n  createValue(element, rawValue) {\n    return FormValueFactory.create(element, rawValue != null ? rawValue : null);\n  }\n\n  createValueFromString(element, string) {\n    if (element.isTextElement) {\n      return this.createValue(element, string);\n    } else if (element.isChoiceElement) {\n      const choice = element.choiceByValue(string);\n\n      if (choice) {\n        return this.createValue(element, {choice_values: [ choice.value ]});\n      }\n    } else if (element.isYesNoElement) {\n      return this.createValue(element, string);\n    } else if (element.isBarcodeElement) {\n      return this.createValue(element, string);\n    } else if (element.isClassificationElement) {\n      return this.createValue(element, {choice_values: [ string ]});\n    } else if (element.isDateElement) {\n      return this.createValue(element, string);\n    } else if (element.isTimeElement) {\n      return this.createValue(element, string);\n    } else if (element.isHyperlinkElement) {\n      return this.createValue(element, string);\n    }\n\n    return null;\n  }\n\n  createValueFromOtherValue(element, otherValue) {\n    if (otherValue == null) {\n      return this.createValue(element, null);\n    }\n\n    const destinationIsTextual = element instanceof TextualElement;\n    const otherIsTextual = otherValue.element instanceof TextualElement;\n\n    if (destinationIsTextual && otherIsTextual) {\n      // converting text -> text\n      // if the other field is a calculated field and it's being copied to a regular text field,\n      // use the display value instead of the raw value so it can use the display formatting logic\n\n      let stringValue = otherValue.textValue;\n\n      if (otherValue.element.isCalculatedElement && element.isTextElement) {\n        if (!element.isNumeric) {\n          stringValue = otherValue.displayValue;\n        }\n      }\n\n      return this.createValue(element, stringValue);\n    } else if (destinationIsTextual && !otherIsTextual) {\n      // converting choice -> text\n      if (otherValue.element.isChoiceElement || otherValue.element.isClassificationElement) {\n        const displayValue = otherValue.displayValue;\n\n        if (TextUtils.isPresent(displayValue)) {\n          return this.createValue(element, displayValue);\n        }\n      }\n    } else if (!destinationIsTextual && otherIsTextual) {\n      // converting text -> choice\n      if (element.isChoiceElement) {\n        if (!otherValue.isEmpty) {\n          return this.createValueFromString(element, otherValue.textValue);\n        }\n      }\n    } else if (!destinationIsTextual && !otherIsTextual) {\n      // choice -> choice\n      if ((element.isChoiceElement && otherValue.element.isChoiceElement) ||\n          (element.isClassificationElement && otherValue.element.isClassificationElement)) {\n        return this.createValue(element, otherValue.toJSON());\n      } else if (element.isAddressElement && otherValue.element.isAddressElement) {\n        // address -> address\n        return this.createValue(element, otherValue.toJSON());\n      }\n    }\n\n    return null;\n  }\n\n  get searchableValue() {\n    const searchValues = [];\n\n    for (let key of Object.keys(this._values)) {\n      const formValue = this._values[key];\n\n      if (formValue) {\n        const searchValue = formValue.searchableValue;\n\n        if (searchValue != null) {\n          searchValues.push(searchValue);\n        }\n      }\n    }\n\n    return searchValues.join(SearchValueSeparator);\n  }\n}\n"]}