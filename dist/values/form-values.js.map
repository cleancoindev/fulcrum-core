{"version":3,"sources":["../../src/values/form-values.js"],"names":["SearchValueSeparator","FormValues","container","attributes","_values","loadValues","elements","get","key","set","value","Error","find","dataName","element","elementsByDataName","loadValue","isSectionElement","rawValue","formValue","create","toJSON","json","Object","keys","jsonValue","copy","merge","formValues","createValue","createValueFromString","string","isTextElement","isChoiceElement","choice","choiceByValue","choice_values","isYesNoElement","isBarcodeElement","isClassificationElement","isDateElement","isTimeElement","isHyperlinkElement","createValueFromOtherValue","otherValue","destinationIsTextual","otherIsTextual","stringValue","textValue","isCalculatedElement","isNumeric","displayValue","isPresent","isEmpty","isAddressElement","clearInvisibleValues","valuesForConditions","record","elementsToRemove","cache","all","skipElement","isHidden","hasHiddenParent","shouldBeVisible","shouldElementBeVisible","push","blankValue","result","searchValues","searchValue","searchableValue","trim","join","values","apply","items","item","mediaValues","repeatableItems"],"mappings":"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","file":"form-values.js","sourcesContent":["import FormValueFactory from './form-value-factory';\nimport FormValue from './form-value';\nimport TextualElement from '../elements/textual-element';\nimport TextUtils from '../utils/text-utils';\nimport Condition from '../elements/condition';\nimport MediaValue from './media-value';\nimport SignatureValue from './signature-value';\nimport RepeatableValue from './repeatable-value';\n\nconst SearchValueSeparator = ' ';\n\nexport default class FormValues {\n  constructor(container, attributes) {\n    this._values = {};\n    this.container = container;\n    this.loadValues(container.elements, attributes || {});\n  }\n\n  get all() {\n    const result = [];\n\n    for (const key of Object.keys(this._values)) {\n      result.push(this._values[key]);\n    }\n\n    return result;\n  }\n\n  get(key) {\n    return this._values[key];\n  }\n\n  set(key, value) {\n    if (value && !(value instanceof FormValue)) {\n      throw new Error('Invalid value ' + value);\n    }\n\n    if (value != null) {\n      this._values[key] = value;\n    } else {\n      delete this._values[key];\n    }\n  }\n\n  find(dataName) {\n    const element = this.container.elementsByDataName[dataName];\n\n    if (element) {\n      return this.get(element.key);\n    }\n\n    return null;\n  }\n\n  loadValues(elements, attributes) {\n    for (const element of elements) {\n      this.loadValue(element, attributes);\n    }\n  }\n\n  loadValue(element, attributes) {\n    if (element.isSectionElement) {\n      this.loadValues(element.elements, attributes);\n    } else {\n      const rawValue = attributes[element.key];\n\n      if (rawValue != null) {\n        const formValue = FormValueFactory.create(element, rawValue);\n\n        this.set(element.key, formValue);\n      }\n    }\n  }\n\n  toJSON() {\n    const json = {};\n\n    for (const key of Object.keys(this._values)) {\n      const formValue = this._values[key];\n\n      if (formValue) {\n        const jsonValue = formValue.toJSON();\n\n        if (jsonValue) {\n          json[key] = jsonValue;\n        }\n      }\n    }\n\n    return json;\n  }\n\n  copy() {\n    return new FormValues(this.container, this.toJSON());\n  }\n\n  merge(formValues) {\n    if (!(formValues instanceof FormValues)) {\n      throw new Error('Invalid values');\n    }\n\n    for (const key of Object.keys(formValues._values)) {\n      const formValue = formValues._values[key];\n\n      this.set(key, formValue);\n    }\n  }\n\n  createValue(element, rawValue) {\n    if (element == null) {\n      throw new Error('element cannot be null');\n    }\n\n    return FormValueFactory.create(element, rawValue != null ? rawValue : null);\n  }\n\n  createValueFromString(element, string) {\n    if (element.isTextElement) {\n      return this.createValue(element, string);\n    } else if (element.isChoiceElement) {\n      const choice = element.choiceByValue(string);\n\n      if (choice) {\n        return this.createValue(element, {choice_values: [ choice.value ]});\n      }\n    } else if (element.isYesNoElement) {\n      return this.createValue(element, string);\n    } else if (element.isBarcodeElement) {\n      return this.createValue(element, string);\n    } else if (element.isClassificationElement) {\n      return this.createValue(element, {choice_values: [ string ]});\n    } else if (element.isDateElement) {\n      return this.createValue(element, string);\n    } else if (element.isTimeElement) {\n      return this.createValue(element, string);\n    } else if (element.isHyperlinkElement) {\n      return this.createValue(element, string);\n    }\n\n    return null;\n  }\n\n  createValueFromOtherValue(element, otherValue) {\n    if (otherValue == null) {\n      return this.createValue(element, null);\n    }\n\n    const destinationIsTextual = element instanceof TextualElement;\n    const otherIsTextual = otherValue.element instanceof TextualElement;\n\n    if (destinationIsTextual && otherIsTextual) {\n      // converting text -> text\n      // if the other field is a calculated field and it's being copied to a regular text field,\n      // use the display value instead of the raw value so it can use the display formatting logic\n\n      let stringValue = otherValue.textValue;\n\n      if (otherValue.element.isCalculatedElement && element.isTextElement) {\n        if (!element.isNumeric) {\n          stringValue = otherValue.displayValue;\n        }\n      }\n\n      return this.createValue(element, stringValue);\n    } else if (destinationIsTextual && !otherIsTextual) {\n      // converting choice -> text\n      if (otherValue.element.isChoiceElement || otherValue.element.isClassificationElement) {\n        const displayValue = otherValue.displayValue;\n\n        if (TextUtils.isPresent(displayValue)) {\n          return this.createValue(element, displayValue);\n        }\n      }\n    } else if (!destinationIsTextual && otherIsTextual) {\n      // converting text -> choice\n      if (element.isChoiceElement) {\n        if (!otherValue.isEmpty) {\n          return this.createValueFromString(element, otherValue.textValue);\n        }\n      }\n    } else if (!destinationIsTextual && !otherIsTextual) {\n      // choice -> choice\n      if ((element.isChoiceElement && otherValue.element.isChoiceElement) ||\n          (element.isClassificationElement && otherValue.element.isClassificationElement)) {\n        return this.createValue(element, otherValue.toJSON());\n      } else if (element.isAddressElement && otherValue.element.isAddressElement) {\n        // address -> address\n        return this.createValue(element, otherValue.toJSON());\n      }\n    }\n\n    return null;\n  }\n\n  get searchableValue() {\n    const searchValues = [];\n\n    for (const key of Object.keys(this._values)) {\n      const formValue = this._values[key];\n\n      if (formValue) {\n        const searchValue = formValue.searchableValue;\n\n        if (searchValue != null) {\n          searchValues.push(searchValue.trim());\n        }\n      }\n    }\n\n    return searchValues.join(SearchValueSeparator).trim();\n  }\n\n  clearInvisibleValues(valuesForConditions, record) {\n    const elementsToRemove = [];\n\n    const cache = {};\n\n    for (const formValue of this.all) {\n      const element = formValue.element;\n\n      // don't clear out fields that are explicitly marked hidden, or have any parents explicitly marked as hidden\n      const skipElement = element.isHidden || element.hasHiddenParent;\n\n      if (!skipElement) {\n        const shouldBeVisible = Condition.shouldElementBeVisible(element,\n                                                                 record,\n                                                                 valuesForConditions,\n                                                                 cache);\n\n        if (!shouldBeVisible) {\n          elementsToRemove.push(element);\n        }\n      }\n    }\n\n    for (const element of elementsToRemove) {\n      const blankValue = this.createValue(element, null);\n\n      this.set(element.key, blankValue);\n    }\n  }\n\n  get mediaValues() {\n    const values = [];\n\n    for (const formValue of this.all) {\n      if (formValue instanceof MediaValue) {\n        values.push.apply(values, formValue.items);\n      } else if (formValue instanceof SignatureValue) {\n        values.push(formValue);\n      } else if (formValue instanceof RepeatableValue) {\n        for (const item of formValue.items) {\n          values.push.apply(values, item.formValues.mediaValues);\n        }\n      }\n    }\n\n    return values;\n  }\n\n  get repeatableItems() {\n    const items = [];\n\n    for (const formValue of this.all) {\n      if (formValue instanceof RepeatableValue) {\n        items.push.apply(items, formValue.items);\n\n        for (const item of formValue.items) {\n          items.push.apply(items, item.formValues.repeatableItems);\n        }\n      }\n    }\n\n    return items;\n  }\n}\n"]}