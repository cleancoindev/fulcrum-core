{"version":3,"sources":["../../src/values/form-values.js"],"names":[],"mappings":"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","file":"form-values.js","sourcesContent":["import FormValueFactory from './form-value-factory';\nimport FormValue from './form-value';\n\nconst SearchValueSeparator = ' ';\n\nexport default class FormValues {\n  constructor(elements, attributes) {\n    this._values = {};\n    this.elements = elements;\n    this.loadValues(this.elements, attributes);\n  }\n\n  getFormValue(key) {\n    return this._values[key];\n  }\n\n  setFormValue(key, value) {\n    if (value && !(value instanceof FormValue)) {\n      throw new Error('Invalid value ' + value);\n    }\n\n    if (value != null) {\n      this._values[key] = value;\n    } else {\n      delete this._values[key];\n    }\n  }\n\n  loadValues(elements, attributes) {\n    for (let element of elements) {\n      this.loadValue(element, attributes);\n    }\n  }\n\n  loadValue(element, attributes) {\n    if (element.isSectionElement) {\n      this.loadValues(element.elements, attributes);\n    } else {\n      const rawValue = attributes[element.key];\n\n      if (rawValue != null) {\n        const formValue = FormValueFactory.create(element, rawValue);\n\n        this.setFormValue(element.key, formValue);\n      }\n    }\n  }\n\n  toJSON() {\n    const json = {};\n\n    for (let key of Object.keys(this._values)) {\n      const formValue = this._values[key];\n\n      if (formValue) {\n        const jsonValue = formValue.toJSON();\n\n        if (jsonValue) {\n          json[key] = jsonValue;\n        }\n      }\n    }\n\n    return json;\n  }\n\n  copy() {\n    return new FormValues(this.elements, this.toJSON());\n  }\n\n  merge(formValues) {\n    if (!(formValues instanceof FormValues)) {\n      throw new Error('Invalid values');\n    }\n\n    for (let key of Object.keys(this._values)) {\n      const formValue = this._values[key];\n\n      this.setFormValue(key, formValue);\n    }\n  }\n\n  createValue(element, rawValue) {\n    return FormValueFactory.create(element, rawValue != null ? rawValue : null);\n  }\n\n  get searchableValue() {\n    const searchValues = [];\n\n    for (let key of Object.keys(this._values)) {\n      const formValue = this._values[key];\n\n      if (formValue) {\n        const searchValue = formValue.searchableValue();\n\n        if (searchValue != null) {\n          searchValues.push(searchValue);\n        }\n      }\n    }\n\n    return searchValues.join(SearchValueSeparator);\n  }\n}\n"]}