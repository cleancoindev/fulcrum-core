{"version":3,"sources":["../../src/values/form-values.js"],"names":[],"mappings":"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","file":"form-values.js","sourcesContent":["import FormValueFactory from './form-value-factory';\nimport FormValue from './form-value';\nimport TextualElement from '../elements/textual-element';\nimport TextUtils from '../utils/text-utils';\nimport Condition from '../elements/condition';\nimport MediaValue from './media-value';\nimport SignatureValue from './signature-value';\nimport RepeatableValue from './repeatable-value';\n\nconst SearchValueSeparator = ' ';\n\nexport default class FormValues {\n  constructor(container, attributes) {\n    this._values = {};\n    this.container = container;\n    this.loadValues(container.elements, attributes);\n  }\n\n  get all() {\n    const result = [];\n\n    for (const key of Object.keys(this._values)) {\n      result.push(this._values[key]);\n    }\n\n    return result;\n  }\n\n  get(key) {\n    return this._values[key];\n  }\n\n  set(key, value) {\n    if (value && !(value instanceof FormValue)) {\n      throw new Error('Invalid value ' + value);\n    }\n\n    if (value != null) {\n      this._values[key] = value;\n    } else {\n      delete this._values[key];\n    }\n  }\n\n  find(dataName) {\n    const element = this.container.elementsByDataName[dataName];\n\n    if (element) {\n      return this.get(element.key);\n    }\n\n    return null;\n  }\n\n  loadValues(elements, attributes) {\n    for (const element of elements) {\n      this.loadValue(element, attributes);\n    }\n  }\n\n  loadValue(element, attributes) {\n    if (element.isSectionElement) {\n      this.loadValues(element.elements, attributes);\n    } else {\n      const rawValue = attributes[element.key];\n\n      if (rawValue != null) {\n        const formValue = FormValueFactory.create(element, rawValue);\n\n        this.set(element.key, formValue);\n      }\n    }\n  }\n\n  toJSON() {\n    const json = {};\n\n    for (const key of Object.keys(this._values)) {\n      const formValue = this._values[key];\n\n      if (formValue) {\n        const jsonValue = formValue.toJSON();\n\n        if (jsonValue) {\n          json[key] = jsonValue;\n        }\n      }\n    }\n\n    return json;\n  }\n\n  copy() {\n    return new FormValues(this.container, this.toJSON());\n  }\n\n  merge(formValues) {\n    if (!(formValues instanceof FormValues)) {\n      throw new Error('Invalid values');\n    }\n\n    for (const key of Object.keys(formValues._values)) {\n      const formValue = formValues._values[key];\n\n      this.set(key, formValue);\n    }\n  }\n\n  createValue(element, rawValue) {\n    if (element == null) {\n      throw new Error('element cannot be null');\n    }\n\n    return FormValueFactory.create(element, rawValue != null ? rawValue : null);\n  }\n\n  createValueFromString(element, string) {\n    if (element.isTextElement) {\n      return this.createValue(element, string);\n    } else if (element.isChoiceElement) {\n      const choice = element.choiceByValue(string);\n\n      if (choice) {\n        return this.createValue(element, {choice_values: [ choice.value ]});\n      }\n    } else if (element.isYesNoElement) {\n      return this.createValue(element, string);\n    } else if (element.isBarcodeElement) {\n      return this.createValue(element, string);\n    } else if (element.isClassificationElement) {\n      return this.createValue(element, {choice_values: [ string ]});\n    } else if (element.isDateElement) {\n      return this.createValue(element, string);\n    } else if (element.isTimeElement) {\n      return this.createValue(element, string);\n    } else if (element.isHyperlinkElement) {\n      return this.createValue(element, string);\n    }\n\n    return null;\n  }\n\n  createValueFromOtherValue(element, otherValue) {\n    if (otherValue == null) {\n      return this.createValue(element, null);\n    }\n\n    const destinationIsTextual = element instanceof TextualElement;\n    const otherIsTextual = otherValue.element instanceof TextualElement;\n\n    if (destinationIsTextual && otherIsTextual) {\n      // converting text -> text\n      // if the other field is a calculated field and it's being copied to a regular text field,\n      // use the display value instead of the raw value so it can use the display formatting logic\n\n      let stringValue = otherValue.textValue;\n\n      if (otherValue.element.isCalculatedElement && element.isTextElement) {\n        if (!element.isNumeric) {\n          stringValue = otherValue.displayValue;\n        }\n      }\n\n      return this.createValue(element, stringValue);\n    } else if (destinationIsTextual && !otherIsTextual) {\n      // converting choice -> text\n      if (otherValue.element.isChoiceElement || otherValue.element.isClassificationElement) {\n        const displayValue = otherValue.displayValue;\n\n        if (TextUtils.isPresent(displayValue)) {\n          return this.createValue(element, displayValue);\n        }\n      }\n    } else if (!destinationIsTextual && otherIsTextual) {\n      // converting text -> choice\n      if (element.isChoiceElement) {\n        if (!otherValue.isEmpty) {\n          return this.createValueFromString(element, otherValue.textValue);\n        }\n      }\n    } else if (!destinationIsTextual && !otherIsTextual) {\n      // choice -> choice\n      if ((element.isChoiceElement && otherValue.element.isChoiceElement) ||\n          (element.isClassificationElement && otherValue.element.isClassificationElement)) {\n        return this.createValue(element, otherValue.toJSON());\n      } else if (element.isAddressElement && otherValue.element.isAddressElement) {\n        // address -> address\n        return this.createValue(element, otherValue.toJSON());\n      }\n    }\n\n    return null;\n  }\n\n  get searchableValue() {\n    const searchValues = [];\n\n    for (const key of Object.keys(this._values)) {\n      const formValue = this._values[key];\n\n      if (formValue) {\n        const searchValue = formValue.searchableValue;\n\n        if (searchValue != null) {\n          searchValues.push(searchValue);\n        }\n      }\n    }\n\n    return searchValues.join(SearchValueSeparator);\n  }\n\n  clearInvisibleValues(valuesForConditions, record) {\n    const elementsToRemove = [];\n\n    const cache = {};\n\n    for (const formValue of this.all) {\n      const element = formValue.element;\n\n      // don't clear out fields that are explicitly marked hidden, or have any parents explicitly marked as hidden\n      const skipElement = element.isHidden || element.hasHiddenParent;\n\n      if (!skipElement) {\n        const shouldBeVisible = Condition.shouldElementBeVisible(element,\n                                                                 record,\n                                                                 valuesForConditions,\n                                                                 cache);\n\n        if (!shouldBeVisible) {\n          elementsToRemove.push(element);\n        }\n      }\n    }\n\n    for (const element of elementsToRemove) {\n      const blankValue = this.createValue(element, null);\n\n      this.set(element.key, blankValue);\n    }\n  }\n\n  get mediaValues() {\n    const values = [];\n\n    for (const formValue of this.all) {\n      if (formValue instanceof MediaValue) {\n        values.push.apply(values, formValue.items);\n      } else if (formValue instanceof SignatureValue) {\n        values.push(formValue);\n      } else if (formValue instanceof RepeatableValue) {\n        for (const item of formValue.items) {\n          values.push.apply(values, item.formValues.mediaValues);\n        }\n      }\n    }\n\n    return values;\n  }\n}\n"]}