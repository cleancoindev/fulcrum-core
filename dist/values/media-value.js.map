{"version":3,"sources":["../../src/values/media-value.js"],"names":["MediaValue","element","items","_items","Array","isArray","item","push","ItemClass","format","part","formatMediaURL","formatMediaViewerURL","args","isEmpty","map","caption","mediaID","toJSON","isEqual","value","contains","startsWith","isLessThan","length","NumberUtils","parseDouble","isGreaterThan","mapItems","callback","slice","addItem","id","removeItem","index","splice","ids","TextUtils","isPresent","join","captions","key","MultipleValueItem","FormValue"],"mappings":"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","sourcesContent":["import FormValue from './form-value';\nimport MultipleValueItem from './multiple-value-item';\nimport TextUtils from '../utils/text-utils';\nimport NumberUtils from '../utils/number-utils';\n\nexport default class MediaValue extends FormValue {\n  constructor(element, items) {\n    super(element, items);\n\n    this._items = [];\n\n    if (Array.isArray(items)) {\n      for (const item of items) {\n        this._items.push(new this.ItemClass(this, item));\n      }\n    }\n  }\n\n  get isEmpty() {\n    return this._items.length === 0;\n  }\n\n  get searchableValue() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const ids = [];\n\n    for (const item of this._items) {\n      if (TextUtils.isPresent(item.caption)) {\n        ids.push(item.caption);\n      }\n    }\n\n    return ids.join(' ');\n  }\n\n  get length() {\n    return this._items.length;\n  }\n\n  format({part = null, formatMediaURL, formatMediaViewerURL, ...args}) {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    if (part === 'captions') {\n      return this.items.map(item => item.caption);\n    } else if (part === 'view' && formatMediaViewerURL) {\n      return formatMediaViewerURL(this, args);\n    } else if (part === 'urls' && formatMediaURL) {\n      return this.items.map(item => formatMediaURL(item, args));\n    }\n\n    return this.items.map(item => item.mediaID);\n  }\n\n  get columnValue() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const ids = [];\n    const captions = [];\n\n    for (const item of this._items) {\n      ids.push(item.mediaID);\n      captions.push(item.caption);\n    }\n\n    const value = {};\n\n    value['f' + this.element.key + '_captions'] = captions;\n    value['f' + this.element.key] = ids;\n\n    return value;\n  }\n\n  get multipleValues() {\n    const items = [];\n\n    for (const item of this._items) {\n      items.push(new MultipleValueItem(this.element, item.mediaID));\n    }\n\n    return items;\n  }\n\n  toJSON() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const items = [];\n\n    for (const item of this._items) {\n      items.push(item.toJSON());\n    }\n\n    return items;\n  }\n\n  isEqual(value) {\n    return false;\n  }\n\n  contains(value) {\n    return false;\n  }\n\n  startsWith(value) {\n    return false;\n  }\n\n  isLessThan(value) {\n    return this.length < NumberUtils.parseDouble(value);\n  }\n\n  isGreaterThan(value) {\n    return this.length > NumberUtils.parseDouble(value);\n  }\n\n  mapItems(callback) {\n    return this._items.slice().map(callback);\n  }\n\n  addItem(id, caption) {\n    const item = new this.ItemClass(this, { caption: caption });\n\n    item.mediaID = id;\n\n    this._items.push(item);\n\n    return item;\n  }\n\n  removeItem(id) {\n    for (let index = 0; index < this._items.length; ++index) {\n      if (this._items[index].mediaID === id) {\n        const item = this._items[index];\n\n        this._items.splice(index, 1);\n\n        return item;\n      }\n    }\n\n    return null;\n  }\n\n  get hasCaptions() {\n    for (const item of this._items) {\n      if (TextUtils.isPresent(item.caption)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  // return a copy until it's determined that a mutable API is necessary\n  get items() {\n    return this._items.slice();\n  }\n}\n"],"file":"media-value.js"}