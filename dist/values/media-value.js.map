{"version":3,"sources":["../../src/values/media-value.js"],"names":["MediaValue","element","items","_items","Array","isArray","item","push","ItemClass","toJSON","isEmpty","isEqual","value","contains","startsWith","isLessThan","length","parseDouble","isGreaterThan","mapItems","callback","slice","map","addItem","id","caption","mediaID","removeItem","index","splice","ids","isPresent","join","captions","key"],"mappings":"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","file":"media-value.js","sourcesContent":["import FormValue from './form-value';\nimport MultipleValueItem from './multiple-value-item';\nimport TextUtils from '../utils/text-utils';\nimport NumberUtils from '../utils/number-utils';\n\nexport default class MediaValue extends FormValue {\n  constructor(element, items) {\n    super(element, items);\n\n    this._items = [];\n\n    if (Array.isArray(items)) {\n      for (const item of items) {\n        this._items.push(new this.ItemClass(this, item));\n      }\n    }\n  }\n\n  get isEmpty() {\n    return this._items.length === 0;\n  }\n\n  get searchableValue() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const ids = [];\n\n    for (const item of this._items) {\n      if (TextUtils.isPresent(item.caption)) {\n        ids.push(item.caption);\n      }\n    }\n\n    return ids.join(' ');\n  }\n\n  get length() {\n    return this._items.length;\n  }\n\n  get columnValue() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const ids = [];\n    const captions = [];\n\n    for (const item of this._items) {\n      ids.push(item.mediaID);\n      captions.push(item.caption);\n    }\n\n    const value = {};\n\n    value['f' + this.element.key + '_captions'] = captions;\n    value['f' + this.element.key] = ids;\n\n    return value;\n  }\n\n  get multipleValues() {\n    const items = [];\n\n    for (const item of this._items) {\n      items.push(new MultipleValueItem(this.element, item.mediaID));\n    }\n\n    return items;\n  }\n\n  toJSON() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const items = [];\n\n    for (const item of this._items) {\n      items.push(item.toJSON());\n    }\n\n    return items;\n  }\n\n  isEqual(value) {\n    return false;\n  }\n\n  contains(value) {\n    return false;\n  }\n\n  startsWith(value) {\n    return false;\n  }\n\n  isLessThan(value) {\n    return this.length < NumberUtils.parseDouble(value);\n  }\n\n  isGreaterThan(value) {\n    return this.length > NumberUtils.parseDouble(value);\n  }\n\n  mapItems(callback) {\n    return this._items.slice().map(callback);\n  }\n\n  addItem(id, caption) {\n    const item = new this.ItemClass(this, { caption: caption });\n\n    item.mediaID = id;\n\n    this._items.push(item);\n\n    return item;\n  }\n\n  removeItem(id) {\n    for (let index = 0; index < this._items.length; ++index) {\n      if (this._items[index].mediaID === id) {\n        const item = this._items[index];\n\n        this._items.splice(index, 1);\n\n        return item;\n      }\n    }\n\n    return null;\n  }\n\n  get hasCaptions() {\n    for (const item of this._items) {\n      if (TextUtils.isPresent(item.caption)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  // return a copy until it's determined that a mutable API is necessary\n  get items() {\n    return this._items.slice();\n  }\n}\n"]}