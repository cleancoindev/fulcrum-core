{"version":3,"sources":["../../src/values/media-value.js"],"names":["MediaValue","element","items","_items","Array","isArray","item","push","ItemClass","format","part","formatMediaURL","formatMediaViewerURL","args","isEmpty","map","caption","mediaID","toJSON","isEqual","value","contains","startsWith","isLessThan","length","NumberUtils","parseDouble","isGreaterThan","mapItems","callback","slice","addItem","id","removeItem","index","splice","ids","TextUtils","isPresent","join","captions","key","MultipleValueItem","FormValue"],"mappings":"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","file":"media-value.js","sourcesContent":["import FormValue from './form-value';\nimport MultipleValueItem from './multiple-value-item';\nimport TextUtils from '../utils/text-utils';\nimport NumberUtils from '../utils/number-utils';\n\nexport default class MediaValue extends FormValue {\n  constructor(element, items) {\n    super(element, items);\n\n    this._items = [];\n\n    if (Array.isArray(items)) {\n      for (const item of items) {\n        this._items.push(new this.ItemClass(this, item));\n      }\n    }\n  }\n\n  get isEmpty() {\n    return this._items.length === 0;\n  }\n\n  get searchableValue() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const ids = [];\n\n    for (const item of this._items) {\n      if (TextUtils.isPresent(item.caption)) {\n        ids.push(item.caption);\n      }\n    }\n\n    return ids.join(' ');\n  }\n\n  get length() {\n    return this._items.length;\n  }\n\n  format({part = null, formatMediaURL, formatMediaViewerURL, ...args}) {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    if (part === 'captions') {\n      return this.items.map(item => item.caption);\n    } else if (part === 'view' && formatMediaViewerURL) {\n      return formatMediaViewerURL(this, args);\n    } else if (part === 'urls' && formatMediaURL) {\n      return this.items.map(item => formatMediaURL(item, args));\n    }\n\n    return this.items.map(item => item.mediaID);\n  }\n\n  get columnValue() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const ids = [];\n    const captions = [];\n\n    for (const item of this._items) {\n      ids.push(item.mediaID);\n      captions.push(item.caption);\n    }\n\n    const value = {};\n\n    value['f' + this.element.key + '_captions'] = captions;\n    value['f' + this.element.key] = ids;\n\n    return value;\n  }\n\n  get multipleValues() {\n    const items = [];\n\n    for (const item of this._items) {\n      items.push(new MultipleValueItem(this.element, item.mediaID));\n    }\n\n    return items;\n  }\n\n  toJSON() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const items = [];\n\n    for (const item of this._items) {\n      items.push(item.toJSON());\n    }\n\n    return items;\n  }\n\n  isEqual(value) {\n    return false;\n  }\n\n  contains(value) {\n    return false;\n  }\n\n  startsWith(value) {\n    return false;\n  }\n\n  isLessThan(value) {\n    return this.length < NumberUtils.parseDouble(value);\n  }\n\n  isGreaterThan(value) {\n    return this.length > NumberUtils.parseDouble(value);\n  }\n\n  mapItems(callback) {\n    return this._items.slice().map(callback);\n  }\n\n  addItem(id, caption) {\n    const item = new this.ItemClass(this, { caption: caption });\n\n    item.mediaID = id;\n\n    this._items.push(item);\n\n    return item;\n  }\n\n  removeItem(id) {\n    for (let index = 0; index < this._items.length; ++index) {\n      if (this._items[index].mediaID === id) {\n        const item = this._items[index];\n\n        this._items.splice(index, 1);\n\n        return item;\n      }\n    }\n\n    return null;\n  }\n\n  get hasCaptions() {\n    for (const item of this._items) {\n      if (TextUtils.isPresent(item.caption)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  // return a copy until it's determined that a mutable API is necessary\n  get items() {\n    return this._items.slice();\n  }\n}\n"]}