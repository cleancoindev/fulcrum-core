{"version":3,"sources":["../../src/values/record-link-value.js"],"names":["RecordLinkValue","element","items","_items","item","push","format","part","isEmpty","map","displayValue","id","toJSON","isEqual","value","contains","startsWith","isLessThan","length","parseDouble","isGreaterThan","addRecord","record","record_id","_record","insertItem","itemIndex","index","removeItem","splice","ids","slice"],"mappings":"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","file":"record-link-value.js","sourcesContent":["import FormValue from './form-value';\nimport RecordLinkItemValue from './record-link-item-value';\nimport MultipleValueItem from './multiple-value-item';\nimport NumberUtils from '../utils/number-utils';\n\nexport default class RecordLinkValue extends FormValue {\n  constructor(element, items) {\n    super(element, items);\n\n    this._items = [];\n\n    if (items) {\n      for (const item of items) {\n        this._items.push(new RecordLinkItemValue(this, item));\n      }\n    }\n  }\n\n  get isEmpty() {\n    return this.length === 0;\n  }\n\n  get displayValue() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    if (this.length === 1) {\n      return '1 record';\n    }\n\n    return this.length + ' records';\n  }\n\n  get searchableValue() {\n    return this.displayValue;\n  }\n\n  get length() {\n    return this._items.length;\n  }\n\n  format({part = null}) {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    if (part === 'titles') {\n      return this.items.map(item => item.displayValue);\n    }\n\n    return this.items.map(item => item.id);\n  }\n\n  toJSON() {\n    const items = [];\n\n    for (const item of this._items) {\n      items.push(item.toJSON());\n    }\n\n    return items;\n  }\n\n  get columnValue() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const ids = [];\n\n    for (const item of this._items) {\n      ids.push(item.id);\n    }\n\n    return ids;\n  }\n\n  get multipleValues() {\n    const ids = [];\n\n    for (const item of this._items) {\n      ids.push(new MultipleValueItem(this.element, item.id));\n    }\n\n    return ids;\n  }\n\n  isEqual(value) {\n    return false;\n  }\n\n  contains(value) {\n    return false;\n  }\n\n  startsWith(value) {\n    return false;\n  }\n\n  isLessThan(value) {\n    return this.length < NumberUtils.parseDouble(value);\n  }\n\n  isGreaterThan(value) {\n    return this.length > NumberUtils.parseDouble(value);\n  }\n\n  get items() {\n    return this._items.slice();\n  }\n\n  addRecord(record) {\n    const item = new RecordLinkItemValue(this, {record_id: record.id});\n\n    item._record = record;\n\n    this.insertItem(item);\n  }\n\n  itemIndex(id) {\n    for (let index = 0; index < this._items.length; ++index) {\n      if (id === this._items[index].id) {\n        return index;\n      }\n    }\n\n    return -1;\n  }\n\n  insertItem(item) {\n    const index = this.itemIndex(item.id);\n\n    if (index > -1) {\n      this._items[index] = item;\n    } else {\n      this._items.push(item);\n    }\n  }\n\n  removeItem(id) {\n    const index = this.itemIndex(id);\n\n    if (index > -1) {\n      const item = this._items[index];\n\n      this._items.splice(index, 1);\n\n      return item;\n    }\n\n    return null;\n  }\n}\n"]}