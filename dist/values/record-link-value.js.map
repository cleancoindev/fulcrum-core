{"version":3,"sources":["../../src/values/record-link-value.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAKqB,eAAe;YAAf,eAAe;;AAClC,WADmB,eAAe,CACtB,OAAO,EAAE,KAAK,EAAE;0BADT,eAAe;;uEAAf,eAAe,aAE1B,OAAO,EAAE,KAAK;;AAEpB,UAAK,MAAM,GAAG,EAAE,CAAC;;AAEjB,QAAI,KAAK,EAAE;;;;;;AACT,6BAAiB,KAAK,8HAAE;cAAf,IAAI;;AACX,gBAAK,MAAM,CAAC,IAAI,CAAC,kCAAwB,IAAI,CAAC,CAAC,CAAC;SACjD;;;;;;;;;;;;;;;KACF;;GACF;;eAXkB,eAAe;;6BAqCzB;AACP,UAAM,KAAK,GAAG,EAAE,CAAC;;;;;;;AAEjB,8BAAiB,IAAI,CAAC,MAAM,mIAAE;cAArB,IAAI;;AACX,eAAK,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;SAC3B;;;;;;;;;;;;;;;;AAED,aAAO,KAAK,CAAC;KACd;;;4BAgBO,KAAK,EAAE;AACb,aAAO,KAAK,CAAC;KACd;;;6BAEQ,KAAK,EAAE;AACd,aAAO,KAAK,CAAC;KACd;;;+BAEU,KAAK,EAAE;AAChB,aAAO,KAAK,CAAC;KACd;;;+BAEU,KAAK,EAAE;AAChB,aAAO,IAAI,CAAC,MAAM,GAAG,sBAAY,WAAW,CAAC,KAAK,CAAC,CAAC;KACrD;;;kCAEa,KAAK,EAAE;AACnB,aAAO,IAAI,CAAC,MAAM,GAAG,sBAAY,WAAW,CAAC,KAAK,CAAC,CAAC;KACrD;;;wBAlEa;AACZ,aAAO,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC;KAC1B;;;wBAEkB;AACjB,UAAI,IAAI,CAAC,OAAO,EAAE;AAChB,eAAO,IAAI,CAAC;OACb;;AAED,UAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;AACrB,eAAO,UAAU,CAAC;OACnB;;AAED,aAAO,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC;KACjC;;;wBAEqB;AACpB,aAAO,IAAI,CAAC,YAAY,CAAC;KAC1B;;;wBAEY;AACX,aAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;KAC3B;;;wBAYiB;AAChB,aAAO,IAAI,CAAC;KACb;;;wBAEoB;AACnB,UAAM,GAAG,GAAG,EAAE,CAAC;;;;;;;AAEf,8BAAiB,IAAI,CAAC,MAAM,mIAAE;cAArB,IAAI;;AACX,aAAG,CAAC,IAAI,CAAC,gCAAsB,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;SAC9D;;;;;;;;;;;;;;;;AAED,aAAO,GAAG,CAAC;KACZ;;;SA3DkB,eAAe;;;kBAAf,eAAe","file":"record-link-value.js","sourcesContent":["import FormValue from './form-value';\nimport RecordLinkItemValue from './record-link-item-value';\nimport MultipleValueItem from './multiple-value-item';\nimport NumberUtils from '../utils/number-utils';\n\nexport default class RecordLinkValue extends FormValue {\n  constructor(element, items) {\n    super(element, items);\n\n    this._items = [];\n\n    if (items) {\n      for (let item of items) {\n        this._items.push(new RecordLinkItemValue(item));\n      }\n    }\n  }\n\n  get isEmpty() {\n    return this.length === 0;\n  }\n\n  get displayValue() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    if (this.length === 1) {\n      return '1 record';\n    }\n\n    return this.length + ' records';\n  }\n\n  get searchableValue() {\n    return this.displayValue;\n  }\n\n  get length() {\n    return this._items.length;\n  }\n\n  toJSON() {\n    const items = [];\n\n    for (let item of this._items) {\n      items.push(item.toJSON());\n    }\n\n    return items;\n  }\n\n  get columnValue() {\n    return null;\n  }\n\n  get multipleValues() {\n    const ids = [];\n\n    for (let item of this._items) {\n      ids.push(new MultipleValueItem(this.element, item.recordID));\n    }\n\n    return ids;\n  }\n\n  isEqual(value) {\n    return false;\n  }\n\n  contains(value) {\n    return false;\n  }\n\n  startsWith(value) {\n    return false;\n  }\n\n  isLessThan(value) {\n    return this.length < NumberUtils.parseDouble(value);\n  }\n\n  isGreaterThan(value) {\n    return this.length > NumberUtils.parseDouble(value);\n  }\n}\n"]}