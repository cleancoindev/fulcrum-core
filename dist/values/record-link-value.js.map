{"version":3,"sources":["../../src/values/record-link-value.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAKe,MAAM,eAAN,6BAAwC;AACrD,cAAY,OAAZ,EAAqB,KAArB,EAA4B;AAC1B,UAAM,OAAN,EAAe,KAAf,EAD0B;;AAG1B,SAAK,MAAL,GAAc,EAAd,CAH0B;;AAK1B,QAAI,KAAJ,EAAW;AACT,WAAK,IAAI,IAAJ,IAAY,KAAjB,EAAwB;AACtB,aAAK,MAAL,CAAY,IAAZ,CAAiB,kCAAwB,IAAxB,CAAjB,EADsB;OAAxB;KADF;GALF;;AAYA,MAAI,OAAJ,GAAc;AACZ,WAAO,KAAK,MAAL,KAAgB,CAAhB,CADK;GAAd;;AAIA,MAAI,YAAJ,GAAmB;AACjB,QAAI,KAAK,OAAL,EAAc;AAChB,aAAO,IAAP,CADgB;KAAlB;;AAIA,QAAI,KAAK,MAAL,KAAgB,CAAhB,EAAmB;AACrB,aAAO,UAAP,CADqB;KAAvB;;AAIA,WAAO,KAAK,MAAL,GAAc,UAAd,CATU;GAAnB;;AAYA,MAAI,eAAJ,GAAsB;AACpB,WAAO,KAAK,YAAL,CADa;GAAtB;;AAIA,MAAI,MAAJ,GAAa;AACX,WAAO,KAAK,MAAL,CAAY,MAAZ,CADI;GAAb;;AAIA,WAAS;AACP,UAAM,QAAQ,EAAR,CADC;;AAGP,SAAK,IAAI,IAAJ,IAAY,KAAK,MAAL,EAAa;AAC5B,YAAM,IAAN,CAAW,KAAK,MAAL,EAAX,EAD4B;KAA9B;;AAIA,WAAO,KAAP,CAPO;GAAT;;AAUA,MAAI,WAAJ,GAAkB;AAChB,WAAO,IAAP,CADgB;GAAlB;;AAIA,MAAI,cAAJ,GAAqB;AACnB,UAAM,MAAM,EAAN,CADa;;AAGnB,SAAK,IAAI,IAAJ,IAAY,KAAK,MAAL,EAAa;AAC5B,UAAI,IAAJ,CAAS,gCAAsB,KAAK,OAAL,EAAc,KAAK,QAAL,CAA7C,EAD4B;KAA9B;;AAIA,WAAO,GAAP,CAPmB;GAArB;;AAUA,UAAQ,KAAR,EAAe;AACb,WAAO,KAAP,CADa;GAAf;;AAIA,WAAS,KAAT,EAAgB;AACd,WAAO,KAAP,CADc;GAAhB;;AAIA,aAAW,KAAX,EAAkB;AAChB,WAAO,KAAP,CADgB;GAAlB;;AAIA,aAAW,KAAX,EAAkB;AAChB,WAAO,KAAK,MAAL,GAAc,sBAAY,WAAZ,CAAwB,KAAxB,CAAd,CADS;GAAlB;;AAIA,gBAAc,KAAd,EAAqB;AACnB,WAAO,KAAK,MAAL,GAAc,sBAAY,WAAZ,CAAwB,KAAxB,CAAd,CADY;GAArB;CA7Ea;kBAAM","file":"record-link-value.js","sourcesContent":["import FormValue from './form-value';\nimport RecordLinkItemValue from './record-link-item-value';\nimport MultipleValueItem from './multiple-value-item';\nimport NumberUtils from '../utils/number-utils';\n\nexport default class RecordLinkValue extends FormValue {\n  constructor(element, items) {\n    super(element, items);\n\n    this._items = [];\n\n    if (items) {\n      for (let item of items) {\n        this._items.push(new RecordLinkItemValue(item));\n      }\n    }\n  }\n\n  get isEmpty() {\n    return this.length === 0;\n  }\n\n  get displayValue() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    if (this.length === 1) {\n      return '1 record';\n    }\n\n    return this.length + ' records';\n  }\n\n  get searchableValue() {\n    return this.displayValue;\n  }\n\n  get length() {\n    return this._items.length;\n  }\n\n  toJSON() {\n    const items = [];\n\n    for (let item of this._items) {\n      items.push(item.toJSON());\n    }\n\n    return items;\n  }\n\n  get columnValue() {\n    return null;\n  }\n\n  get multipleValues() {\n    const ids = [];\n\n    for (let item of this._items) {\n      ids.push(new MultipleValueItem(this.element, item.recordID));\n    }\n\n    return ids;\n  }\n\n  isEqual(value) {\n    return false;\n  }\n\n  contains(value) {\n    return false;\n  }\n\n  startsWith(value) {\n    return false;\n  }\n\n  isLessThan(value) {\n    return this.length < NumberUtils.parseDouble(value);\n  }\n\n  isGreaterThan(value) {\n    return this.length > NumberUtils.parseDouble(value);\n  }\n}\n"]}