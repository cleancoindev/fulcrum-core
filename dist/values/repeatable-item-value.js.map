{"version":3,"sources":["../../src/values/repeatable-item-value.js"],"names":[],"mappings":"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","file":"repeatable-item-value.js","sourcesContent":["import Feature from '../feature';\nimport FormValues from './form-values';\nimport DateUtils from '../utils/date-utils';\nimport TextUtils from '../utils/text-utils';\n\nexport default class RepeatableItemValue extends Feature {\n  constructor(element, item, index) {\n    super();\n\n    this.index = index;\n\n    this._element = element;\n    this._id = item.id;\n    this._createdAt = DateUtils.parseTimestamp(item.created_at);\n    this._updatedAt = DateUtils.parseTimestamp(item.updated_at);\n    this._formValuesJSON = item.form_values;\n\n    const geometry = item.geometry;\n\n    if (geometry != null && geometry.type === 'Point') {\n      this._latitude = geometry.coordinates[1];\n      this._longitude = geometry.coordinates[0];\n    }\n  }\n\n  get identifier() {\n    return this._id;\n  }\n\n  get createdAt() {\n    return this._createdAt;\n  }\n\n  get updatedAt() {\n    return this._updatedAt;\n  }\n\n  get formValues() {\n    if (!this._formValues) {\n      this._formValues = new FormValues(this._element.elements, this._formValuesJSON);\n    }\n\n    return this._formValues;\n  }\n\n  get hasCoordinate() {\n    return this._latitude != null && this._longitude != null;\n  }\n\n  toJSON() {\n    const json = {};\n\n    json.id = this.identifier;\n    json.created_at = DateUtils.formatTimestamp(this.createdAt);\n    json.updated_at = DateUtils.formatTimestamp(this.updatedAt);\n    json.form_values = this.formValues.toJSON();\n    json.geometry = this.geometryAsGeoJSON();\n\n    return json;\n  }\n\n  updateTimestamps() {\n    const now = new Date();\n\n    if (!this._createdAt) {\n      this._createdAt = now;\n    }\n\n    this._updatedAt = now;\n  }\n\n  get isGeometryEnabled() {\n    return this._element.isGeometryEnabled;\n  }\n\n  get displayValue() {\n    const titleFieldKeys = this.repeatableElement.titleFieldKeys;\n    const titles = [];\n\n    for (let fieldKey of titleFieldKeys) {\n      const formValue = this.formValues.getFormValue(fieldKey);\n\n      if (formValue) {\n        const displayValue = formValue.displayValue;\n\n        if (TextUtils.isPresent(displayValue)) {\n          titles.push(displayValue);\n        }\n      }\n    }\n\n    return titles.join(', ');\n  }\n\n  geometryAsGeoJSON() {\n    if (!this.hasCoordinate) {\n      return null;\n    }\n\n    return {\n      type: 'Point',\n      coordinates: [this._longitude, this._latitude]\n    };\n  }\n}\n"]}