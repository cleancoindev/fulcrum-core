{"version":3,"sources":["../../src/values/repeatable-value.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAIA,MAAM,kBAAkB,GAAlB;;AAES,MAAM,eAAN,6BAAwC;AACrD,cAAY,OAAZ,EAAqB,KAArB,EAA4B;AAC1B,UAAM,OAAN,EAAe,KAAf,EAD0B;;AAG1B,SAAK,MAAL,GAAc,EAAd,CAH0B;;AAK1B,QAAI,SAAS,IAAT,EAAe;AACjB,WAAK,IAAI,IAAJ,IAAY,KAAjB,EAAwB;AACtB,aAAK,MAAL,CAAY,IAAZ,CAAiB,kCAAwB,KAAK,OAAL,EAAc,IAAtC,CAAjB,EADsB;OAAxB;KADF;GALF;;AAYA,MAAI,OAAJ,GAAc;AACZ,WAAO,KAAK,MAAL,CAAY,MAAZ,KAAuB,CAAvB,CADK;GAAd;;AAIA,MAAI,YAAJ,GAAmB;AACjB,QAAI,KAAK,MAAL,KAAgB,CAAhB,EAAmB;AACrB,aAAO,QAAP,CADqB;KAAvB,MAEO;AACL,aAAO,KAAK,MAAL,GAAc,QAAd,CADF;KAFP;GADF;;AAQA,MAAI,eAAJ,GAAsB;AACpB,QAAI,KAAK,OAAL,EAAc;AAChB,aAAO,IAAP,CADgB;KAAlB;;AAIA,UAAM,SAAS,EAAT,CALc;;AAOpB,SAAK,IAAI,IAAJ,IAAY,KAAK,MAAL,EAAa;AAC5B,YAAM,cAAc,KAAK,eAAL,CADQ;;AAG5B,UAAI,oBAAU,SAAV,CAAoB,WAApB,CAAJ,EAAsC;AACpC,eAAO,IAAP,CAAY,WAAZ,EADoC;OAAtC;KAHF;;AAQA,WAAO,OAAO,IAAP,CAAY,eAAZ,CAAP,CAfoB;GAAtB;;AAkBA,MAAI,MAAJ,GAAa;AACX,WAAO,KAAK,MAAL,CAAY,MAAZ,CADI;GAAb;;AAIA,WAAS;AACP,QAAI,KAAK,OAAL,EAAc;AAChB,aAAO,IAAP,CADgB;KAAlB;;AAIA,UAAM,QAAQ,EAAR,CALC;;AAOP,SAAK,IAAI,IAAJ,IAAY,KAAK,MAAL,EAAa;AAC5B,YAAM,IAAN,CAAW,KAAK,MAAL,EAAX,EAD4B;KAA9B;;AAIA,WAAO,KAAP,CAXO;GAAT;;AAcA,MAAI,WAAJ,GAAkB;AAChB,WAAO,IAAP,CADgB;GAAlB;;AAIA,MAAI,cAAJ,GAAqB;AACnB,WAAO,IAAP,CADmB;GAArB;;AAIA,UAAQ,KAAR,EAAe;AACb,WAAO,KAAP,CADa;GAAf;;AAIA,WAAS,KAAT,EAAgB;AACd,WAAO,KAAP,CADc;GAAhB;;AAIA,aAAW,KAAX,EAAkB;AAChB,WAAO,KAAP,CADgB;GAAlB;;AAIA,aAAW,KAAX,EAAkB;AAChB,WAAO,KAAP,CADgB;GAAlB;;AAIA,gBAAc,KAAd,EAAqB;AACnB,WAAO,KAAP,CADmB;GAArB;;AAIA,WAAS,QAAT,EAAmB;AACjB,WAAO,KAAK,MAAL,CAAY,KAAZ,GAAoB,GAApB,CAAwB,QAAxB,CAAP,CADiB;GAAnB;;AAIA,cAAY,QAAZ,EAAsB;AACpB,SAAK,QAAL,CAAc,QAAd,EADoB;GAAtB;CA7Fa;kBAAM","file":"repeatable-value.js","sourcesContent":["import FormValue from './form-value';\nimport RepeatableItemValue from './repeatable-item-value';\nimport TextUtils from '../utils/text-utils';\n\nconst SearchSeparator = ' ';\n\nexport default class RepeatableValue extends FormValue {\n  constructor(element, items) {\n    super(element, items);\n\n    this._items = [];\n\n    if (items != null) {\n      for (let item of items) {\n        this._items.push(new RepeatableItemValue(this.element, item));\n      }\n    }\n  }\n\n  get isEmpty() {\n    return this._items.length === 0;\n  }\n\n  get displayValue() {\n    if (this.length === 1) {\n      return '1 Item';\n    } else {\n      return this.length + ' Items';\n    }\n  }\n\n  get searchableValue() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const values = [];\n\n    for (let item of this._items) {\n      const searchValue = item.searchableValue;\n\n      if (TextUtils.isPresent(searchValue)) {\n        values.push(searchValue);\n      }\n    }\n\n    return values.join(SearchSeparator);\n  }\n\n  get length() {\n    return this._items.length;\n  }\n\n  toJSON() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const items = [];\n\n    for (let item of this._items) {\n      items.push(item.toJSON());\n    }\n\n    return items;\n  }\n\n  get columnValue() {\n    return null;\n  }\n\n  get multipleValues() {\n    return null;\n  }\n\n  isEqual(value) {\n    return false;\n  }\n\n  contains(value) {\n    return false;\n  }\n\n  startsWith(value) {\n    return false;\n  }\n\n  isLessThan(value) {\n    return false;\n  }\n\n  isGreaterThan(value) {\n    return false;\n  }\n\n  mapItems(callback) {\n    return this._items.slice().map(callback);\n  }\n\n  forEachItem(callback) {\n    this.mapItems(callback);\n  }\n}\n"]}