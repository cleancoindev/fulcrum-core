{"version":3,"sources":["../../src/values/repeatable-value.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAIA,MAAM,eAAe,GAAG,GAAG,CAAC;;AAEb,MAAM,eAAe,6BAAmB;AACrD,aAAW,CAAC,OAAO,EAAE,KAAK,EAAE;AAC1B,SAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;;AAEtB,QAAI,CAAC,MAAM,GAAG,EAAE,CAAC;;AAEjB,QAAI,KAAK,IAAI,IAAI,EAAE;AACjB,WAAK,IAAI,IAAI,IAAI,KAAK,EAAE;AACtB,YAAI,CAAC,MAAM,CAAC,IAAI,CAAC,kCAAwB,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;OAC/D;KACF;GACF;;AAED,MAAI,OAAO,GAAG;AACZ,WAAO,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC;GACjC;;AAED,MAAI,YAAY,GAAG;AACjB,QAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;AACrB,aAAO,QAAQ,CAAC;KACjB,MAAM;AACL,aAAO,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;KAC/B;GACF;;AAED,MAAI,eAAe,GAAG;AACpB,QAAI,IAAI,CAAC,OAAO,EAAE;AAChB,aAAO,IAAI,CAAC;KACb;;AAED,UAAM,MAAM,GAAG,EAAE,CAAC;;AAElB,SAAK,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,EAAE;AAC5B,YAAM,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC;;AAEzC,UAAI,oBAAU,SAAS,CAAC,WAAW,CAAC,EAAE;AACpC,cAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;OAC1B;KACF;;AAED,WAAO,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;GACrC;;AAED,MAAI,MAAM,GAAG;AACX,WAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;GAC3B;;AAED,QAAM,GAAG;AACP,QAAI,IAAI,CAAC,OAAO,EAAE;AAChB,aAAO,IAAI,CAAC;KACb;;AAED,UAAM,KAAK,GAAG,EAAE,CAAC;;AAEjB,SAAK,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,EAAE;AAC5B,WAAK,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;KAC3B;;AAED,WAAO,KAAK,CAAC;GACd;;AAED,MAAI,WAAW,GAAG;AAChB,WAAO,IAAI,CAAC;GACb;;AAED,MAAI,cAAc,GAAG;AACnB,WAAO,IAAI,CAAC;GACb;;AAED,SAAO,CAAC,KAAK,EAAE;AACb,WAAO,KAAK,CAAC;GACd;;AAED,UAAQ,CAAC,KAAK,EAAE;AACd,WAAO,KAAK,CAAC;GACd;;AAED,YAAU,CAAC,KAAK,EAAE;AAChB,WAAO,KAAK,CAAC;GACd;;AAED,YAAU,CAAC,KAAK,EAAE;AAChB,WAAO,KAAK,CAAC;GACd;;AAED,eAAa,CAAC,KAAK,EAAE;AACnB,WAAO,KAAK,CAAC;GACd;;AAED,UAAQ,CAAC,QAAQ,EAAE;AACjB,WAAO,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;GAC1C;;AAED,aAAW,CAAC,QAAQ,EAAE;AACpB,QAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;GACzB;CACF;kBAhGoB,eAAe","file":"repeatable-value.js","sourcesContent":["import FormValue from './form-value';\nimport RepeatableItemValue from './repeatable-item-value';\nimport TextUtils from '../utils/text-utils';\n\nconst SearchSeparator = ' ';\n\nexport default class RepeatableValue extends FormValue {\n  constructor(element, items) {\n    super(element, items);\n\n    this._items = [];\n\n    if (items != null) {\n      for (let item of items) {\n        this._items.push(new RepeatableItemValue(this.element, item));\n      }\n    }\n  }\n\n  get isEmpty() {\n    return this._items.length === 0;\n  }\n\n  get displayValue() {\n    if (this.length === 1) {\n      return '1 Item';\n    } else {\n      return this.length + ' Items';\n    }\n  }\n\n  get searchableValue() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const values = [];\n\n    for (let item of this._items) {\n      const searchValue = item.searchableValue;\n\n      if (TextUtils.isPresent(searchValue)) {\n        values.push(searchValue);\n      }\n    }\n\n    return values.join(SearchSeparator);\n  }\n\n  get length() {\n    return this._items.length;\n  }\n\n  toJSON() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const items = [];\n\n    for (let item of this._items) {\n      items.push(item.toJSON());\n    }\n\n    return items;\n  }\n\n  get columnValue() {\n    return null;\n  }\n\n  get multipleValues() {\n    return null;\n  }\n\n  isEqual(value) {\n    return false;\n  }\n\n  contains(value) {\n    return false;\n  }\n\n  startsWith(value) {\n    return false;\n  }\n\n  isLessThan(value) {\n    return false;\n  }\n\n  isGreaterThan(value) {\n    return false;\n  }\n\n  mapItems(callback) {\n    return this._items.slice().map(callback);\n  }\n\n  forEachItem(callback) {\n    this.mapItems(callback);\n  }\n}\n"]}