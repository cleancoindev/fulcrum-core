{"version":3,"sources":["../../src/values/repeatable-value.js"],"names":["SearchSeparator","RepeatableValue","element","items","_items","item","push","length","format","options","isEmpty","useDisplayValue","displayValue","toJSON","isEqual","value","contains","startsWith","isLessThan","isGreaterThan","mapItems","callback","slice","map","forEachItem","itemIndex","id","index","insertItem","removeItem","splice","createNewItem","attributes","v4","form_values","values","searchValue","searchableValue","isPresent","join"],"mappings":"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","file":"repeatable-value.js","sourcesContent":["import FormValue from './form-value';\nimport RepeatableItemValue from './repeatable-item-value';\nimport TextUtils from '../utils/text-utils';\nimport uuid from 'uuid';\n\nconst SearchSeparator = ' ';\n\nexport default class RepeatableValue extends FormValue {\n  constructor(element, items) {\n    super(element, items);\n\n    this._items = [];\n\n    if (items != null) {\n      for (const item of items) {\n        this._items.push(new RepeatableItemValue(this.element, item, this._items.length));\n      }\n    }\n  }\n\n  get isEmpty() {\n    return this._items.length === 0;\n  }\n\n  get displayValue() {\n    if (this.length === 1) {\n      return '1 Item';\n    }\n\n    return this.length + ' Items';\n  }\n\n  get searchableValue() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const values = [];\n\n    for (const item of this._items) {\n      const searchValue = item.searchableValue;\n\n      if (TextUtils.isPresent(searchValue)) {\n        values.push(searchValue);\n      }\n    }\n\n    return values.join(SearchSeparator);\n  }\n\n  format(options) {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    return options.useDisplayValue ? this.displayValue : this.length;\n  }\n\n  get length() {\n    return this._items.length;\n  }\n\n  toJSON() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const items = [];\n\n    for (const item of this._items) {\n      items.push(item.toJSON());\n    }\n\n    return items;\n  }\n\n  get columnValue() {\n    return null;\n  }\n\n  get multipleValues() {\n    return null;\n  }\n\n  isEqual(value) {\n    return false;\n  }\n\n  contains(value) {\n    return false;\n  }\n\n  startsWith(value) {\n    return false;\n  }\n\n  isLessThan(value) {\n    return false;\n  }\n\n  isGreaterThan(value) {\n    return false;\n  }\n\n  mapItems(callback) {\n    return this._items.slice().map(callback);\n  }\n\n  // return a copy until it's determined that a mutable API is necessary\n  get items() {\n    return this._items.slice();\n  }\n\n  forEachItem(callback) {\n    this.mapItems(callback);\n  }\n\n  itemIndex(id) {\n    for (let index = 0; index < this._items.length; ++index) {\n      if (id === this._items[index].id) {\n        return index;\n      }\n    }\n\n    return -1;\n  }\n\n  insertItem(item) {\n    const index = this.itemIndex(item.id);\n\n    if (index > -1) {\n      this._items[index] = item;\n    } else {\n      this._items.push(item);\n    }\n  }\n\n  removeItem(id) {\n    const index = this.itemIndex(id);\n\n    if (index > -1) {\n      const item = this._items[index];\n\n      this._items.splice(index, 1);\n\n      return item;\n    }\n\n    return null;\n  }\n\n  createNewItem() {\n    const attributes = {\n      id: uuid.v4(),\n      form_values: {}\n    };\n\n    return new RepeatableItemValue(this.element, attributes, this._items.length);\n  }\n}\n"]}