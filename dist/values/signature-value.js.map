{"version":3,"sources":["../../src/values/signature-value.js"],"names":["SignatureValue","element","attributes","_identifier","signature_id","_timestamp","parseISOTimestamp","timestamp","clear","toJSON","isEmpty","formatISOTimestamp","isEqual","value","contains","startsWith","isLessThan","isGreaterThan","id","Date","TypeError","key"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;;;;;;;;;IAEqBA,c;;;AACnB,0BAAYC,OAAZ,EAAqBC,UAArB,EAAiC;AAAA;;AAAA,iDAC/B,sBAAMD,OAAN,EAAeC,UAAf,CAD+B;;AAG/B,QAAIA,UAAJ,EAAgB;AACd,YAAKC,WAAL,GAAmBD,WAAWE,YAA9B;AACA,YAAKC,UAAL,GAAkB,oBAAUC,iBAAV,CAA4BJ,WAAWK,SAAvC,CAAlB;AACD;AAN8B;AAOhC;;2BAsBDC,K,oBAAQ;AACN,SAAKL,WAAL,GAAmB,IAAnB;AACA,SAAKE,UAAL,GAAkB,IAAlB;AACD,G;;2BAmCDI,M,qBAAS;AACP,QAAI,KAAKC,OAAT,EAAkB;AAChB,aAAO,IAAP;AACD;;AAED,WAAO;AACLN,oBAAc,KAAKD,WADd;AAELI,iBAAW,oBAAUI,kBAAV,CAA6B,KAAKN,UAAlC;AAFN,KAAP;AAID,G;;2BAEDO,O,oBAAQC,K,EAAO;AACb,WAAO,KAAP;AACD,G;;2BAEDC,Q,qBAASD,K,EAAO;AACd,WAAO,KAAP;AACD,G;;2BAEDE,U,uBAAWF,K,EAAO;AAChB,WAAO,KAAP;AACD,G;;2BAEDG,U,uBAAWH,K,EAAO;AAChB,WAAO,KAAP;AACD,G;;2BAEDI,a,0BAAcJ,K,EAAO;AACnB,WAAO,KAAP;AACD,G;;;;wBAvFQ;AACP,aAAO,KAAKV,WAAZ;AACD,K;sBAEMe,E,EAAI;AACT,WAAKf,WAAL,GAAmBe,EAAnB;AACD;;;wBAEe;AACd,aAAO,KAAKb,UAAZ;AACD,K;sBAEaE,S,EAAW;AACvB,UAAI,EAAEA,qBAAqBY,IAAvB,CAAJ,EAAkC;AAChC,cAAM,IAAIC,SAAJ,CAAc,0BAAd,CAAN;AACD;;AAED,WAAKf,UAAL,GAAkBE,SAAlB;AACD;;;wBAOa;AACZ,aAAO,KAAKJ,WAAL,IAAoB,IAA3B;AACD;;;wBAEkB;AACjB,aAAO,KAAKO,OAAL,GAAe,IAAf,GAAsB,aAA7B;AACD;;;wBAEqB;AACpB,aAAO,IAAP;AACD;;;wBAEY;AACX,aAAO,KAAKA,OAAL,GAAe,CAAf,GAAmB,CAA1B;AACD;;;wBAEiB;AAChB,UAAI,KAAKA,OAAT,EAAkB;AAChB,eAAO,IAAP;AACD;;AAED,UAAMG,QAAQ,EAAd;;AAEAA,YAAM,MAAM,KAAKZ,OAAL,CAAaoB,GAAnB,GAAyB,YAA/B,IAA+C,KAAKd,SAApD;AACAM,YAAM,MAAM,KAAKZ,OAAL,CAAaoB,GAAzB,IAAgC,KAAKlB,WAArC;;AAEA,aAAOU,KAAP;AACD;;;wBAEoB;AACnB,aAAO,IAAP;AACD;;;;;;kBAlEkBb,c","file":"signature-value.js","sourcesContent":["import FormValue from './form-value';\nimport DateUtils from '../utils/date-utils';\n\nexport default class SignatureValue extends FormValue {\n  constructor(element, attributes) {\n    super(element, attributes);\n\n    if (attributes) {\n      this._identifier = attributes.signature_id;\n      this._timestamp = DateUtils.parseISOTimestamp(attributes.timestamp);\n    }\n  }\n\n  get id() {\n    return this._identifier;\n  }\n\n  set id(id) {\n    this._identifier = id;\n  }\n\n  get timestamp() {\n    return this._timestamp;\n  }\n\n  set timestamp(timestamp) {\n    if (!(timestamp instanceof Date)) {\n      throw new TypeError('timestamp must be a Date');\n    }\n\n    this._timestamp = timestamp;\n  }\n\n  clear() {\n    this._identifier = null;\n    this._timestamp = null;\n  }\n\n  get isEmpty() {\n    return this._identifier == null;\n  }\n\n  get displayValue() {\n    return this.isEmpty ? null : '1 Signature';\n  }\n\n  get searchableValue() {\n    return null;\n  }\n\n  get length() {\n    return this.isEmpty ? 0 : 1;\n  }\n\n  get columnValue() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const value = {};\n\n    value['f' + this.element.key + '_timestamp'] = this.timestamp;\n    value['f' + this.element.key] = this._identifier;\n\n    return value;\n  }\n\n  get multipleValues() {\n    return null;\n  }\n\n  toJSON() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    return {\n      signature_id: this._identifier,\n      timestamp: DateUtils.formatISOTimestamp(this._timestamp)\n    };\n  }\n\n  isEqual(value) {\n    return false;\n  }\n\n  contains(value) {\n    return false;\n  }\n\n  startsWith(value) {\n    return false;\n  }\n\n  isLessThan(value) {\n    return false;\n  }\n\n  isGreaterThan(value) {\n    return false;\n  }\n}\n"]}