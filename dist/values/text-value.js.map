{"version":3,"sources":["../../src/values/text-value.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;;;;;;;;;;;;;IAEqB,S;;;;;;;;;;;wBACD;AAChB,UAAI,KAAK,OAAL,CAAa,SAAjB,EAA4B;AAC1B,eAAO,KAAK,YAAZ;AACD;;;AAGD,aAAO,KAAK,SAAL,IAAkB,IAAzB;AACD;;;wBAEkB;AACjB,UAAI,KAAK,OAAL,CAAa,SAAb,IAA0B,KAAK,SAAL,IAAkB,IAAhD,EAAsD;AACpD,eAAO,sBAAY,gCAAZ,CAA6C,KAAK,SAAlD,EAA6D,KAAK,OAAL,CAAa,eAA1E,CAAP;AACD;;AAED,aAAO,KAAK,SAAL,IAAkB,EAAzB;AACD;;;;;;kBAhBkB,S","file":"text-value.js","sourcesContent":["import TextualValue from './textual-value';\nimport NumberUtils from '../utils/number-utils';\n\nexport default class TextValue extends TextualValue {\n  get columnValue() {\n    if (this.element.isNumeric) {\n      return this.numericValue;\n    }\n    // this does NOT work in loose mode\n    // return super.columnValue;\n    return this.textValue || null;\n  }\n\n  get displayValue() {\n    if (this.element.isNumeric && this.textValue != null) {\n      return NumberUtils.localizedStringFromMachineString(this.textValue, this.element.isDecimalFormat);\n    }\n\n    return this.textValue || '';\n  }\n}\n"]}