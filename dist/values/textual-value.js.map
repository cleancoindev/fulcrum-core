{"version":3,"sources":["../../src/values/textual-value.js"],"names":["TextualValue","element","textValue","toString","format","useDisplayValue","isEmpty","displayValue","toJSON","isEqual","stringValue","string","toLowerCase","contains","startsWith","isLessThan","thisValue","parseDouble","thatValue","isGreaterThan","length","number"],"mappings":"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","file":"textual-value.js","sourcesContent":["import FormValue from './form-value';\nimport TextUtils from '../utils/text-utils';\nimport NumberUtils from '../utils/number-utils';\n\nexport default class TextualValue extends FormValue {\n  constructor(element, textValue) {\n    super(element, textValue);\n\n    this.textValue = textValue != null ? textValue.toString() : null;\n  }\n\n  format({useDisplayValue = false}) {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    return useDisplayValue ? this.displayValue : this.textValue;\n  }\n\n  get isEmpty() {\n    return this.textValue == null || this.textValue.length === 0;\n  }\n\n  get displayValue() {\n    return this.textValue || '';\n  }\n\n  get searchableValue() {\n    return this.displayValue || '';\n  }\n\n  get length() {\n    if (this.textValue != null) {\n      return this.textValue.length;\n    }\n\n    return 0;\n  }\n\n  get columnValue() {\n    return this.textValue || null;\n  }\n\n  get multipleValues() {\n    return null;\n  }\n\n  toJSON() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    return this.textValue;\n  }\n\n  isEqual(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    const string = (stringValue == null ? '' : stringValue.toString());\n\n    return this.textValue.toLowerCase() === string.toLowerCase();\n  }\n\n  contains(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    if (stringValue == null) {\n      return false;\n    }\n\n    const string = stringValue.toString();\n\n    return TextUtils.contains(this.textValue, string);\n  }\n\n  startsWith(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    if (stringValue == null) {\n      return false;\n    }\n\n    return TextUtils.startsWith(this.textValue, stringValue.toString());\n  }\n\n  isLessThan(stringValue) {\n    if (this.textValue == null || stringValue == null) {\n      return false;\n    }\n\n    let string = null;\n\n    if (stringValue != null) {\n      string = stringValue.toString();\n    }\n\n    const thisValue = NumberUtils.parseDouble(this.textValue);\n    const thatValue = NumberUtils.parseDouble(string);\n\n    if (thisValue == null || thatValue == null) {\n      return false;\n    }\n\n    return thisValue < thatValue;\n  }\n\n  isGreaterThan(stringValue) {\n    if (this.textValue == null || stringValue == null) {\n      return false;\n    }\n\n    const string = (stringValue == null ? '' : stringValue.toString());\n\n    const thisValue = NumberUtils.parseDouble(this.textValue);\n    const thatValue = NumberUtils.parseDouble(string);\n\n    if (thisValue == null || thatValue == null) {\n      return false;\n    }\n\n    return thisValue > thatValue;\n  }\n\n  get numericValue() {\n    return NumberUtils.parseDouble(this.textValue);\n  }\n\n  get isNumeric() {\n    if (!this.isEmpty) {\n      const number = NumberUtils.parseDouble(this.textValue);\n\n      return number != null;\n    }\n\n    return true;\n  }\n}\n"]}