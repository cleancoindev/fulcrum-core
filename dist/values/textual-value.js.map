{"version":3,"sources":["../../src/values/textual-value.js"],"names":[],"mappings":"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","file":"textual-value.js","sourcesContent":["import FormValue from './form-value';\nimport TextUtils from '../utils/text-utils';\nimport NumberUtils from '../utils/number-utils';\n\nexport default class TextualValue extends FormValue {\n  constructor(element, textValue) {\n    super(element, textValue);\n\n    this.textValue = textValue;\n  }\n\n  get isEmpty() {\n    return TextUtils.isEmpty(this.textValue);\n  }\n\n  get displayValue() {\n    return this.textValue || '';\n  }\n\n  get searchableValue() {\n    return this.textValue || '';\n  }\n\n  get length() {\n    if (this.textValue != null) {\n      return this.textValue.length;\n    }\n\n    return 0;\n  }\n\n  get columnValue() {\n    return this.textValue || null;\n  }\n\n  get multipleValues() {\n    return null;\n  }\n\n  toJSON() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    return this.textValue;\n  }\n\n  isEqual(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    stringValue = (stringValue == null ? '' : stringValue.toString());\n\n    return this.textValue.toLowerCase() === stringValue.toLowerCase();\n  }\n\n  contains(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    if (stringValue == null) {\n      return false;\n    }\n\n    stringValue = stringValue.toString();\n\n    return TextUtils.contains(this.textValue, stringValue);\n  }\n\n  startsWith(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    if (stringValue == null) {\n      return false;\n    }\n\n    stringValue = stringValue.toString();\n\n    return TextUtils.startsWith(this.textValue, stringValue);\n  }\n\n  isLessThan(stringValue) {\n    if (this.textValue == null || stringValue == null) {\n      return false;\n    }\n\n    if (stringValue != null) {\n      stringValue = stringValue.toString();\n    }\n\n    const thisValue = NumberUtils.parseDouble(this.textValue);\n    const thatValue = NumberUtils.parseDouble(stringValue);\n\n    return thisValue < thatValue;\n  }\n\n  isGreaterThan(stringValue) {\n    if (this.textValue == null || stringValue == null) {\n      return false;\n    }\n\n    stringValue = (stringValue == null ? '' : stringValue.toString());\n\n    const thisValue = NumberUtils.parseDouble(this.textValue);\n    const thatValue = NumberUtils.parseDouble(stringValue);\n\n    return thisValue > thatValue;\n  }\n\n  get numericValue() {\n    return NumberUtils.parseDouble(this.textValue);\n  }\n}\n"]}