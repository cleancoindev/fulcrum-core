{"version":3,"sources":["../../src/values/textual-value.js"],"names":[],"mappings":"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","file":"textual-value.js","sourcesContent":["import FormValue from './form-value';\nimport TextUtils from '../utils/text-utils';\nimport NumberUtils from '../utils/number-utils';\n\nexport default class TextualValue extends FormValue {\n  constructor(element, textValue) {\n    super(element, textValue);\n\n    this.textValue = textValue;\n  }\n\n  get isEmpty() {\n    return TextUtils.isEmpty(this.textValue);\n  }\n\n  get displayValue() {\n    return this.textValue || '';\n  }\n\n  get searchableValue() {\n    return this.textValue || '';\n  }\n\n  get length() {\n    if (this.textValue != null) {\n      return this.textValue.length;\n    }\n\n    return 0;\n  }\n\n  get columnValue() {\n    return this.textValue || null;\n  }\n\n  get multipleValues() {\n    return null;\n  }\n\n  toJSON() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    return this.textValue;\n  }\n\n  isEqual(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    stringValue = (stringValue == null ? '' : stringValue.toString());\n\n    return this.textValue.toLowerCase() === stringValue.toLowerCase();\n  }\n\n  contains(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    if (stringValue == null) {\n      return false;\n    }\n\n    stringValue = stringValue.toString();\n\n    return TextUtils.contains(this.textValue, stringValue);\n  }\n\n  startsWith(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    if (stringValue == null) {\n      return false;\n    }\n\n    stringValue = stringValue.toString();\n\n    return TextUtils.startsWith(this.textValue, stringValue);\n  }\n\n  isLessThan(stringValue) {\n    if (this.textValue == null || stringValue == null) {\n      return false;\n    }\n\n    if (stringValue != null) {\n      stringValue = stringValue.toString();\n    }\n\n    const thisValue = NumberUtils.parseDouble(this.textValue);\n    const thatValue = NumberUtils.parseDouble(stringValue);\n\n    return thisValue < thatValue;\n  }\n\n  isGreaterThan(stringValue) {\n    if (this.textValue == null || stringValue == null) {\n      return false;\n    }\n\n    stringValue = (stringValue == null ? '' : stringValue.toString());\n\n    const thisValue = NumberUtils.parseDouble(this.textValue);\n    const thatValue = NumberUtils.parseDouble(stringValue);\n\n    return thisValue > thatValue;\n  }\n\n  get numericValue() {\n    return NumberUtils.parseDouble(this.textValue);\n  }\n}\n"]}