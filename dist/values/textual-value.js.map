{"version":3,"sources":["../../src/values/textual-value.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;IAIqB;;;AACnB,WADmB,YACnB,CAAY,OAAZ,EAAqB,SAArB,EAAgC;0BADb,cACa;;iDAC9B,sBAAM,OAAN,EAAe,SAAf,GAD8B;;AAG9B,UAAK,SAAL,GAAiB,SAAjB,CAH8B;;GAAhC;;AADmB,yBAmCnB,2BAAS;AACP,QAAI,KAAK,OAAL,EAAc;AAChB,aAAO,IAAP,CADgB;KAAlB;;AAIA,WAAO,KAAK,SAAL,CALA;;;AAnCU,yBA2CnB,2BAAQ,aAAa;AACnB,QAAI,KAAK,OAAL,EAAc;AAChB,aAAO,oBAAU,OAAV,CAAkB,WAAlB,CAAP,CADgB;KAAlB;;AAIA,kBAAe,eAAe,IAAf,GAAsB,EAAtB,GAA2B,YAAY,QAAZ,EAA3B,CALI;;AAOnB,WAAO,KAAK,SAAL,CAAe,WAAf,OAAiC,YAAY,WAAZ,EAAjC,CAPY;;;AA3CF,yBAqDnB,6BAAS,aAAa;AACpB,QAAI,KAAK,OAAL,EAAc;AAChB,aAAO,oBAAU,OAAV,CAAkB,WAAlB,CAAP,CADgB;KAAlB;;AAIA,QAAI,eAAe,IAAf,EAAqB;AACvB,aAAO,KAAP,CADuB;KAAzB;;AAIA,kBAAc,YAAY,QAAZ,EAAd,CAToB;;AAWpB,WAAO,oBAAU,QAAV,CAAmB,KAAK,SAAL,EAAgB,WAAnC,CAAP,CAXoB;;;AArDH,yBAmEnB,iCAAW,aAAa;AACtB,QAAI,KAAK,OAAL,EAAc;AAChB,aAAO,oBAAU,OAAV,CAAkB,WAAlB,CAAP,CADgB;KAAlB;;AAIA,QAAI,eAAe,IAAf,EAAqB;AACvB,aAAO,KAAP,CADuB;KAAzB;;AAIA,kBAAc,YAAY,QAAZ,EAAd,CATsB;;AAWtB,WAAO,oBAAU,UAAV,CAAqB,KAAK,SAAL,EAAgB,WAArC,CAAP,CAXsB;;;AAnEL,yBAiFnB,iCAAW,aAAa;AACtB,QAAI,KAAK,SAAL,IAAkB,IAAlB,IAA0B,eAAe,IAAf,EAAqB;AACjD,aAAO,KAAP,CADiD;KAAnD;;AAIA,QAAI,eAAe,IAAf,EAAqB;AACvB,oBAAc,YAAY,QAAZ,EAAd,CADuB;KAAzB;;AAIA,QAAM,YAAY,sBAAY,WAAZ,CAAwB,KAAK,SAAL,CAApC,CATgB;AAUtB,QAAM,YAAY,sBAAY,WAAZ,CAAwB,WAAxB,CAAZ,CAVgB;;AAYtB,WAAO,YAAY,SAAZ,CAZe;;;AAjFL,yBAgGnB,uCAAc,aAAa;AACzB,QAAI,KAAK,SAAL,IAAkB,IAAlB,IAA0B,eAAe,IAAf,EAAqB;AACjD,aAAO,KAAP,CADiD;KAAnD;;AAIA,kBAAe,eAAe,IAAf,GAAsB,EAAtB,GAA2B,YAAY,QAAZ,EAA3B,CALU;;AAOzB,QAAM,YAAY,sBAAY,WAAZ,CAAwB,KAAK,SAAL,CAApC,CAPmB;AAQzB,QAAM,YAAY,sBAAY,WAAZ,CAAwB,WAAxB,CAAZ,CARmB;;AAUzB,WAAO,YAAY,SAAZ,CAVkB;;;eAhGR;;wBAOL;AACZ,aAAO,oBAAU,OAAV,CAAkB,KAAK,SAAL,CAAzB,CADY;;;;wBAIK;AACjB,aAAO,KAAK,SAAL,IAAkB,EAAlB,CADU;;;;wBAIG;AACpB,aAAO,KAAK,SAAL,IAAkB,EAAlB,CADa;;;;wBAIT;AACX,UAAI,KAAK,SAAL,IAAkB,IAAlB,EAAwB;AAC1B,eAAO,KAAK,SAAL,CAAe,MAAf,CADmB;OAA5B;;AAIA,aAAO,CAAP,CALW;;;;wBAQK;AAChB,aAAO,KAAK,SAAL,IAAkB,IAAlB,CADS;;;;wBAIG;AACnB,aAAO,IAAP,CADmB;;;;wBA8EF;AACjB,aAAO,sBAAY,WAAZ,CAAwB,KAAK,SAAL,CAA/B,CADiB;;;;SA7GA","file":"textual-value.js","sourcesContent":["import FormValue from './form-value';\nimport TextUtils from '../utils/text-utils';\nimport NumberUtils from '../utils/number-utils';\n\nexport default class TextualValue extends FormValue {\n  constructor(element, textValue) {\n    super(element, textValue);\n\n    this.textValue = textValue;\n  }\n\n  get isEmpty() {\n    return TextUtils.isEmpty(this.textValue);\n  }\n\n  get displayValue() {\n    return this.textValue || '';\n  }\n\n  get searchableValue() {\n    return this.textValue || '';\n  }\n\n  get length() {\n    if (this.textValue != null) {\n      return this.textValue.length;\n    }\n\n    return 0;\n  }\n\n  get columnValue() {\n    return this.textValue || null;\n  }\n\n  get multipleValues() {\n    return null;\n  }\n\n  toJSON() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    return this.textValue;\n  }\n\n  isEqual(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    stringValue = (stringValue == null ? '' : stringValue.toString());\n\n    return this.textValue.toLowerCase() === stringValue.toLowerCase();\n  }\n\n  contains(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    if (stringValue == null) {\n      return false;\n    }\n\n    stringValue = stringValue.toString();\n\n    return TextUtils.contains(this.textValue, stringValue);\n  }\n\n  startsWith(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    if (stringValue == null) {\n      return false;\n    }\n\n    stringValue = stringValue.toString();\n\n    return TextUtils.startsWith(this.textValue, stringValue);\n  }\n\n  isLessThan(stringValue) {\n    if (this.textValue == null || stringValue == null) {\n      return false;\n    }\n\n    if (stringValue != null) {\n      stringValue = stringValue.toString();\n    }\n\n    const thisValue = NumberUtils.parseDouble(this.textValue);\n    const thatValue = NumberUtils.parseDouble(stringValue);\n\n    return thisValue < thatValue;\n  }\n\n  isGreaterThan(stringValue) {\n    if (this.textValue == null || stringValue == null) {\n      return false;\n    }\n\n    stringValue = (stringValue == null ? '' : stringValue.toString());\n\n    const thisValue = NumberUtils.parseDouble(this.textValue);\n    const thatValue = NumberUtils.parseDouble(stringValue);\n\n    return thisValue > thatValue;\n  }\n\n  get numericValue() {\n    return NumberUtils.parseDouble(this.textValue);\n  }\n}\n"]}