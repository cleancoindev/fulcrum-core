{"version":3,"sources":["../../src/values/textual-value.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;IAIqB,YAAY;YAAZ,YAAY;;AAC/B,WADmB,YAAY,CACnB,OAAO,EAAE,SAAS,EAAE;0BADb,YAAY;;uEAAZ,YAAY,aAEvB,OAAO,EAAE,SAAS;;AAExB,UAAK,SAAS,GAAG,SAAS,CAAC;;GAC5B;;eALkB,YAAY;;6BAmCtB;AACP,UAAI,IAAI,CAAC,OAAO,EAAE;AAChB,eAAO,IAAI,CAAC;OACb;;AAED,aAAO,IAAI,CAAC,SAAS,CAAC;KACvB;;;4BAEO,WAAW,EAAE;AACnB,UAAI,IAAI,CAAC,OAAO,EAAE;AAChB,eAAO,oBAAU,OAAO,CAAC,WAAW,CAAC,CAAC;OACvC;;AAED,aAAO,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,KAAK,WAAW,CAAC,WAAW,EAAE,CAAC;KACnE;;;6BAEQ,WAAW,EAAE;AACpB,UAAI,IAAI,CAAC,OAAO,EAAE;AAChB,eAAO,oBAAU,OAAO,CAAC,WAAW,CAAC,CAAC;OACvC;;AAED,aAAO,oBAAU,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;KACxD;;;+BAEU,WAAW,EAAE;AACtB,UAAI,IAAI,CAAC,OAAO,EAAE;AAChB,eAAO,oBAAU,OAAO,CAAC,WAAW,CAAC,CAAC;OACvC;;AAED,aAAO,oBAAU,UAAU,CAAC,IAAI,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;KAC1D;;;+BAEU,WAAW,EAAE;AACtB,UAAI,IAAI,CAAC,SAAS,IAAI,IAAI,EAAE;AAC1B,eAAO,KAAK,CAAC;OACd;;AAED,UAAM,SAAS,GAAG,sBAAY,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAC1D,UAAM,SAAS,GAAG,sBAAY,WAAW,CAAC,WAAW,CAAC,CAAC;;AAEvD,aAAO,SAAS,GAAG,SAAS,CAAC;KAC9B;;;kCAEa,WAAW,EAAE;AACzB,UAAI,IAAI,CAAC,SAAS,IAAI,IAAI,EAAE;AAC1B,eAAO,KAAK,CAAC;OACd;;AAED,UAAM,SAAS,GAAG,sBAAY,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAC1D,UAAM,SAAS,GAAG,sBAAY,WAAW,CAAC,WAAW,CAAC,CAAC;;AAEvD,aAAO,SAAS,GAAG,SAAS,CAAC;KAC9B;;;wBAhFa;AACZ,aAAO,oBAAU,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KAC1C;;;wBAEkB;AACjB,aAAO,IAAI,CAAC,SAAS,CAAC;KACvB;;;wBAEqB;AACpB,aAAO,IAAI,CAAC,SAAS,CAAC;KACvB;;;wBAEY;AACX,UAAI,IAAI,CAAC,SAAS,EAAE;AAClB,eAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;OAC9B;;AAED,aAAO,CAAC,CAAC;KACV;;;wBAEiB;AAChB,aAAO,IAAI,CAAC,SAAS,CAAC;KACvB;;;wBAEoB;AACnB,aAAO,IAAI,CAAC;KACb;;;wBAwDkB;AACjB,aAAO,sBAAY,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KAChD;;;SA3FkB,YAAY;;;kBAAZ,YAAY","file":"textual-value.js","sourcesContent":["import FormValue from './form-value';\nimport TextUtils from '../utils/text-utils';\nimport NumberUtils from '../utils/number-utils';\n\nexport default class TextualValue extends FormValue {\n  constructor(element, textValue) {\n    super(element, textValue);\n\n    this.textValue = textValue;\n  }\n\n  get isEmpty() {\n    return TextUtils.isEmpty(this.textValue);\n  }\n\n  get displayValue() {\n    return this.textValue;\n  }\n\n  get searchableValue() {\n    return this.textValue;\n  }\n\n  get length() {\n    if (this.textValue) {\n      return this.textValue.length;\n    }\n\n    return 0;\n  }\n\n  get columnValue() {\n    return this.textValue;\n  }\n\n  get multipleValues() {\n    return null;\n  }\n\n  toJSON() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    return this.textValue;\n  }\n\n  isEqual(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    return this.textValue.toLowerCase() === stringValue.toLowerCase();\n  }\n\n  contains(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    return TextUtils.contains(this.textValue, stringValue);\n  }\n\n  startsWith(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    return TextUtils.startsWith(this.textValue, stringValue);\n  }\n\n  isLessThan(stringValue) {\n    if (this.textValue == null) {\n      return false;\n    }\n\n    const thisValue = NumberUtils.parseDouble(this.textValue);\n    const thatValue = NumberUtils.parseDouble(stringValue);\n\n    return thisValue < thatValue;\n  }\n\n  isGreaterThan(stringValue) {\n    if (this.textValue == null) {\n      return false;\n    }\n\n    const thisValue = NumberUtils.parseDouble(this.textValue);\n    const thatValue = NumberUtils.parseDouble(stringValue);\n\n    return thisValue > thatValue;\n  }\n\n  get numericValue() {\n    return NumberUtils.parseDouble(this.textValue);\n  }\n}\n"]}