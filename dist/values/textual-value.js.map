{"version":3,"sources":["../../src/values/textual-value.js"],"names":[],"mappings":"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","file":"textual-value.js","sourcesContent":["import FormValue from './form-value';\nimport TextUtils from '../utils/text-utils';\nimport NumberUtils from '../utils/number-utils';\n\nexport default class TextualValue extends FormValue {\n  constructor(element, textValue) {\n    super(element, textValue);\n\n    this.textValue = textValue;\n  }\n\n  get isEmpty() {\n    return TextUtils.isEmpty(this.textValue);\n  }\n\n  get displayValue() {\n    return this.textValue || '';\n  }\n\n  get searchableValue() {\n    return this.displayValue || '';\n  }\n\n  get length() {\n    if (this.textValue != null) {\n      return this.textValue.length;\n    }\n\n    return 0;\n  }\n\n  get columnValue() {\n    return this.textValue || null;\n  }\n\n  get multipleValues() {\n    return null;\n  }\n\n  toJSON() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    return this.textValue;\n  }\n\n  isEqual(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    const string = (stringValue == null ? '' : stringValue.toString());\n\n    return this.textValue.toLowerCase() === string.toLowerCase();\n  }\n\n  contains(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    if (stringValue == null) {\n      return false;\n    }\n\n    const string = stringValue.toString();\n\n    return TextUtils.contains(this.textValue, string);\n  }\n\n  startsWith(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    if (stringValue == null) {\n      return false;\n    }\n\n    return TextUtils.startsWith(this.textValue, stringValue.toString());\n  }\n\n  isLessThan(stringValue) {\n    if (this.textValue == null || stringValue == null) {\n      return false;\n    }\n\n    let string = null;\n\n    if (stringValue != null) {\n      string = stringValue.toString();\n    }\n\n    const thisValue = NumberUtils.parseDouble(this.textValue);\n    const thatValue = NumberUtils.parseDouble(string);\n\n    if (thisValue == null || thatValue == null) {\n      return false;\n    }\n\n    return thisValue < thatValue;\n  }\n\n  isGreaterThan(stringValue) {\n    if (this.textValue == null || stringValue == null) {\n      return false;\n    }\n\n    const string = (stringValue == null ? '' : stringValue.toString());\n\n    const thisValue = NumberUtils.parseDouble(this.textValue);\n    const thatValue = NumberUtils.parseDouble(string);\n\n    if (thisValue == null || thatValue == null) {\n      return false;\n    }\n\n    return thisValue > thatValue;\n  }\n\n  get numericValue() {\n    return NumberUtils.parseDouble(this.textValue);\n  }\n\n  get isNumeric() {\n    if (!this.isEmpty) {\n      const number = NumberUtils.parseDouble(this.textValue);\n\n      return number != null;\n    }\n\n    return true;\n  }\n}\n"]}