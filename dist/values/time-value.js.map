{"version":3,"sources":["../../src/values/time-value.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAIe,MAAM,SAAS,gCAAsB;AAClD,MAAI,YAAY,GAAG;AACjB,QAAI,IAAI,CAAC,OAAO,EAAE;AAChB,aAAO,IAAI,CAAC;KACb;;AAED,UAAM,IAAI,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;;AAE9B,QAAI,IAAI,IAAI,IAAI,EAAE;AAChB,aAAO,IAAI,CAAC;KACb;;AAED,WAAO,IAAI,CAAC;GACb;;AAED,MAAI,eAAe,GAAG;AACpB,WAAO,IAAI,CAAC,SAAS,CAAC;GACvB;;AAED,YAAU,CAAC,WAAW,EAAE;AACtB,QAAI,IAAI,CAAC,OAAO,EAAE;AAChB,aAAO,oBAAU,OAAO,CAAC,WAAW,CAAC,CAAC;KACvC;;AAED,UAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;AAClC,UAAM,QAAQ,GAAG,oBAAU,SAAS,CAAC,WAAW,CAAC,CAAC;;AAElD,QAAI,QAAQ,IAAI,IAAI,IAAI,QAAQ,IAAI,IAAI,EAAE;AACxC,aAAO,KAAK,CAAC;KACd;;AAED,WAAO,QAAQ,CAAC,OAAO,EAAE,GAAG,QAAQ,CAAC,OAAO,EAAE,CAAC;GAChD;;AAED,eAAa,CAAC,WAAW,EAAE;AACzB,QAAI,IAAI,CAAC,OAAO,EAAE;AAChB,aAAO,oBAAU,OAAO,CAAC,WAAW,CAAC,CAAC;KACvC;;AAED,UAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;AAClC,UAAM,QAAQ,GAAG,oBAAU,SAAS,CAAC,WAAW,CAAC,CAAC;;AAElD,QAAI,QAAQ,IAAI,IAAI,IAAI,QAAQ,IAAI,IAAI,EAAE;AACxC,aAAO,KAAK,CAAC;KACd;;AAED,WAAO,QAAQ,CAAC,OAAO,EAAE,GAAG,QAAQ,CAAC,OAAO,EAAE,CAAC;GAChD;;AAED,WAAS,GAAG;AACV,WAAO,oBAAU,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;GAC5C;CACF;kBApDoB,SAAS","file":"time-value.js","sourcesContent":["import TextualValue from './textual-value';\nimport DateUtils from '../utils/date-utils';\nimport TextUtils from '../utils/text-utils';\n\nexport default class TimeValue extends TextualValue {\n  get displayValue() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const time = this.timeValue();\n\n    if (time == null) {\n      return null;\n    }\n\n    return time;\n  }\n\n  get searchableValue() {\n    return this.textValue;\n  }\n\n  isLessThan(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    const thisTime = this.timeValue();\n    const thatTime = DateUtils.parseTime(stringValue);\n\n    if (thisTime == null || thatTime == null) {\n      return false;\n    }\n\n    return thisTime.getTime() < thatTime.getTime();\n  }\n\n  isGreaterThan(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    const thisTime = this.timeValue();\n    const thatTime = DateUtils.parseTime(stringValue);\n\n    if (thisTime == null || thatTime == null) {\n      return false;\n    }\n\n    return thisTime.getTime() > thatTime.getTime();\n  }\n\n  timeValue() {\n    return DateUtils.parseTime(this.textValue);\n  }\n}\n"]}