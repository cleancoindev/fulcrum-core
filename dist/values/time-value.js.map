{"version":3,"sources":["../../src/values/time-value.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAIe,MAAM,SAAN,gCAAqC;AAClD,MAAI,YAAJ,GAAmB;AACjB,QAAI,KAAK,OAAL,EAAc;AAChB,aAAO,IAAP,CADgB;KAAlB;;AAIA,UAAM,OAAO,KAAK,SAAL,EAAP,CALW;;AAOjB,QAAI,QAAQ,IAAR,EAAc;AAChB,aAAO,IAAP,CADgB;KAAlB;;AAIA,WAAO,IAAP,CAXiB;GAAnB;;AAcA,MAAI,eAAJ,GAAsB;AACpB,WAAO,KAAK,SAAL,CADa;GAAtB;;AAIA,aAAW,WAAX,EAAwB;AACtB,QAAI,KAAK,OAAL,EAAc;AAChB,aAAO,oBAAU,OAAV,CAAkB,WAAlB,CAAP,CADgB;KAAlB;;AAIA,UAAM,WAAW,KAAK,SAAL,EAAX,CALgB;AAMtB,UAAM,WAAW,oBAAU,SAAV,CAAoB,WAApB,CAAX,CANgB;;AAQtB,QAAI,YAAY,IAAZ,IAAoB,YAAY,IAAZ,EAAkB;AACxC,aAAO,KAAP,CADwC;KAA1C;;AAIA,WAAO,SAAS,OAAT,KAAqB,SAAS,OAAT,EAArB,CAZe;GAAxB;;AAeA,gBAAc,WAAd,EAA2B;AACzB,QAAI,KAAK,OAAL,EAAc;AAChB,aAAO,oBAAU,OAAV,CAAkB,WAAlB,CAAP,CADgB;KAAlB;;AAIA,UAAM,WAAW,KAAK,SAAL,EAAX,CALmB;AAMzB,UAAM,WAAW,oBAAU,SAAV,CAAoB,WAApB,CAAX,CANmB;;AAQzB,QAAI,YAAY,IAAZ,IAAoB,YAAY,IAAZ,EAAkB;AACxC,aAAO,KAAP,CADwC;KAA1C;;AAIA,WAAO,SAAS,OAAT,KAAqB,SAAS,OAAT,EAArB,CAZkB;GAA3B;;AAeA,cAAY;AACV,WAAO,oBAAU,SAAV,CAAoB,KAAK,SAAL,CAA3B,CADU;GAAZ;CAjDa;kBAAM","file":"time-value.js","sourcesContent":["import TextualValue from './textual-value';\nimport DateUtils from '../utils/date-utils';\nimport TextUtils from '../utils/text-utils';\n\nexport default class TimeValue extends TextualValue {\n  get displayValue() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const time = this.timeValue();\n\n    if (time == null) {\n      return null;\n    }\n\n    return time;\n  }\n\n  get searchableValue() {\n    return this.textValue;\n  }\n\n  isLessThan(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    const thisTime = this.timeValue();\n    const thatTime = DateUtils.parseTime(stringValue);\n\n    if (thisTime == null || thatTime == null) {\n      return false;\n    }\n\n    return thisTime.getTime() < thatTime.getTime();\n  }\n\n  isGreaterThan(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    const thisTime = this.timeValue();\n    const thatTime = DateUtils.parseTime(stringValue);\n\n    if (thisTime == null || thatTime == null) {\n      return false;\n    }\n\n    return thisTime.getTime() > thatTime.getTime();\n  }\n\n  timeValue() {\n    return DateUtils.parseTime(this.textValue);\n  }\n}\n"]}