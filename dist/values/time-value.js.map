{"version":3,"sources":["../../src/values/time-value.js"],"names":["TimeValue","isLessThan","stringValue","isEmpty","thisTime","timeValue","thatTime","parseTime","isGreaterThan","textValue","isValidTime","isValid"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;;;IAEqBA,S;;;;;;;;;sBASnBC,U,uBAAWC,W,EAAa;AACtB,QAAI,KAAKC,OAAT,EAAkB;AAChB,aAAO,oBAAUA,OAAV,CAAkBD,WAAlB,CAAP;AACD;;AAED,QAAME,WAAW,KAAKC,SAAtB;AACA,QAAMC,WAAW,oBAAUC,SAAV,CAAoBL,WAApB,CAAjB;;AAEA,QAAIE,YAAY,IAAZ,IAAoBE,YAAY,IAApC,EAA0C;AACxC,aAAO,KAAP;AACD;;AAED,WAAOF,WAAWE,QAAlB;AACD,G;;sBAEDE,a,0BAAcN,W,EAAa;AACzB,QAAI,KAAKC,OAAT,EAAkB;AAChB,aAAO,oBAAUA,OAAV,CAAkBD,WAAlB,CAAP;AACD;;AAED,QAAME,WAAW,KAAKC,SAAtB;AACA,QAAMC,WAAW,oBAAUC,SAAV,CAAoBL,WAApB,CAAjB;;AAEA,QAAIE,YAAY,IAAZ,IAAoBE,YAAY,IAApC,EAA0C;AACxC,aAAO,KAAP;AACD;;AAED,WAAOF,WAAWE,QAAlB;AACD,G;;;;wBApCkB;AACjB,aAAO,KAAKG,SAAZ;AACD;;;wBAEqB;AACpB,aAAO,KAAKA,SAAZ;AACD;;;wBAgCa;AACZ,UAAI,KAAKN,OAAT,EAAkB;AAChB,eAAO,IAAP;AACD;;AAED,aAAO,oBAAUO,WAAV,CAAsB,KAAKD,SAA3B,CAAP;AACD;;;wBAEe;AACd,UAAI,KAAKN,OAAT,EAAkB;AAChB,eAAO,IAAP;AACD;;AAED,aAAO,oBAAUI,SAAV,CAAoB,KAAKE,SAAzB,CAAP;AACD;;;wBAEiB;AAChB,UAAI,CAAC,KAAKE,OAAV,EAAmB;AACjB,eAAO,IAAP;AACD;;AAED,aAAO,KAAKF,SAAL,IAAkB,IAAzB;AACD;;;;;;kBA7DkBT,S","file":"time-value.js","sourcesContent":["import TextualValue from './textual-value';\nimport DateUtils from '../utils/date-utils';\nimport TextUtils from '../utils/text-utils';\n\nexport default class TimeValue extends TextualValue {\n  get displayValue() {\n    return this.textValue;\n  }\n\n  get searchableValue() {\n    return this.textValue;\n  }\n\n  isLessThan(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    const thisTime = this.timeValue;\n    const thatTime = DateUtils.parseTime(stringValue);\n\n    if (thisTime == null || thatTime == null) {\n      return false;\n    }\n\n    return thisTime < thatTime;\n  }\n\n  isGreaterThan(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    const thisTime = this.timeValue;\n    const thatTime = DateUtils.parseTime(stringValue);\n\n    if (thisTime == null || thatTime == null) {\n      return false;\n    }\n\n    return thisTime > thatTime;\n  }\n\n  get isValid() {\n    if (this.isEmpty) {\n      return true;\n    }\n\n    return DateUtils.isValidTime(this.textValue);\n  }\n\n  get timeValue() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    return DateUtils.parseTime(this.textValue);\n  }\n\n  get columnValue() {\n    if (!this.isValid) {\n      return null;\n    }\n\n    return this.textValue || null;\n  }\n}\n"]}