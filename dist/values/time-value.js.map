{"version":3,"sources":["../../src/values/time-value.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;IAIqB,SAAS;YAAT,SAAS;;WAAT,SAAS;0BAAT,SAAS;;kEAAT,SAAS;;;eAAT,SAAS;;+BAmBjB,WAAW,EAAE;AACtB,UAAI,IAAI,CAAC,OAAO,EAAE;AAChB,eAAO,oBAAU,OAAO,CAAC,WAAW,CAAC,CAAC;OACvC;;AAED,UAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;AAClC,UAAM,QAAQ,GAAG,oBAAU,SAAS,CAAC,WAAW,CAAC,CAAC;;AAElD,UAAI,QAAQ,IAAI,IAAI,IAAI,QAAQ,IAAI,IAAI,EAAE;AACxC,eAAO,KAAK,CAAC;OACd;;AAED,aAAO,QAAQ,CAAC,OAAO,EAAE,GAAG,QAAQ,CAAC,OAAO,EAAE,CAAC;KAChD;;;kCAEa,WAAW,EAAE;AACzB,UAAI,IAAI,CAAC,OAAO,EAAE;AAChB,eAAO,oBAAU,OAAO,CAAC,WAAW,CAAC,CAAC;OACvC;;AAED,UAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;AAClC,UAAM,QAAQ,GAAG,oBAAU,SAAS,CAAC,WAAW,CAAC,CAAC;;AAElD,UAAI,QAAQ,IAAI,IAAI,IAAI,QAAQ,IAAI,IAAI,EAAE;AACxC,eAAO,KAAK,CAAC;OACd;;AAED,aAAO,QAAQ,CAAC,OAAO,EAAE,GAAG,QAAQ,CAAC,OAAO,EAAE,CAAC;KAChD;;;gCAEW;AACV,aAAO,oBAAU,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KAC5C;;;wBAlDkB;AACjB,UAAI,IAAI,CAAC,OAAO,EAAE;AAChB,eAAO,IAAI,CAAC;OACb;;AAED,UAAM,IAAI,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;;AAE9B,UAAI,IAAI,IAAI,IAAI,EAAE;AAChB,eAAO,IAAI,CAAC;OACb;;AAED,aAAO,IAAI,CAAC;KACb;;;wBAEqB;AACpB,aAAO,IAAI,CAAC,SAAS,CAAC;KACvB;;;SAjBkB,SAAS;;;kBAAT,SAAS","file":"time-value.js","sourcesContent":["import TextualValue from './textual-value';\nimport DateUtils from '../utils/date-utils';\nimport TextUtils from '../utils/text-utils';\n\nexport default class TimeValue extends TextualValue {\n  get displayValue() {\n    if (this.isEmpty) {\n      return null;\n    }\n\n    const time = this.timeValue();\n\n    if (time == null) {\n      return null;\n    }\n\n    return time;\n  }\n\n  get searchableValue() {\n    return this.textValue;\n  }\n\n  isLessThan(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    const thisTime = this.timeValue();\n    const thatTime = DateUtils.parseTime(stringValue);\n\n    if (thisTime == null || thatTime == null) {\n      return false;\n    }\n\n    return thisTime.getTime() < thatTime.getTime();\n  }\n\n  isGreaterThan(stringValue) {\n    if (this.isEmpty) {\n      return TextUtils.isEmpty(stringValue);\n    }\n\n    const thisTime = this.timeValue();\n    const thatTime = DateUtils.parseTime(stringValue);\n\n    if (thisTime == null || thatTime == null) {\n      return false;\n    }\n\n    return thisTime.getTime() > thatTime.getTime();\n  }\n\n  timeValue() {\n    return DateUtils.parseTime(this.textValue);\n  }\n}\n"]}